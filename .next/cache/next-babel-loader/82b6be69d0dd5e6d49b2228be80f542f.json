{"ast":null,"code":"var _jsxFileName = \"E:\\\\SYGEFEX\\\\Sygefex-front-Formik\\\\src\\\\components\\\\center\\\\NewCenterHooks.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { MinimStyledPage } from '../styles/StyledPage';\nimport Error from '../ErrorMessage.js';\nimport Select from 'react-select';\nimport useForm from '../utils/useForm';\nimport { Formik, Form } from 'formik';\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { createCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { getObjectFromID, uniqueCodeGen } from \"../queries&Mutations&Functions/Functions\";\nimport { getAllCountrysQuery, getAllRegionsOfACountryQuery, getDivisionsOfARegionQuery, getSubDivisionsOfADivisionQuery, getTownsOfASubDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\nconst InputGroup = styled.div.withConfig({\n  displayName: \"NewCenterHooks__InputGroup\",\n  componentId: \"juvr68-0\"\n})([\"display:flex;flex-direction:column;min-width:13rem;margin:0 1rem;\"]);\nconst AllControls = styled.div.withConfig({\n  displayName: \"NewCenterHooks__AllControls\",\n  componentId: \"juvr68-1\"\n})([\"display:flex;flex-direction:column;\"]);\nconst validationSchema = Yup.object().shape({\n  centerName: Yup.string().required(\"Nom du Centre Obligatoire\"),\n  centerCode: Yup.string().required(\"Code centre Obligatoire\"),\n  centerNumber: Yup.number().min(1, \"Numéro centre du doit etre Positif\").required(\"Numéro centre Obligatoire\")\n});\n\nconst NewCenterHooks = () => {\n  const initialValues = {\n    centerName: \"\",\n    centerCode: \"\",\n    town: \"\"\n  };\n  const [state, setState, handleReactSelectChange] = useForm({\n    regionID: \"\",\n    divisionID: \"\",\n    subDivID: \"\"\n  });\n  const {\n    data,\n    loading: loadingCount,\n    error: errorCount\n  } = useQuery(getAllCountrysQuery);\n  {\n    loadingCount && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }\n    }, \"Loading Countries from DB...\");\n  }\n  {\n    errorCount && __jsx(Error, {\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    });\n  }\n\n  const {\n    countries\n  } = _objectSpread({}, data);\n\n  console.log(countries);\n  const reducedCountries = countries && countries.reduce(item => item);\n  console.log(reducedCountries);\n\n  const {\n    id\n  } = _objectSpread({}, reducedCountries);\n\n  console.log(id);\n  const {\n    data: dataCountry,\n    loading: loadingCountry,\n    error: errCountry\n  } = useQuery(getAllRegionsOfACountryQuery, {\n    variables: {\n      id: id\n    }\n  });\n  {\n    loadingCountry && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, \"loading...\");\n  }\n  {\n    errCountry && __jsx(Error, {\n      error: errCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    });\n  }\n  console.log(dataCountry);\n  const getCountry = dataCountry && dataCountry.country;\n  console.log(getCountry);\n\n  const {\n    region\n  } = _objectSpread({}, getCountry);\n\n  const getRegionsOptions = region && region.map(item => ({\n    value: item.id,\n    label: item.regName\n  }));\n  console.log(state.regionID);\n  const {\n    data: dataRegion,\n    loading: loadingRegion,\n    error: errRegion\n  } = useQuery(getDivisionsOfARegionQuery, {\n    skip: !state.regionID,\n    variables: {\n      id: state.regionID\n    }\n  });\n  {\n    loadingRegion && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 24\n      }\n    }, \"loading...\");\n  }\n  {\n    errRegion && __jsx(Error, {\n      error: errRegion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }\n    });\n  }\n  console.log(dataRegion);\n  const getRegion = dataRegion && dataRegion.region;\n\n  const {\n    division\n  } = _objectSpread({}, getRegion);\n\n  console.log(division);\n  const getDivOptions = division && division.map(item => ({\n    value: item.id,\n    label: item.divName\n  }));\n  console.log(state.divisionID);\n  const {\n    data: dataDivision,\n    loading: loadingDivision,\n    error: errDivision\n  } = useQuery(getSubDivisionsOfADivisionQuery, {\n    skip: !state.divisionID,\n    variables: {\n      id: state.divisionID\n    }\n  });\n  {\n    loadingDivision && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }\n    }, \"loading...\");\n  }\n  {\n    errDivision && __jsx(Error, {\n      error: errDivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 22\n      }\n    });\n  }\n  console.log(dataDivision);\n  const getDivision = dataDivision && dataDivision.division;\n\n  const {\n    subDivision\n  } = _objectSpread({}, getDivision);\n\n  console.log(subDivision);\n  const getSubDivOptions = subDivision && subDivision.map(item => ({\n    value: item.id,\n    label: item.subDivName\n  }));\n  const {\n    data: dataSubDivision,\n    loading: loadingSubDivision,\n    error: errSubDivision\n  } = useQuery(getTownsOfASubDivisionQuery, {\n    skip: !state.subDivID,\n    variables: {\n      id: state.subDivID\n    }\n  });\n  {\n    loadingSubDivision && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, \"loading...\");\n  }\n  {\n    errSubDivision && __jsx(Error, {\n      error: errSubDivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    });\n  }\n  console.log(dataSubDivision);\n  const getSubDivision = dataSubDivision && dataSubDivision.subDivision;\n\n  const {\n    town\n  } = _objectSpread({}, getSubDivision);\n\n  console.log(town);\n  const getTownOptions = town && town.map(item => ({\n    value: item.id,\n    label: item.townName\n  }));\n  const [createCenter, {\n    loading,\n    error\n  }] = useMutation(createCenterMutation);\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: async (values, actions, setSubmitting, resetForm) => {\n      const res = await createCenter({\n        variables: _objectSpread(_objectSpread({}, values), {}, {\n          centerSecretCode: uniqueCodeGen(18),\n          town: values.town && getObjectFromID(values.town.value)\n        })\n      });\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        console.log(res);\n        actions.resetForm(true);\n        actions.setSubmitting(false);\n      }, 200);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, ({\n    values,\n    setFieldValue,\n    isSubmitting\n  }) => {\n    return __jsx(MinimStyledPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }, \"Nouveau Centre\"), __jsx(Error, {\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }), __jsx(StyledForm, {\n      disabled: isSubmitting,\n      \"aria-busy\": isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, __jsx(AllControls, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, __jsx(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 37\n      }\n    }, __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"regionID\",\n      styles: customStyle,\n      placeholder: \"La Région\",\n      options: getRegionsOptions,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"divisionID\",\n      styles: customStyle,\n      placeholder: \"Le Département\",\n      options: getDivOptions,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"subDivID\",\n      styles: customStyle,\n      placeholder: \"L'Arrondissement\",\n      options: getSubDivOptions,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: value => setFieldValue('town', value),\n      name: \"town\",\n      styles: customStyle,\n      placeholder: \"La Ville\",\n      options: getTownOptions,\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerName\",\n      type: \"text\",\n      label: \"Lib\\xE9ll\\xE9 du centre\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerCode\",\n      type: \"text\",\n      label: \"Nom Court du centre\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerNumber\",\n      type: \"number\",\n      label: \"Code Num\\xE9rique du centre\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 41\n      }\n    })), __jsx(ButtonStyled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 37\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 41\n      }\n    }, \"Valid\", isSubmitting ? 'ation en cours' : 'er'))))));\n  });\n};\n\nexport default NewCenterHooks;","map":{"version":3,"sources":["E:/SYGEFEX/Sygefex-front-Formik/src/components/center/NewCenterHooks.jsx"],"names":["React","useMutation","useQuery","MinimStyledPage","Error","Select","useForm","Formik","Form","SygexInput","StyledForm","ButtonStyled","StyledButton","customStyle","styled","Yup","createCenterMutation","getObjectFromID","uniqueCodeGen","getAllCountrysQuery","getAllRegionsOfACountryQuery","getDivisionsOfARegionQuery","getSubDivisionsOfADivisionQuery","getTownsOfASubDivisionQuery","InputGroup","div","AllControls","validationSchema","object","shape","centerName","string","required","centerCode","centerNumber","number","min","NewCenterHooks","initialValues","town","state","setState","handleReactSelectChange","regionID","divisionID","subDivID","data","loading","loadingCount","error","errorCount","countries","console","log","reducedCountries","reduce","item","id","dataCountry","loadingCountry","errCountry","variables","getCountry","country","region","getRegionsOptions","map","value","label","regName","dataRegion","loadingRegion","errRegion","skip","getRegion","division","getDivOptions","divName","dataDivision","loadingDivision","errDivision","getDivision","subDivision","getSubDivOptions","subDivName","dataSubDivision","loadingSubDivision","errSubDivision","getSubDivision","getTownOptions","townName","createCenter","values","actions","setSubmitting","resetForm","res","centerSecretCode","setTimeout","JSON","stringify","setFieldValue","isSubmitting"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport Select from 'react-select'\r\nimport useForm from '../utils/useForm'\r\nimport { Formik, Form } from 'formik';\r\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { createCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getObjectFromID, uniqueCodeGen } from \"../queries&Mutations&Functions/Functions\";\r\n\r\nimport {\r\n    getAllCountrysQuery,\r\n    getAllRegionsOfACountryQuery,\r\n    getDivisionsOfARegionQuery,\r\n    getSubDivisionsOfADivisionQuery,\r\n    getTownsOfASubDivisionQuery\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    \r\n    display: flex;\r\n    flex-direction:column;\r\n    min-width:13rem;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n/* min-width: 17rem; */\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        centerName: Yup\r\n            .string()\r\n            .required(\"Nom du Centre Obligatoire\"),\r\n        centerCode: Yup\r\n            .string()\r\n            .required(\"Code centre Obligatoire\"),\r\n        centerNumber: Yup\r\n            .number()\r\n            .min(1, \"Numéro centre du doit etre Positif\")\r\n            .required(\"Numéro centre Obligatoire\"),\r\n    });\r\n\r\nconst NewCenterHooks = () => {\r\n    const initialValues = {\r\n        centerName: \"\",\r\n        centerCode: \"\",\r\n        town: \"\"\r\n    }\r\n    const [state, setState, handleReactSelectChange] = useForm({ regionID: \"\", divisionID: \"\", subDivID: \"\" })\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    console.log(reducedCountries);\r\n    const { id } = { ...reducedCountries }\r\n    console.log(id);\r\n\r\n\r\n    const { data: dataCountry, loading: loadingCountry, error: errCountry } = useQuery(getAllRegionsOfACountryQuery, {\r\n        variables: { id: id }\r\n    })\r\n    { loadingCountry && <p>loading...</p>; }\r\n    { errCountry && <Error error={errCountry} />; }\r\n    console.log(dataCountry);\r\n    const getCountry = dataCountry && dataCountry.country;\r\n    console.log(getCountry);\r\n    const { region } = { ...getCountry }\r\n    const getRegionsOptions =\r\n        region &&\r\n        region.map(item => ({ value: item.id, label: item.regName }));\r\n    console.log(state.regionID);\r\n\r\n    const { data: dataRegion, loading: loadingRegion, error: errRegion } = useQuery(getDivisionsOfARegionQuery, {\r\n        skip: !state.regionID,\r\n        variables: { id: state.regionID }\r\n    })\r\n    { loadingRegion && <p>loading...</p>; }\r\n    { errRegion && <Error error={errRegion} />; }\r\n    console.log(dataRegion);\r\n    const getRegion = dataRegion && dataRegion.region\r\n    const { division } = { ...getRegion }\r\n    console.log(division);\r\n    const getDivOptions = division && division.map(item => ({ value: item.id, label: item.divName }))\r\n\r\n    console.log(state.divisionID);\r\n\r\n    const { data: dataDivision, loading: loadingDivision, error: errDivision } = useQuery(getSubDivisionsOfADivisionQuery, {\r\n        skip: !state.divisionID,\r\n        variables: { id: state.divisionID }\r\n    })\r\n    { loadingDivision && <p>loading...</p>; }\r\n    { errDivision && <Error error={errDivision} />; }\r\n    console.log(dataDivision);\r\n    const getDivision = dataDivision && dataDivision.division\r\n    const { subDivision } = { ...getDivision }\r\n    console.log(subDivision);\r\n    const getSubDivOptions = subDivision && subDivision.map(item => ({ value: item.id, label: item.subDivName }))\r\n\r\n    const { data: dataSubDivision, loading: loadingSubDivision, error: errSubDivision } = useQuery(getTownsOfASubDivisionQuery, {\r\n        skip: !state.subDivID,\r\n        variables: { id: state.subDivID }\r\n    })\r\n    { loadingSubDivision && <p>loading...</p>; }\r\n    { errSubDivision && <Error error={errSubDivision} />; }\r\n    console.log(dataSubDivision);\r\n    const getSubDivision = dataSubDivision && dataSubDivision.subDivision\r\n    const { town } = { ...getSubDivision }\r\n    console.log(town);\r\n    const getTownOptions = town && town.map(item => ({ value: item.id, label: item.townName }))\r\n\r\n    const [createCenter, { loading, error }] = useMutation(createCenterMutation)\r\n    return (\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createCenter({\r\n                    variables: {\r\n                        ...values,\r\n                        centerSecretCode: uniqueCodeGen(18),\r\n                        town: values.town && getObjectFromID(values.town.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 200);\r\n            }}>\r\n            {({ values, setFieldValue, isSubmitting }) => {\r\n                return (\r\n\r\n                    <MinimStyledPage>\r\n                        <h4>Nouveau Centre</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={isSubmitting} aria-busy={isSubmitting} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n                                        <Select onChange={handleReactSelectChange} name=\"regionID\" styles={customStyle} placeholder={\"La Région\"} options={getRegionsOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"divisionID\" styles={customStyle} placeholder={\"Le Département\"} options={getDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"subDivID\" styles={customStyle} placeholder={\"L'Arrondissement\"} options={getSubDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={(value) => (setFieldValue('town', value))} name=\"town\" styles={customStyle} placeholder=\"La Ville\" options={getTownOptions} disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerName\" type=\"text\" label=\"Libéllé du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerCode\" type=\"text\" label=\"Nom Court du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerNumber\" type=\"number\" label=\"Code Numérique du centre\" disabled={isSubmitting} />\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\" disabled={isSubmitting}>Valid{isSubmitting ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\nexport default NewCenterHooks;"]},"metadata":{},"sourceType":"module"}