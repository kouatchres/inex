{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\SYGEFEX\\\\Sygefex-front-Formik\\\\src\\\\components\\\\subDivision\\\\SubDivHooks.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { MinimStyledPage } from '../styles/StyledPage';\nimport Error from '../ErrorMessage.js';\nimport Select from 'react-select';\nimport useForm from '../utils/useForm';\nimport { Formik, Form } from 'formik';\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { getAllCountrysQuery, getAllDivisionsQuery, getDivisionsOfARegionQuery, getAllRegionsOfACountryQuery } from '../queries&Mutations&Functions/Queries';\nimport { removeTypename, getObjectFromID } from '../queries&Mutations&Functions/Functions';\nimport { createSubDivisionMutation } from '../queries&Mutations&Functions/Mutations';\nvar InputGroup = styled.div.withConfig({\n  displayName: \"SubDivHooks__InputGroup\",\n  componentId: \"sc-112mmkw-0\"\n})([\"display:flex;flex-direction:column;min-width:13rem;margin:0 1rem;\"]);\n_c = InputGroup;\nvar AllControls = styled.div.withConfig({\n  displayName: \"SubDivHooks__AllControls\",\n  componentId: \"sc-112mmkw-1\"\n})([\"display:flex;flex-direction:column;\"]);\n_c2 = AllControls;\nvar validationSchema = Yup.object().shape({\n  division: Yup.string().required(\"Choix Du type d'Enseignement Obligatoire\"),\n  subDivName: Yup.string().required(\"Choix de la matière Obligatoire\"),\n  subDivCode: Yup.string().required(\"Choix de la Séries Obligatoire\")\n});\n\nvar SubDivHooks = function SubDivHooks() {\n  _s();\n\n  var initialValues = {\n    subDivName: \"\",\n    subDivCode: \"\",\n    division: \"\"\n  };\n\n  var _useForm = useForm({\n    regionID: \"\"\n  }),\n      _useForm2 = _slicedToArray(_useForm, 3),\n      state = _useForm2[0],\n      setState = _useForm2[1],\n      handleReactSelectChange = _useForm2[2];\n\n  var _useQuery = useQuery(getAllCountrysQuery),\n      data = _useQuery.data,\n      loadingCount = _useQuery.loading,\n      errorCount = _useQuery.error;\n\n  {\n    loadingCount && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 23\n      }\n    }, \"Loading Countries from DB...\");\n  }\n  {\n    errorCount && __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    });\n  }\n\n  var _data = _objectSpread({}, data),\n      countries = _data.countries;\n\n  console.log(countries);\n  var reducedCountries = countries && countries.reduce(function (item) {\n    return item;\n  });\n  console.log(reducedCountries);\n\n  var _reducedCountries = _objectSpread({}, reducedCountries),\n      id = _reducedCountries.id;\n\n  console.log(id);\n\n  var _useQuery2 = useQuery(getAllRegionsOfACountryQuery, {\n    variables: {\n      id: id\n    }\n  }),\n      dataCountry = _useQuery2.data,\n      loadingCountry = _useQuery2.loadingCountry,\n      errCountry = _useQuery2.errCountry;\n\n  {\n    loadingCountry && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, \"loading...\");\n  }\n  {\n    errCountry && __jsx(Error, {\n      error: errCountry,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }\n    });\n  }\n  console.log(dataCountry);\n  var getCountry = dataCountry && dataCountry.country;\n  console.log(getCountry);\n\n  var _getCountry = _objectSpread({}, getCountry),\n      region = _getCountry.region;\n\n  var getRegionsOptions = region && region.map(function (item) {\n    return {\n      value: item.id,\n      label: item.regName\n    };\n  });\n  console.log(state.regionID);\n\n  var _useQuery3 = useQuery(getDivisionsOfARegionQuery, {\n    skip: !state.regionID,\n    variables: {\n      id: state.regionID\n    }\n  }),\n      dataRegion = _useQuery3.data,\n      loadingRegion = _useQuery3.loadingRegion,\n      errRegion = _useQuery3.errRegion;\n\n  {\n    loadingRegion && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 24\n      }\n    }, \"loading...\");\n  }\n  {\n    errRegion && __jsx(Error, {\n      error: errRegion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }\n    });\n  }\n  console.log(dataRegion);\n  var getRegion = dataRegion && dataRegion.region;\n\n  var _getRegion = _objectSpread({}, getRegion),\n      division = _getRegion.division;\n\n  console.log(division);\n  var getDivOptions = division && division.map(function (item) {\n    return {\n      value: item.id,\n      label: item.divName\n    };\n  });\n\n  var _useMutation = useMutation(createSubDivisionMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createSubDivision = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, actions, setSubmitting, resetForm) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createSubDivision({\n                  variables: _objectSpread(_objectSpread({}, values), {}, {\n                    division: values.division && getObjectFromID(values.division.value)\n                  })\n                });\n\n              case 2:\n                res = _context.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  actions.resetForm(true);\n                  actions.setSubmitting(false);\n                }, 400);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        setFieldValue = _ref2.setFieldValue,\n        isSubmitting = _ref2.isSubmitting;\n    return __jsx(MinimStyledPage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, \"Nouvel arrondissement\"), __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }), __jsx(StyledForm, {\n      disabled: isSubmitting,\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }, __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 29\n      }\n    }, __jsx(AllControls, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 33\n      }\n    }, __jsx(InputGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 37\n      }\n    }, __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"regionID\",\n      styles: customStyle,\n      placeholder: \"La Région\",\n      options: getRegionsOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: function onChange(value) {\n        return setFieldValue('division', value);\n      },\n      name: \"division\",\n      styles: customStyle,\n      placeholder: \"Le D\\xE9partement\",\n      options: getDivOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"subDivName\",\n      type: \"text\",\n      label: \"Lib\\xE9ll\\xE9 de l'arrondissement\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"subDivCode\",\n      type: \"text\",\n      label: \"Code de l'arrondissement\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 41\n      }\n    })), __jsx(ButtonStyled, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 37\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 41\n      }\n    }, \"Valid\", isSubmitting ? 'ation en cours' : 'er'))))));\n  });\n};\n\n_s(SubDivHooks, \"X8XVOgJog8w2yT9dIhsnDyQbQ8Q=\", false, function () {\n  return [useForm, useQuery, useQuery, useQuery, useMutation];\n});\n\n_c3 = SubDivHooks;\nexport default SubDivHooks;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InputGroup\");\n$RefreshReg$(_c2, \"AllControls\");\n$RefreshReg$(_c3, \"SubDivHooks\");","map":{"version":3,"sources":["E:/SYGEFEX/Sygefex-front-Formik/src/components/subDivision/SubDivHooks.jsx"],"names":["React","useMutation","useQuery","MinimStyledPage","Error","Select","useForm","Formik","Form","SygexInput","StyledForm","ButtonStyled","StyledButton","customStyle","styled","Yup","getAllCountrysQuery","getAllDivisionsQuery","getDivisionsOfARegionQuery","getAllRegionsOfACountryQuery","removeTypename","getObjectFromID","createSubDivisionMutation","InputGroup","div","AllControls","validationSchema","object","shape","division","string","required","subDivName","subDivCode","SubDivHooks","initialValues","regionID","state","setState","handleReactSelectChange","data","loadingCount","loading","errorCount","error","countries","console","log","reducedCountries","reduce","item","id","variables","dataCountry","loadingCountry","errCountry","getCountry","country","region","getRegionsOptions","map","value","label","regName","skip","dataRegion","loadingRegion","errRegion","getRegion","getDivOptions","divName","createSubDivision","values","actions","setSubmitting","resetForm","res","setTimeout","JSON","stringify","setFieldValue","isSubmitting"],"mappings":";;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EAA+CC,YAA/C,EAA6DC,WAA7D,QAAgF,qBAAhF;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,EAAoDC,0BAApD,EAAgFC,4BAAhF,QAAoH,wCAApH;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,0CAAhD;AACA,SAASC,yBAAT,QAA0C,0CAA1C;AAEA,IAAMC,UAAU,GAAGT,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,yEAAhB;KAAMD,U;AAQN,IAAME,WAAW,GAAGX,MAAM,CAACU,GAAV;AAAA;AAAA;AAAA,2CAAjB;MAAMC,W;AAMN,IAAMC,gBAAgB,GAAGX,GAAG,CACvBY,MADoB,GAEpBC,KAFoB,CAEd;AACHC,EAAAA,QAAQ,EAAEd,GAAG,CACRe,MADK,GAELC,QAFK,CAEI,0CAFJ,CADP;AAIHC,EAAAA,UAAU,EAAEjB,GAAG,CACVe,MADO,GAEPC,QAFO,CAEE,iCAFF,CAJT;AAOHE,EAAAA,UAAU,EAAElB,GAAG,CACVe,MADO,GAEPC,QAFO,CAEE,gCAFF;AAPT,CAFc,CAAzB;;AAcA,IAAMG,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AACtB,MAAMC,aAAa,GAAG;AAClBH,IAAAA,UAAU,EAAE,EADM;AAElBC,IAAAA,UAAU,EAAE,EAFM;AAGlBJ,IAAAA,QAAQ,EAAE;AAHQ,GAAtB;;AADsB,iBAM6BvB,OAAO,CAAC;AAAE8B,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CANpC;AAAA;AAAA,MAMfC,KANe;AAAA,MAMRC,QANQ;AAAA,MAMEC,uBANF;;AAAA,kBAQqCrC,QAAQ,CAACc,mBAAD,CAR7C;AAAA,MAQdwB,IARc,aAQdA,IARc;AAAA,MAQCC,YARD,aAQRC,OARQ;AAAA,MAQsBC,UARtB,aAQeC,KARf;;AAStB;AAAEH,IAAAA,YAAY,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAhB;AAAqD;AACvD;AAAEE,IAAAA,UAAU,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAAuC;;AAVnB,gCAWKJ,IAXL;AAAA,MAWdK,SAXc,SAWdA,SAXc;;AAYtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,MAAMG,gBAAgB,GAAGH,SAAS,IAAIA,SAAS,CAACI,MAAV,CAAiB,UAACC,IAAD;AAAA,WAAUA,IAAV;AAAA,GAAjB,CAAtC;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;;AAdsB,4CAeFA,gBAfE;AAAA,MAedG,EAfc,qBAedA,EAfc;;AAgBtBL,EAAAA,OAAO,CAACC,GAAR,CAAYI,EAAZ;;AAhBsB,mBAmBoCjD,QAAQ,CAACiB,4BAAD,EAA+B;AAC7FiC,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEA;AAAN;AADkF,GAA/B,CAnB5C;AAAA,MAmBRE,WAnBQ,cAmBdb,IAnBc;AAAA,MAmBKc,cAnBL,cAmBKA,cAnBL;AAAA,MAmBqBC,UAnBrB,cAmBqBA,UAnBrB;;AAsBtB;AAAED,IAAAA,cAAc,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAlB;AAAsC;AACxC;AAAEC,IAAAA,UAAU,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAA6C;AAC/CT,EAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACA,MAAMG,UAAU,GAAGH,WAAW,IAAIA,WAAW,CAACI,OAA9C;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAYS,UAAZ;;AA1BsB,sCA2BEA,UA3BF;AAAA,MA2BdE,MA3Bc,eA2BdA,MA3Bc;;AA4BtB,MAAMC,iBAAiB,GACnBD,MAAM,IACNA,MAAM,CAACE,GAAP,CAAW,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAACa;AAA9B,KAAL;AAAA,GAAf,CAFJ;AAGAjB,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACD,QAAlB;;AA/BsB,mBAiCiClC,QAAQ,CAACgB,0BAAD,EAA6B;AACxF8C,IAAAA,IAAI,EAAE,CAAC3B,KAAK,CAACD,QAD2E;AAExFgB,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEd,KAAK,CAACD;AAAZ;AAF6E,GAA7B,CAjCzC;AAAA,MAiCR6B,UAjCQ,cAiCdzB,IAjCc;AAAA,MAiCI0B,aAjCJ,cAiCIA,aAjCJ;AAAA,MAiCmBC,SAjCnB,cAiCmBA,SAjCnB;;AAqCtB;AAAED,IAAAA,aAAa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAjB;AAAqC;AACvC;AAAEC,IAAAA,SAAS,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAA2C;AAC7CrB,EAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAZ;AACA,MAAMG,SAAS,GAAGH,UAAU,IAAIA,UAAU,CAACP,MAA3C;;AAxCsB,qCAyCIU,SAzCJ;AAAA,MAyCdvC,QAzCc,cAyCdA,QAzCc;;AA0CtBiB,EAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACA,MAAMwC,aAAa,GAAGxC,QAAQ,IAAIA,QAAQ,CAAC+B,GAAT,CAAa,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAACoB;AAA9B,KAAL;AAAA,GAAjB,CAAlC;;AA3CsB,qBA6C0BrE,WAAW,CAACqB,yBAAD,CA7CrC;AAAA;AAAA,MA6CfiD,iBA7Ce;AAAA;AAAA,MA6CM7B,OA7CN,kBA6CMA,OA7CN;AAAA,MA6CeE,KA7Cf,kBA6CeA,KA7Cf;;AA8CtB,SACI,MAAC,MAAD;AACI,IAAA,MAAM,EAAC,MADX;AAEI,IAAA,aAAa,EAAET,aAFnB;AAGI,IAAA,gBAAgB,EAAET,gBAHtB;AAII,IAAA,QAAQ;AAAA,0EAAE,iBAAO8C,MAAP,EAAeC,OAAf,EAAwBC,aAAxB,EAAuCC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACYJ,iBAAiB,CAAC;AAChCnB,kBAAAA,SAAS,kCACFoB,MADE;AAEL3C,oBAAAA,QAAQ,EAAE2C,MAAM,CAAC3C,QAAP,IAAmBR,eAAe,CAACmD,MAAM,CAAC3C,QAAP,CAAgBgC,KAAjB;AAFvC;AADuB,iBAAD,CAD7B;;AAAA;AACAe,gBAAAA,GADA;AAONC,gBAAAA,UAAU,CAAC,YAAM;AACb/B,kBAAAA,OAAO,CAACC,GAAR,CAAY+B,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACA1B,kBAAAA,OAAO,CAACC,GAAR,CAAY6B,GAAZ;AACAH,kBAAAA,OAAO,CAACE,SAAR,CAAkB,IAAlB;AACAF,kBAAAA,OAAO,CAACC,aAAR,CAAsB,KAAtB;AACH,iBALS,EAKP,GALO,CAAV;;AAPM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAkBK,iBAA6C;AAAA,QAA1CF,MAA0C,SAA1CA,MAA0C;AAAA,QAAlCQ,aAAkC,SAAlCA,aAAkC;AAAA,QAAnBC,YAAmB,SAAnBA,YAAmB;AAC1C,WACI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAErC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,MAAC,UAAD;AAAY,MAAA,QAAQ,EAAEqC,YAAtB;AAAoC,mBAAWA,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE1C,uBAAlB;AAA2C,MAAA,IAAI,EAAC,UAAhD;AAA2D,MAAA,MAAM,EAAE1B,WAAnE;AAAgF,MAAA,WAAW,EAAE,WAA7F;AAA0G,MAAA,OAAO,EAAE8C,iBAAnH;AAAsI,MAAA,QAAQ,EAAEsB,YAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,kBAACpB,KAAD;AAAA,eAAYmB,aAAa,CAAC,UAAD,EAAanB,KAAb,CAAzB;AAAA,OAAlB;AAAiE,MAAA,IAAI,EAAC,UAAtE;AAAiF,MAAA,MAAM,EAAEhD,WAAzF;AAAsG,MAAA,WAAW,EAAC,mBAAlH;AAAmI,MAAA,OAAO,EAAEwD,aAA5I;AAA2J,MAAA,QAAQ,EAAEY,YAArK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAII,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,KAAK,EAAC,mCAAhD;AAA8E,MAAA,QAAQ,EAAEA,YAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,KAAK,EAAC,0BAAhD;AAA2E,MAAA,QAAQ,EAAEA,YAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ,EAUI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC,QAAnB;AAA4B,MAAA,QAAQ,EAAEA,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0DA,YAAY,GAAG,gBAAH,GAAsB,IAA5F,CADJ,CAVJ,CADJ,CADJ,CAHJ,CADJ;AAwBH,GA3CL,CADJ;AAgDH,CA9FD;;GAAM/C,W;UAMiD5B,O,EAEQJ,Q,EAWDA,Q,EAcHA,Q,EAYPD,W;;;MA7C9CiC,W;AA+FN,eAAeA,WAAf","sourcesContent":["\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport Select from 'react-select'\r\nimport useForm from '../utils/useForm'\r\nimport { Formik, Form } from 'formik';\r\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { getAllCountrysQuery, getAllDivisionsQuery, getDivisionsOfARegionQuery, getAllRegionsOfACountryQuery } from '../queries&Mutations&Functions/Queries'\r\nimport { removeTypename, getObjectFromID } from '../queries&Mutations&Functions/Functions'\r\nimport { createSubDivisionMutation } from '../queries&Mutations&Functions/Mutations'\r\n\r\nconst InputGroup = styled.div`\r\n    \r\n    display: flex;\r\n    flex-direction:column;\r\n    min-width:13rem;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n/* min-width: 17rem; */\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        division: Yup\r\n            .string()\r\n            .required(\"Choix Du type d'Enseignement Obligatoire\"),\r\n        subDivName: Yup\r\n            .string()\r\n            .required(\"Choix de la matière Obligatoire\"),\r\n        subDivCode: Yup\r\n            .string()\r\n            .required(\"Choix de la Séries Obligatoire\"),\r\n    });\r\n\r\nconst SubDivHooks = () => {\r\n    const initialValues = {\r\n        subDivName: \"\",\r\n        subDivCode: \"\",\r\n        division: \"\"\r\n    }\r\n    const [state, setState, handleReactSelectChange] = useForm({ regionID: \"\" })\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    console.log(reducedCountries);\r\n    const { id } = { ...reducedCountries }\r\n    console.log(id);\r\n\r\n\r\n    const { data: dataCountry, loadingCountry, errCountry } = useQuery(getAllRegionsOfACountryQuery, {\r\n        variables: { id: id }\r\n    })\r\n    { loadingCountry && <p>loading...</p>; }\r\n    { errCountry && <Error error={errCountry} />; }\r\n    console.log(dataCountry);\r\n    const getCountry = dataCountry && dataCountry.country;\r\n    console.log(getCountry);\r\n    const { region } = { ...getCountry }\r\n    const getRegionsOptions =\r\n        region &&\r\n        region.map(item => ({ value: item.id, label: item.regName }));\r\n    console.log(state.regionID);\r\n\r\n    const { data: dataRegion, loadingRegion, errRegion } = useQuery(getDivisionsOfARegionQuery, {\r\n        skip: !state.regionID,\r\n        variables: { id: state.regionID }\r\n    })\r\n    { loadingRegion && <p>loading...</p>; }\r\n    { errRegion && <Error error={errRegion} />; }\r\n    console.log(dataRegion);\r\n    const getRegion = dataRegion && dataRegion.region\r\n    const { division } = { ...getRegion }\r\n    console.log(division);\r\n    const getDivOptions = division && division.map(item => ({ value: item.id, label: item.divName }))\r\n\r\n    const [createSubDivision, { loading, error }] = useMutation(createSubDivisionMutation)\r\n    return (\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createSubDivision({\r\n                    variables: {\r\n                        ...values,\r\n                        division: values.division && getObjectFromID(values.division.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 400);\r\n            }}>\r\n            {({ values, setFieldValue, isSubmitting }) => {\r\n                return (\r\n                    <MinimStyledPage>\r\n                        <h4>Nouvel arrondissement</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={isSubmitting} aria-busy={isSubmitting} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n                                        <Select onChange={handleReactSelectChange} name=\"regionID\" styles={customStyle} placeholder={\"La Région\"} options={getRegionsOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={(value) => (setFieldValue('division', value))} name=\"division\" styles={customStyle} placeholder=\"Le Département\" options={getDivOptions} disabled={isSubmitting} />\r\n\r\n                                        <SygexInput name=\"subDivName\" type=\"text\" label=\"Libéllé de l'arrondissement\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"subDivCode\" type=\"text\" label=\"Code de l'arrondissement\" disabled={isSubmitting} />\r\n\r\n\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\" disabled={isSubmitting}>Valid{isSubmitting ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\nexport default SubDivHooks;"]},"metadata":{},"sourceType":"module"}