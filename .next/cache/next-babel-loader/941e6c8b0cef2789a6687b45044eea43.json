{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\SYGEFEX\\\\Sygefex-front-Formik\\\\src\\\\components\\\\center\\\\NewCenterHooks.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { MinimStyledPage } from '../styles/StyledPage';\nimport Error from '../ErrorMessage.js';\nimport Select from 'react-select';\nimport useForm from '../utils/useForm';\nimport { Formik, Form } from 'formik';\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { createCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { getObjectFromID, uniqueCodeGen } from \"../queries&Mutations&Functions/Functions\";\nimport { getAllCountrysQuery, getAllRegionsOfACountryQuery, getDivisionsOfARegionQuery, getSubDivisionsOfADivisionQuery, getTownsOfASubDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\nvar InputGroup = styled.div.withConfig({\n  displayName: \"NewCenterHooks__InputGroup\",\n  componentId: \"juvr68-0\"\n})([\"display:flex;flex-direction:column;min-width:13rem;margin:0 1rem;\"]);\n_c = InputGroup;\nvar AllControls = styled.div.withConfig({\n  displayName: \"NewCenterHooks__AllControls\",\n  componentId: \"juvr68-1\"\n})([\"display:flex;flex-direction:column;\"]);\n_c2 = AllControls;\nvar validationSchema = Yup.object().shape({\n  centerName: Yup.string().required(\"Nom du Centre Obligatoire\"),\n  centerCode: Yup.string().required(\"Code centre Obligatoire\"),\n  centerNumber: Yup.number().min(1, \"Numéro centre du doit etre Positif\").required(\"Numéro centre Obligatoire\")\n});\n\nvar NewCenterHooks = function NewCenterHooks() {\n  _s();\n\n  var initialValues = {\n    centerName: \"\",\n    centerCode: \"\",\n    town: \"\"\n  };\n\n  var _useForm = useForm({\n    regionID: \"\",\n    divisionID: \"\",\n    subDivID: \"\"\n  }),\n      _useForm2 = _slicedToArray(_useForm, 3),\n      state = _useForm2[0],\n      setState = _useForm2[1],\n      handleReactSelectChange = _useForm2[2];\n\n  var _useQuery = useQuery(getAllCountrysQuery),\n      data = _useQuery.data,\n      loadingCount = _useQuery.loading,\n      errorCount = _useQuery.error;\n\n  {\n    loadingCount && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 23\n      }\n    }, \"Loading Countries from DB...\");\n  }\n  {\n    errorCount && __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    });\n  }\n\n  var _data = _objectSpread({}, data),\n      countries = _data.countries;\n\n  console.log(countries);\n  var reducedCountries = countries && countries.reduce(function (item) {\n    return item;\n  });\n  console.log(reducedCountries);\n\n  var _reducedCountries = _objectSpread({}, reducedCountries),\n      id = _reducedCountries.id;\n\n  console.log(id);\n\n  var _useQuery2 = useQuery(getAllRegionsOfACountryQuery, {\n    variables: {\n      id: id\n    }\n  }),\n      dataCountry = _useQuery2.data,\n      loadingCountry = _useQuery2.loading,\n      errCountry = _useQuery2.error;\n\n  {\n    loadingCountry && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, \"loading...\");\n  }\n  {\n    errCountry && __jsx(Error, {\n      error: errCountry,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    });\n  }\n  console.log(dataCountry);\n  var getCountry = dataCountry && dataCountry.country;\n  console.log(getCountry);\n\n  var _getCountry = _objectSpread({}, getCountry),\n      region = _getCountry.region;\n\n  var getRegionsOptions = region && region.map(function (item) {\n    return {\n      value: item.id,\n      label: item.regName\n    };\n  });\n  console.log(state.regionID);\n\n  var _useQuery3 = useQuery(getDivisionsOfARegionQuery, {\n    skip: !state.regionID,\n    variables: {\n      id: state.regionID\n    }\n  }),\n      dataRegion = _useQuery3.data,\n      loadingRegion = _useQuery3.loading,\n      errRegion = _useQuery3.error;\n\n  {\n    loadingRegion && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 24\n      }\n    }, \"loading...\");\n  }\n  {\n    errRegion && __jsx(Error, {\n      error: errRegion,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }\n    });\n  }\n  console.log(dataRegion);\n  var getRegion = dataRegion && dataRegion.region;\n\n  var _getRegion = _objectSpread({}, getRegion),\n      division = _getRegion.division;\n\n  console.log(division);\n  var getDivOptions = division && division.map(function (item) {\n    return {\n      value: item.id,\n      label: item.divName\n    };\n  });\n  console.log(state.divisionID);\n\n  var _useQuery4 = useQuery(getSubDivisionsOfADivisionQuery, {\n    skip: !state.divisionID,\n    variables: {\n      id: state.divisionID\n    }\n  }),\n      dataDivision = _useQuery4.data,\n      loadingDivision = _useQuery4.loading,\n      errDivision = _useQuery4.error;\n\n  {\n    loadingDivision && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 26\n      }\n    }, \"loading...\");\n  }\n  {\n    errDivision && __jsx(Error, {\n      error: errDivision,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 22\n      }\n    });\n  }\n  console.log(dataDivision);\n  var getDivision = dataDivision && dataDivision.division;\n\n  var _getDivision = _objectSpread({}, getDivision),\n      subDivision = _getDivision.subDivision;\n\n  console.log(subDivision);\n  var getSubDivOptions = subDivision && subDivision.map(function (item) {\n    return {\n      value: item.id,\n      label: item.subDivName\n    };\n  });\n\n  var _useQuery5 = useQuery(getTownsOfASubDivisionQuery, {\n    skip: !state.subDivID,\n    variables: {\n      id: state.subDivID\n    }\n  }),\n      dataSubDivision = _useQuery5.data,\n      loadingSubDivision = _useQuery5.loading,\n      errSubDivision = _useQuery5.error;\n\n  {\n    loadingSubDivision && __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, \"loading...\");\n  }\n  {\n    errSubDivision && __jsx(Error, {\n      error: errSubDivision,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    });\n  }\n  console.log(dataSubDivision);\n  var getSubDivision = dataSubDivision && dataSubDivision.subDivision;\n\n  var _getSubDivision = _objectSpread({}, getSubDivision),\n      town = _getSubDivision.town;\n\n  console.log(town);\n  var getTownOptions = town && town.map(function (item) {\n    return {\n      value: item.id,\n      label: item.townName\n    };\n  });\n\n  var _useMutation = useMutation(createCenterMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createCenter = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, actions, setSubmitting, resetForm) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createCenter({\n                  variables: _objectSpread(_objectSpread({}, values), {}, {\n                    centerSecretCode: uniqueCodeGen(18),\n                    town: values.town && getObjectFromID(values.town.value)\n                  })\n                });\n\n              case 2:\n                res = _context.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  actions.resetForm(true);\n                  actions.setSubmitting(false);\n                }, 200);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, function (_ref2) {\n    var values = _ref2.values,\n        setFieldValue = _ref2.setFieldValue,\n        isSubmitting = _ref2.isSubmitting;\n    return __jsx(MinimStyledPage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 25\n      }\n    }, \"Nouveau Centre\"), __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 25\n      }\n    }), __jsx(StyledForm, {\n      disabled: isSubmitting,\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, __jsx(AllControls, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, __jsx(InputGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 37\n      }\n    }, __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"regionID\",\n      styles: customStyle,\n      placeholder: \"La Région\",\n      options: getRegionsOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"divisionID\",\n      styles: customStyle,\n      placeholder: \"Le Département\",\n      options: getDivOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: handleReactSelectChange,\n      name: \"subDivID\",\n      styles: customStyle,\n      placeholder: \"L'Arrondissement\",\n      options: getSubDivOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 41\n      }\n    }), __jsx(Select, {\n      onChange: function onChange(value) {\n        return setFieldValue('town', value);\n      },\n      name: \"town\",\n      styles: customStyle,\n      placeholder: \"La Ville\",\n      options: getTownOptions,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerName\",\n      type: \"text\",\n      label: \"Lib\\xE9ll\\xE9 du centre\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerCode\",\n      type: \"text\",\n      label: \"Nom Court du centre\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"centerNumber\",\n      type: \"number\",\n      label: \"Code Num\\xE9rique du centre\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 41\n      }\n    })), __jsx(ButtonStyled, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 37\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 41\n      }\n    }, \"Valid\", isSubmitting ? 'ation en cours' : 'er'))))));\n  });\n};\n\n_s(NewCenterHooks, \"53OGikoU7nVQwGOD5uZYiMR/CCI=\", false, function () {\n  return [useForm, useQuery, useQuery, useQuery, useQuery, useQuery, useMutation];\n});\n\n_c3 = NewCenterHooks;\nexport default NewCenterHooks;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InputGroup\");\n$RefreshReg$(_c2, \"AllControls\");\n$RefreshReg$(_c3, \"NewCenterHooks\");","map":{"version":3,"sources":["E:/SYGEFEX/Sygefex-front-Formik/src/components/center/NewCenterHooks.jsx"],"names":["React","useMutation","useQuery","MinimStyledPage","Error","Select","useForm","Formik","Form","SygexInput","StyledForm","ButtonStyled","StyledButton","customStyle","styled","Yup","createCenterMutation","getObjectFromID","uniqueCodeGen","getAllCountrysQuery","getAllRegionsOfACountryQuery","getDivisionsOfARegionQuery","getSubDivisionsOfADivisionQuery","getTownsOfASubDivisionQuery","InputGroup","div","AllControls","validationSchema","object","shape","centerName","string","required","centerCode","centerNumber","number","min","NewCenterHooks","initialValues","town","regionID","divisionID","subDivID","state","setState","handleReactSelectChange","data","loadingCount","loading","errorCount","error","countries","console","log","reducedCountries","reduce","item","id","variables","dataCountry","loadingCountry","errCountry","getCountry","country","region","getRegionsOptions","map","value","label","regName","skip","dataRegion","loadingRegion","errRegion","getRegion","division","getDivOptions","divName","dataDivision","loadingDivision","errDivision","getDivision","subDivision","getSubDivOptions","subDivName","dataSubDivision","loadingSubDivision","errSubDivision","getSubDivision","getTownOptions","townName","createCenter","values","actions","setSubmitting","resetForm","centerSecretCode","res","setTimeout","JSON","stringify","setFieldValue","isSubmitting"],"mappings":";;;;;;;;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EAA+CC,YAA/C,EAA6DC,WAA7D,QAAgF,qBAAhF;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,oBAAT,QAAqC,0CAArC;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,0CAA/C;AAEA,SACIC,mBADJ,EAEIC,4BAFJ,EAGIC,0BAHJ,EAIIC,+BAJJ,EAKIC,2BALJ,QAMO,wCANP;AASA,IAAMC,UAAU,GAAGV,MAAM,CAACW,GAAV;AAAA;AAAA;AAAA,yEAAhB;KAAMD,U;AAQN,IAAME,WAAW,GAAGZ,MAAM,CAACW,GAAV;AAAA;AAAA;AAAA,2CAAjB;MAAMC,W;AAMN,IAAMC,gBAAgB,GAAGZ,GAAG,CACvBa,MADoB,GAEpBC,KAFoB,CAEd;AACHC,EAAAA,UAAU,EAAEf,GAAG,CACVgB,MADO,GAEPC,QAFO,CAEE,2BAFF,CADT;AAIHC,EAAAA,UAAU,EAAElB,GAAG,CACVgB,MADO,GAEPC,QAFO,CAEE,yBAFF,CAJT;AAOHE,EAAAA,YAAY,EAAEnB,GAAG,CACZoB,MADS,GAETC,GAFS,CAEL,CAFK,EAEF,oCAFE,EAGTJ,QAHS,CAGA,2BAHA;AAPX,CAFc,CAAzB;;AAeA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA;;AACzB,MAAMC,aAAa,GAAG;AAClBR,IAAAA,UAAU,EAAE,EADM;AAElBG,IAAAA,UAAU,EAAE,EAFM;AAGlBM,IAAAA,IAAI,EAAE;AAHY,GAAtB;;AADyB,iBAM0BjC,OAAO,CAAC;AAAEkC,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,UAAU,EAAE,EAA5B;AAAgCC,IAAAA,QAAQ,EAAE;AAA1C,GAAD,CANjC;AAAA;AAAA,MAMlBC,KANkB;AAAA,MAMXC,QANW;AAAA,MAMDC,uBANC;;AAAA,kBAQkC3C,QAAQ,CAACiB,mBAAD,CAR1C;AAAA,MAQjB2B,IARiB,aAQjBA,IARiB;AAAA,MAQFC,YARE,aAQXC,OARW;AAAA,MAQmBC,UARnB,aAQYC,KARZ;;AASzB;AAAEH,IAAAA,YAAY,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAhB;AAAqD;AACvD;AAAEE,IAAAA,UAAU,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAAuC;;AAVhB,gCAWEJ,IAXF;AAAA,MAWjBK,SAXiB,SAWjBA,SAXiB;;AAYzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,MAAMG,gBAAgB,GAAGH,SAAS,IAAIA,SAAS,CAACI,MAAV,CAAiB,UAACC,IAAD;AAAA,WAAUA,IAAV;AAAA,GAAjB,CAAtC;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;;AAdyB,4CAeLA,gBAfK;AAAA,MAejBG,EAfiB,qBAejBA,EAfiB;;AAgBzBL,EAAAA,OAAO,CAACC,GAAR,CAAYI,EAAZ;;AAhByB,mBAmBiDvD,QAAQ,CAACkB,4BAAD,EAA+B;AAC7GsC,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEA;AAAN;AADkG,GAA/B,CAnBzD;AAAA,MAmBXE,WAnBW,cAmBjBb,IAnBiB;AAAA,MAmBWc,cAnBX,cAmBEZ,OAnBF;AAAA,MAmBkCa,UAnBlC,cAmB2BX,KAnB3B;;AAsBzB;AAAEU,IAAAA,cAAc,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAlB;AAAsC;AACxC;AAAEC,IAAAA,UAAU,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAA6C;AAC/CT,EAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACA,MAAMG,UAAU,GAAGH,WAAW,IAAIA,WAAW,CAACI,OAA9C;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAYS,UAAZ;;AA1ByB,sCA2BDA,UA3BC;AAAA,MA2BjBE,MA3BiB,eA2BjBA,MA3BiB;;AA4BzB,MAAMC,iBAAiB,GACnBD,MAAM,IACNA,MAAM,CAACE,GAAP,CAAW,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAACa;AAA9B,KAAL;AAAA,GAAf,CAFJ;AAGAjB,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACH,QAAlB;;AA/ByB,mBAiC8CtC,QAAQ,CAACmB,0BAAD,EAA6B;AACxGiD,IAAAA,IAAI,EAAE,CAAC3B,KAAK,CAACH,QAD2F;AAExGkB,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEd,KAAK,CAACH;AAAZ;AAF6F,GAA7B,CAjCtD;AAAA,MAiCX+B,UAjCW,cAiCjBzB,IAjCiB;AAAA,MAiCU0B,aAjCV,cAiCCxB,OAjCD;AAAA,MAiCgCyB,SAjChC,cAiCyBvB,KAjCzB;;AAqCzB;AAAEsB,IAAAA,aAAa,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAjB;AAAqC;AACvC;AAAEC,IAAAA,SAAS,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAA2C;AAC7CrB,EAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAZ;AACA,MAAMG,SAAS,GAAGH,UAAU,IAAIA,UAAU,CAACP,MAA3C;;AAxCyB,qCAyCCU,SAzCD;AAAA,MAyCjBC,QAzCiB,cAyCjBA,QAzCiB;;AA0CzBvB,EAAAA,OAAO,CAACC,GAAR,CAAYsB,QAAZ;AACA,MAAMC,aAAa,GAAGD,QAAQ,IAAIA,QAAQ,CAACT,GAAT,CAAa,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAACqB;AAA9B,KAAL;AAAA,GAAjB,CAAlC;AAEAzB,EAAAA,OAAO,CAACC,GAAR,CAAYV,KAAK,CAACF,UAAlB;;AA7CyB,mBA+CoDvC,QAAQ,CAACoB,+BAAD,EAAkC;AACnHgD,IAAAA,IAAI,EAAE,CAAC3B,KAAK,CAACF,UADsG;AAEnHiB,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEd,KAAK,CAACF;AAAZ;AAFwG,GAAlC,CA/C5D;AAAA,MA+CXqC,YA/CW,cA+CjBhC,IA/CiB;AAAA,MA+CYiC,eA/CZ,cA+CG/B,OA/CH;AAAA,MA+CoCgC,WA/CpC,cA+C6B9B,KA/C7B;;AAmDzB;AAAE6B,IAAAA,eAAe,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnB;AAAuC;AACzC;AAAEC,IAAAA,WAAW,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAf;AAA+C;AACjD5B,EAAAA,OAAO,CAACC,GAAR,CAAYyB,YAAZ;AACA,MAAMG,WAAW,GAAGH,YAAY,IAAIA,YAAY,CAACH,QAAjD;;AAtDyB,uCAuDIM,WAvDJ;AAAA,MAuDjBC,WAvDiB,gBAuDjBA,WAvDiB;;AAwDzB9B,EAAAA,OAAO,CAACC,GAAR,CAAY6B,WAAZ;AACA,MAAMC,gBAAgB,GAAGD,WAAW,IAAIA,WAAW,CAAChB,GAAZ,CAAgB,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAAC4B;AAA9B,KAAL;AAAA,GAApB,CAAxC;;AAzDyB,mBA2D6DlF,QAAQ,CAACqB,2BAAD,EAA8B;AACxH+C,IAAAA,IAAI,EAAE,CAAC3B,KAAK,CAACD,QAD2G;AAExHgB,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAEd,KAAK,CAACD;AAAZ;AAF6G,GAA9B,CA3DrE;AAAA,MA2DX2C,eA3DW,cA2DjBvC,IA3DiB;AAAA,MA2DewC,kBA3Df,cA2DMtC,OA3DN;AAAA,MA2D0CuC,cA3D1C,cA2DmCrC,KA3DnC;;AA+DzB;AAAEoC,IAAAA,kBAAkB,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAtB;AAA0C;AAC5C;AAAEC,IAAAA,cAAc,IAAI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEA,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlB;AAAqD;AACvDnC,EAAAA,OAAO,CAACC,GAAR,CAAYgC,eAAZ;AACA,MAAMG,cAAc,GAAGH,eAAe,IAAIA,eAAe,CAACH,WAA1D;;AAlEyB,0CAmEHM,cAnEG;AAAA,MAmEjBjD,IAnEiB,mBAmEjBA,IAnEiB;;AAoEzBa,EAAAA,OAAO,CAACC,GAAR,CAAYd,IAAZ;AACA,MAAMkD,cAAc,GAAGlD,IAAI,IAAIA,IAAI,CAAC2B,GAAL,CAAS,UAAAV,IAAI;AAAA,WAAK;AAAEW,MAAAA,KAAK,EAAEX,IAAI,CAACC,EAAd;AAAkBW,MAAAA,KAAK,EAAEZ,IAAI,CAACkC;AAA9B,KAAL;AAAA,GAAb,CAA/B;;AArEyB,qBAuEkBzF,WAAW,CAACe,oBAAD,CAvE7B;AAAA;AAAA,MAuElB2E,YAvEkB;AAAA;AAAA,MAuEF3C,OAvEE,kBAuEFA,OAvEE;AAAA,MAuEOE,KAvEP,kBAuEOA,KAvEP;;AAwEzB,SACI,MAAC,MAAD;AACI,IAAA,MAAM,EAAC,MADX;AAEI,IAAA,aAAa,EAAEZ,aAFnB;AAGI,IAAA,gBAAgB,EAAEX,gBAHtB;AAII,IAAA,QAAQ;AAAA,0EAAE,iBAAOiE,MAAP,EAAeC,OAAf,EAAwBC,aAAxB,EAAuCC,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACYJ,YAAY,CAAC;AAC3BjC,kBAAAA,SAAS,kCACFkC,MADE;AAELI,oBAAAA,gBAAgB,EAAE9E,aAAa,CAAC,EAAD,CAF1B;AAGLqB,oBAAAA,IAAI,EAAEqD,MAAM,CAACrD,IAAP,IAAetB,eAAe,CAAC2E,MAAM,CAACrD,IAAP,CAAY4B,KAAb;AAH/B;AADkB,iBAAD,CADxB;;AAAA;AACA8B,gBAAAA,GADA;AAQNC,gBAAAA,UAAU,CAAC,YAAM;AACb9C,kBAAAA,OAAO,CAACC,GAAR,CAAY8C,IAAI,CAACC,SAAL,CAAeR,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ;AACAxC,kBAAAA,OAAO,CAACC,GAAR,CAAY4C,GAAZ;AACAJ,kBAAAA,OAAO,CAACE,SAAR,CAAkB,IAAlB;AACAF,kBAAAA,OAAO,CAACC,aAAR,CAAsB,KAAtB;AACH,iBALS,EAKP,GALO,CAAV;;AARM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBK,iBAA6C;AAAA,QAA1CF,MAA0C,SAA1CA,MAA0C;AAAA,QAAlCS,aAAkC,SAAlCA,aAAkC;AAAA,QAAnBC,YAAmB,SAAnBA,YAAmB;AAC1C,WAEI,MAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,MAAC,KAAD;AAAO,MAAA,KAAK,EAAEpD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,MAAC,UAAD;AAAY,MAAA,QAAQ,EAAEoD,YAAtB;AAAoC,mBAAWA,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEzD,uBAAlB;AAA2C,MAAA,IAAI,EAAC,UAAhD;AAA2D,MAAA,MAAM,EAAEhC,WAAnE;AAAgF,MAAA,WAAW,EAAE,WAA7F;AAA0G,MAAA,OAAO,EAAEoD,iBAAnH;AAAsI,MAAA,QAAQ,EAAEqC,YAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEzD,uBAAlB;AAA2C,MAAA,IAAI,EAAC,YAAhD;AAA6D,MAAA,MAAM,EAAEhC,WAArE;AAAkF,MAAA,WAAW,EAAE,gBAA/F;AAAiH,MAAA,OAAO,EAAE+D,aAA1H;AAAyI,MAAA,QAAQ,EAAE0B,YAAnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAEzD,uBAAlB;AAA2C,MAAA,IAAI,EAAC,UAAhD;AAA2D,MAAA,MAAM,EAAEhC,WAAnE;AAAgF,MAAA,WAAW,EAAE,kBAA7F;AAAiH,MAAA,OAAO,EAAEsE,gBAA1H;AAA4I,MAAA,QAAQ,EAAEmB,YAAtJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,MAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE,kBAACnC,KAAD;AAAA,eAAYkC,aAAa,CAAC,MAAD,EAASlC,KAAT,CAAzB;AAAA,OAAlB;AAA6D,MAAA,IAAI,EAAC,MAAlE;AAAyE,MAAA,MAAM,EAAEtD,WAAjF;AAA8F,MAAA,WAAW,EAAC,UAA1G;AAAqH,MAAA,OAAO,EAAE4E,cAA9H;AAA8I,MAAA,QAAQ,EAAEa,YAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,KAAK,EAAC,yBAAhD;AAAoE,MAAA,QAAQ,EAAEA,YAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,EAMI,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,YAAjB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AAA0C,MAAA,KAAK,EAAC,qBAAhD;AAAsE,MAAA,QAAQ,EAAEA,YAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,EAOI,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,cAAjB;AAAgC,MAAA,IAAI,EAAC,QAArC;AAA8C,MAAA,KAAK,EAAC,6BAApD;AAA+E,MAAA,QAAQ,EAAEA,YAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ,EAUI,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,YAAD;AAAc,MAAA,IAAI,EAAC,QAAnB;AAA4B,MAAA,QAAQ,EAAEA,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0DA,YAAY,GAAG,gBAAH,GAAsB,IAA5F,CADJ,CAVJ,CADJ,CADJ,CAHJ,CAFJ;AAyBH,GA7CL,CADJ;AAkDH,CA1HD;;GAAMjE,c;UAMiD/B,O,EAEQJ,Q,EAWeA,Q,EAcHA,Q,EAcMA,Q,EAYSA,Q,EAY3CD,W;;;MAvEzCoC,c;AA2HN,eAAeA,cAAf","sourcesContent":["\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport Select from 'react-select'\r\nimport useForm from '../utils/useForm'\r\nimport { Formik, Form } from 'formik';\r\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { createCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getObjectFromID, uniqueCodeGen } from \"../queries&Mutations&Functions/Functions\";\r\n\r\nimport {\r\n    getAllCountrysQuery,\r\n    getAllRegionsOfACountryQuery,\r\n    getDivisionsOfARegionQuery,\r\n    getSubDivisionsOfADivisionQuery,\r\n    getTownsOfASubDivisionQuery\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    \r\n    display: flex;\r\n    flex-direction:column;\r\n    min-width:13rem;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n/* min-width: 17rem; */\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        centerName: Yup\r\n            .string()\r\n            .required(\"Nom du Centre Obligatoire\"),\r\n        centerCode: Yup\r\n            .string()\r\n            .required(\"Code centre Obligatoire\"),\r\n        centerNumber: Yup\r\n            .number()\r\n            .min(1, \"Numéro centre du doit etre Positif\")\r\n            .required(\"Numéro centre Obligatoire\"),\r\n    });\r\n\r\nconst NewCenterHooks = () => {\r\n    const initialValues = {\r\n        centerName: \"\",\r\n        centerCode: \"\",\r\n        town: \"\"\r\n    }\r\n    const [state, setState, handleReactSelectChange] = useForm({ regionID: \"\", divisionID: \"\", subDivID: \"\" })\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    console.log(reducedCountries);\r\n    const { id } = { ...reducedCountries }\r\n    console.log(id);\r\n\r\n\r\n    const { data: dataCountry, loading: loadingCountry, error: errCountry } = useQuery(getAllRegionsOfACountryQuery, {\r\n        variables: { id: id }\r\n    })\r\n    { loadingCountry && <p>loading...</p>; }\r\n    { errCountry && <Error error={errCountry} />; }\r\n    console.log(dataCountry);\r\n    const getCountry = dataCountry && dataCountry.country;\r\n    console.log(getCountry);\r\n    const { region } = { ...getCountry }\r\n    const getRegionsOptions =\r\n        region &&\r\n        region.map(item => ({ value: item.id, label: item.regName }));\r\n    console.log(state.regionID);\r\n\r\n    const { data: dataRegion, loading: loadingRegion, error: errRegion } = useQuery(getDivisionsOfARegionQuery, {\r\n        skip: !state.regionID,\r\n        variables: { id: state.regionID }\r\n    })\r\n    { loadingRegion && <p>loading...</p>; }\r\n    { errRegion && <Error error={errRegion} />; }\r\n    console.log(dataRegion);\r\n    const getRegion = dataRegion && dataRegion.region\r\n    const { division } = { ...getRegion }\r\n    console.log(division);\r\n    const getDivOptions = division && division.map(item => ({ value: item.id, label: item.divName }))\r\n\r\n    console.log(state.divisionID);\r\n\r\n    const { data: dataDivision, loading: loadingDivision, error: errDivision } = useQuery(getSubDivisionsOfADivisionQuery, {\r\n        skip: !state.divisionID,\r\n        variables: { id: state.divisionID }\r\n    })\r\n    { loadingDivision && <p>loading...</p>; }\r\n    { errDivision && <Error error={errDivision} />; }\r\n    console.log(dataDivision);\r\n    const getDivision = dataDivision && dataDivision.division\r\n    const { subDivision } = { ...getDivision }\r\n    console.log(subDivision);\r\n    const getSubDivOptions = subDivision && subDivision.map(item => ({ value: item.id, label: item.subDivName }))\r\n\r\n    const { data: dataSubDivision, loading: loadingSubDivision, error: errSubDivision } = useQuery(getTownsOfASubDivisionQuery, {\r\n        skip: !state.subDivID,\r\n        variables: { id: state.subDivID }\r\n    })\r\n    { loadingSubDivision && <p>loading...</p>; }\r\n    { errSubDivision && <Error error={errSubDivision} />; }\r\n    console.log(dataSubDivision);\r\n    const getSubDivision = dataSubDivision && dataSubDivision.subDivision\r\n    const { town } = { ...getSubDivision }\r\n    console.log(town);\r\n    const getTownOptions = town && town.map(item => ({ value: item.id, label: item.townName }))\r\n\r\n    const [createCenter, { loading, error }] = useMutation(createCenterMutation)\r\n    return (\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createCenter({\r\n                    variables: {\r\n                        ...values,\r\n                        centerSecretCode: uniqueCodeGen(18),\r\n                        town: values.town && getObjectFromID(values.town.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 200);\r\n            }}>\r\n            {({ values, setFieldValue, isSubmitting }) => {\r\n                return (\r\n\r\n                    <MinimStyledPage>\r\n                        <h4>Nouveau Centre</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={isSubmitting} aria-busy={isSubmitting} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n                                        <Select onChange={handleReactSelectChange} name=\"regionID\" styles={customStyle} placeholder={\"La Région\"} options={getRegionsOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"divisionID\" styles={customStyle} placeholder={\"Le Département\"} options={getDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"subDivID\" styles={customStyle} placeholder={\"L'Arrondissement\"} options={getSubDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={(value) => (setFieldValue('town', value))} name=\"town\" styles={customStyle} placeholder=\"La Ville\" options={getTownOptions} disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerName\" type=\"text\" label=\"Libéllé du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerCode\" type=\"text\" label=\"Nom Court du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerNumber\" type=\"number\" label=\"Code Numérique du centre\" disabled={isSubmitting} />\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\" disabled={isSubmitting}>Valid{isSubmitting ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\nexport default NewCenterHooks;"]},"metadata":{},"sourceType":"module"}