{"ast":null,"code":"var _jsxFileName = \"E:\\\\SYGEFEX\\\\Sygefex-front-Formik\\\\src\\\\components\\\\division\\\\NewDivisionHooks.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { MinimStyledPage } from '../styles/StyledPage';\nimport Error from '../ErrorMessage.js';\nimport { Formik, Form } from 'formik';\nimport Select from 'react-select';\nimport { customStyle, SygexInput, StyledForm, ButtonStyled, StyledButton } from '../utils/FormInputs';\nimport styled from 'styled-components';\nimport * as Yup from 'yup';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { getAllCountrysQuery, getAllRegionsOfACountryQuery } from '../queries&Mutations&Functions/Queries';\nimport { removeTypename, getObjectFromID } from '../queries&Mutations&Functions/Functions';\nimport { createDivisionMutation } from '../queries&Mutations&Functions/Mutations';\nconst InputGroup = styled.div.withConfig({\n  displayName: \"NewDivisionHooks__InputGroup\",\n  componentId: \"sc-2paw25-0\"\n})([\"display:flex;flex-direction:column;margin:0 1rem;\"]);\nconst AllControls = styled.div.withConfig({\n  displayName: \"NewDivisionHooks__AllControls\",\n  componentId: \"sc-2paw25-1\"\n})([\"display:flex;flex-direction:column;\"]);\nconst validationSchema = Yup.object().shape({\n  divName: Yup.string().required('Nom Département Obligatoire'),\n  divCode: Yup.string().required('Code Département Obligatoire'),\n  region: Yup.object().required('Région Obligatoire')\n});\n\nconst NewDivisionHooks = () => {\n  const {\n    data,\n    loading: loadingCount,\n    error: errorCount\n  } = useQuery(getAllCountrysQuery);\n  {\n    loadingCount && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }\n    }, \"Loading Countries from DB...\");\n  }\n  {\n    errorCount && __jsx(Error, {\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    });\n  }\n\n  const {\n    countries\n  } = _objectSpread({}, data);\n\n  console.log(countries);\n  const reducedCountries = countries && countries.reduce(item => item);\n  const refinedCountry = removeTypename(reducedCountries);\n  console.log(refinedCountry);\n\n  const {\n    id\n  } = _objectSpread({}, refinedCountry);\n\n  console.log(id);\n  const {\n    data: dataRegions,\n    loading: loadingReg,\n    error: errorReg\n  } = useQuery(getAllRegionsOfACountryQuery, {\n    variables: {\n      id\n    }\n  });\n  {\n    loadingReg && __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, \"Loading regions from DB...\");\n  }\n  {\n    errorReg && __jsx(Error, {\n      error: errorReg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 19\n      }\n    });\n  }\n  const getCountry = dataRegions && dataRegions.country;\n\n  const {\n    region\n  } = _objectSpread({}, getCountry);\n\n  console.log(dataRegions);\n  const getRegionsOptions = region && region.map(item => ({\n    value: item.id,\n    label: item.regName\n  }));\n  const [createDivision, {\n    loading,\n    error\n  }] = useMutation(createDivisionMutation);\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: {\n      divName: \"\",\n      divCode: \"\",\n      region: \"\"\n    },\n    validationSchema: validationSchema,\n    onSubmit: async (values, actions, setSubmitting, resetForm) => {\n      const res = await createDivision({\n        variables: _objectSpread(_objectSpread({}, values), {}, {\n          region: values.region && getObjectFromID(values.region.value)\n        })\n      });\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        console.log(res);\n        actions.resetForm(true);\n        actions.setSubmitting(false);\n      }, 400);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, ({\n    setFieldValue\n  }) => {\n    return __jsx(MinimStyledPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }\n    }, \"Nouveau D\\xE9partement\"), __jsx(Error, {\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 25\n      }\n    }), __jsx(StyledForm, {\n      disabled: loading,\n      \"aria-busy\": loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 25\n      }\n    }, __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, __jsx(AllControls, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }, __jsx(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 37\n      }\n    }, __jsx(Select, {\n      options: getRegionsOptions,\n      name: \"region\",\n      onChange: value => setFieldValue('region', value),\n      styles: customStyle,\n      placeholder: \"la R\\xE9gion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"divName\",\n      type: \"text\",\n      label: \"Nom D\\xE9partement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 41\n      }\n    }), __jsx(SygexInput, {\n      name: \"divCode\",\n      type: \"text\",\n      label: \"Code D\\xE9partement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 41\n      }\n    })), __jsx(ButtonStyled, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 37\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 41\n      }\n    }, \"Valid\", loading ? 'ation en cours' : 'er'))))));\n  });\n};\n\nexport default NewDivisionHooks;","map":{"version":3,"sources":["E:/SYGEFEX/Sygefex-front-Formik/src/components/division/NewDivisionHooks.jsx"],"names":["React","MinimStyledPage","Error","Formik","Form","Select","customStyle","SygexInput","StyledForm","ButtonStyled","StyledButton","styled","Yup","useQuery","useMutation","getAllCountrysQuery","getAllRegionsOfACountryQuery","removeTypename","getObjectFromID","createDivisionMutation","InputGroup","div","AllControls","validationSchema","object","shape","divName","string","required","divCode","region","NewDivisionHooks","data","loading","loadingCount","error","errorCount","countries","console","log","reducedCountries","reduce","item","refinedCountry","id","dataRegions","loadingReg","errorReg","variables","getCountry","country","getRegionsOptions","map","value","label","regName","createDivision","values","actions","setSubmitting","resetForm","res","setTimeout","JSON","stringify","setFieldValue"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport { Formik, Form } from 'formik';\r\nimport Select from 'react-select'\r\nimport { customStyle, SygexInput, StyledForm, ButtonStyled, StyledButton } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { getAllCountrysQuery, getAllRegionsOfACountryQuery } from '../queries&Mutations&Functions/Queries'\r\nimport { removeTypename, getObjectFromID } from '../queries&Mutations&Functions/Functions'\r\nimport { createDivisionMutation } from '../queries&Mutations&Functions/Mutations'\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        divName: Yup\r\n            .string()\r\n            .required('Nom Département Obligatoire'),\r\n        divCode: Yup\r\n            .string()\r\n            .required('Code Département Obligatoire'),\r\n        region: Yup\r\n            .object()\r\n            .required('Région Obligatoire')\r\n    });\r\n\r\n\r\n\r\nconst NewDivisionHooks = () => {\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    const refinedCountry = removeTypename(reducedCountries)\r\n    console.log(refinedCountry);\r\n    const { id } = { ...refinedCountry }\r\n    console.log(id);\r\n\r\n\r\n\r\n    const { data: dataRegions, loading: loadingReg, error: errorReg } = useQuery(getAllRegionsOfACountryQuery, { variables: { id } })\r\n    { loadingReg && <p>Loading regions from DB...</p> }\r\n    { errorReg && <Error error={errorReg} /> }\r\n    const getCountry = dataRegions && dataRegions.country\r\n    const { region } = { ...getCountry }\r\n    console.log(dataRegions);\r\n    const getRegionsOptions = region && region.map((item) => ({\r\n        value: item.id, label: item.regName\r\n    }))\r\n    const [createDivision, { loading, error }] = useMutation(createDivisionMutation)\r\n\r\n    return (\r\n\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={{ divName: \"\", divCode: \"\", region: \"\" }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createDivision({\r\n                    variables:\r\n                    {\r\n                        ...values,\r\n                        region: values.region && getObjectFromID(values.region.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 400);\r\n            }}>\r\n            {({ setFieldValue }) => {\r\n                return (\r\n                    <MinimStyledPage>\r\n                        <h4>Nouveau Département</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={loading} aria-busy={loading} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n\r\n                                        <Select options={getRegionsOptions} name=\"region\" onChange={value => setFieldValue('region', value)} styles={customStyle} placeholder=\"la Région\" />\r\n                                        <SygexInput name=\"divName\" type=\"text\" label=\"Nom Département\" />\r\n                                        <SygexInput name=\"divCode\" type=\"text\" label=\"Code Département\" />\r\n\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\">Valid{loading ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n\r\n    )\r\n}\r\nexport default NewDivisionHooks"]},"metadata":{},"sourceType":"module"}