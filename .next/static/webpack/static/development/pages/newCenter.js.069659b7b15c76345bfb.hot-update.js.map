{"version":3,"file":"static/webpack/static\\development\\pages\\newCenter.js.069659b7b15c76345bfb.hot-update.js","sources":["webpack:///./src/components/CreateCenter.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport Form from \"./styles/Form\";\r\nimport gql from \"graphql-tag\";\r\nimport Error from \"./ErrorMessage\";\r\nimport styled from \"styled-components\";\r\nimport { select, option } from \"@material-ui/core\";\r\nimport { storedTown, storeRegion, storedDivision, storedSubDivision, bestTowns } from \"../data\";\r\n\r\nconst StyledDivision = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 350px;\r\n`;\r\n\r\nconst GET_ALL_REGIONS_QUERY = gql`\r\n  query GET_ALL_REGIONS_QUERY {\r\n    regions(orderBy: regName_ASC) {\r\n      id\r\n      regName\r\n      regCode\r\n    }\r\n  }\r\n`;\r\nconst GET_ALL_DIVISIONS_QUERY = gql`\r\n  query GET_ALL_DIVISIONS_QUERY {\r\n    divisions(orderBy: divName_ASC) {\r\n      id\r\n      divName\r\n      divCode\r\n    }\r\n  }\r\n`;\r\nconst GET_DIVISIONS_OF_A_REGION_QUERY = gql`\r\n  query GET_DIVISIONS_OF_A_REGION_QUERY($id: ID!) {\r\n    region(id: $id) {\r\n      id\r\n      regName\r\n      division(orderBy: divName_ASC) {\r\n        id\r\n        divName\r\n        divCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SUBDIVISIONS_OF_A_DIVSION_QUERY = gql`\r\n  query GET_SUBDIVISIONS_OF_A_DIVSION_QUERY($id: ID!) {\r\n    division(id: $id) {\r\n      id\r\n      divName\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        id\r\n        subDivName\r\n        subDivCode\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GET_TOWNS_OF_A_SUBDIVISION_QUERY = gql`\r\n  query GET_TOWNS_OF_A_SUBDIVISION_QUERY($id: ID!) {\r\n    subDivision(id: $id) {\r\n      id\r\n      subDivName\r\n      town(orderBy: townName_ASC) {\r\n        id\r\n        townName\r\n        townCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_CENTER_MUTATION = gql`\r\n  mutation CREATE_CENTER_MUTATION(\r\n    $centerName: String!\r\n    $centerNumber: Int\r\n    $centerCode: String!\r\n    $town: TownWhereUniqueInput!\r\n  ) {\r\n    createCenter(centerName: $centerName, centerNumber: $centerNumber, centerCode: $centerCode, town: $town) {\r\n      id\r\n      centerName\r\n      centerCode\r\n      town {\r\n        townName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass CreateCenter extends Component {\r\n  state = {\r\n    townName: \"\",\r\n    townCode: \"\",\r\n    townID: \"12\",\r\n    divisionID: \"12\",\r\n    subDivisionID: \"12\",\r\n    regionID: \"12\",\r\n    region: storeRegion,\r\n    division: storedDivision,\r\n    subDivision: storedSubDivision,\r\n    town: storedTown\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value, type } = e.target;\r\n    const setValue = type === \"number\" ? parseInt(value) : value;\r\n    this.setState({ [name]: setValue });\r\n  };\r\n\r\n  getselectedDivision = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempDivisions = [...dataSource];\r\n      // get the selected division object\r\n      const selectedDivision = tempDivisions.find(item => item.id === this.state.divisionID);\r\n      console.log(selectedDivision);\r\n      return selectedDivision;\r\n    }\r\n  };\r\n\r\n  getselectedSubDivision = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempSubDivisions = [...dataSource];\r\n      // get the selected division object\r\n      const selectedSubDivision = tempSubDivisions.find(item => item.id === this.state.subDivisionID);\r\n\r\n      console.log(selectedSubDivision);\r\n      return selectedSubDivision;\r\n    }\r\n  };\r\n\r\n  getselectedTown = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempTown = [...dataSource];\r\n      // get the selected division object\r\n      const selectedTown = tempTown.find(item => item.id === this.state.townID);\r\n\r\n      console.log(selectedTown);\r\n      return selectedTown;\r\n    }\r\n  };\r\n\r\n  getselectedRegion = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempRegions = [...dataSource];\r\n      // get the selected region object\r\n      const selectedRegion = tempRegions.find(item => item.id === this.state.regionID);\r\n      console.log(\"getting selected region\");\r\n      console.log(selectedRegion);\r\n      return selectedRegion;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Query query={GET_ALL_REGIONS_QUERY}>\r\n        {({ data, loading, error }) => {\r\n          {\r\n            loading && <p>Loading...</p>;\r\n          }\r\n          {\r\n            error && <Error error={error} />;\r\n          }\r\n          const { regions } = data;\r\n          const anyRegion = regions[0];\r\n\r\n          //prepare data for the region select options\r\n          const regionsOptions = regions.map(item => (\r\n            <option value={item.id} key={item.id}>\r\n              {item.regName}\r\n            </option>\r\n          ));\r\n          return (\r\n            <Query query={GET_DIVISIONS_OF_A_REGION_QUERY} variables={this.getselectedRegion(regions) || anyRegion}>\r\n              {({ data, loading, error }) => {\r\n                {\r\n                  loading && <p>Loading...</p>;\r\n                }\r\n                {\r\n                  error && <Error error={error} />;\r\n                }\r\n\r\n                const { region } = data;\r\n                const { division } = region;\r\n                const anyDivision = division[0];\r\n\r\n                const divisionsOptions = division.map(item => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.divName}\r\n                  </option>\r\n                ));\r\n                return (\r\n                  <Query\r\n                    query={GET_SUBDIVISIONS_OF_A_DIVSION_QUERY}\r\n                    variables={this.getselectedDivision(division) || anyDivision}\r\n                  >\r\n                    {({ data, loading, error }) => {\r\n                      {\r\n                        loading && <p>Loading...</p>;\r\n                      }\r\n                      {\r\n                        error && <Error error={error} />;\r\n                      }\r\n                      const { division: departement } = data;\r\n                      const { subDivision: arrondissement } = departement;\r\n\r\n                      const anySubDivision = arrondissement[0];\r\n                      console.log(departement);\r\n\r\n                      const subDivisionsOptions = arrondissement.map(item => (\r\n                        <option value={item.id} key={item.id}>\r\n                          {item.subDivName}\r\n                        </option>\r\n                      ));\r\n\r\n                      return (\r\n                        <Query\r\n                          query={GET_TOWNS_OF_A_SUBDIVISION_QUERY}\r\n                          variables={this.getselectedSubDivision(arrondissement) || anySubDivision}\r\n                        >\r\n                          {({ data, loading, error }) => {\r\n                            {\r\n                              loading && <p>Loading...</p>;\r\n                            }\r\n                            {\r\n                              error && <Error>error={error}</Error>;\r\n                            }\r\n\r\n                            const village = data.subDivision;\r\n\r\n                            const allTowns = { ...village };\r\n\r\n                            const { town } = allTowns;\r\n\r\n                            return (\r\n                              <Mutation\r\n                                mutation={CREATE_CENTER_MUTATION}\r\n                                variables={{\r\n                                  ...this.state,\r\n                                  town: this.getselectedTown(\r\n                                    town ? town.map(({ __typename, townName, townCode, ...others }) => others) : storedTown\r\n                                  )\r\n                                }}\r\n                              >\r\n                                {(createCenter, { loading, error }) => (\r\n                                  <StyledDivision>\r\n                                    <Form\r\n                                      onSubmit={async e => {\r\n                                        e.preventDefault();\r\n                                        const res = await createCenter();\r\n                                        console.log(res);\r\n                                      }}\r\n                                    >\r\n                                      <h5>Nouveau Centre d'Examen</h5>\r\n                                      <Error error={error} />\r\n                                      <fieldset disabled={loading} aria-busy={loading}>\r\n                                        <select\r\n                                          type=\"select\"\r\n                                          id=\"regionID\"\r\n                                          name=\"regionID\"\r\n                                          value={this.state.regionID}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        >\r\n                                          <option>Choisissez une region</option>\r\n                                          {regionsOptions}\r\n                                        </select>\r\n\r\n                                        <select\r\n                                          type=\"select\"\r\n                                          id=\"divisionID\"\r\n                                          name=\"divisionID\"\r\n                                          value={this.state.divisionID}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        >\r\n                                          <option>Choisissez un departement</option>\r\n                                          {divisionsOptions}\r\n                                        </select>\r\n                                        <select\r\n                                          type=\"select\"\r\n                                          id=\"subDivisionID\"\r\n                                          name=\"subDivisionID\"\r\n                                          value={this.state.subDivisionID}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        >\r\n                                          <option>Choisissez un arrondissement</option>\r\n                                          {subDivisionsOptions}\r\n                                        </select>\r\n                                        <select\r\n                                          type=\"select\"\r\n                                          id=\"townID\"\r\n                                          name=\"townID\"\r\n                                          value={this.state.townID}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        >\r\n                                          <option>Choisissez une ville</option>\r\n                                          {town\r\n                                            ? town.map(item => (\r\n                                                <option value={item.id} key={item.id}>\r\n                                                  {item.townName}\r\n                                                </option>\r\n                                              ))\r\n                                            : bestTowns.map(item => (\r\n                                                <option value={item.id} key={item.id}>\r\n                                                  {item.townName}\r\n                                                </option>\r\n                                              ))}\r\n                                        </select>\r\n                                        <input\r\n                                          type=\"text\"\r\n                                          id=\"centerName\"\r\n                                          name=\"centerName\"\r\n                                          placeholder=\"Center Name\"\r\n                                          value={this.state.centerName}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        />\r\n                                        <input\r\n                                          type=\"text\"\r\n                                          id=\"centerCode\"\r\n                                          name=\"centerCode\"\r\n                                          placeholder=\"Center Code\"\r\n                                          value={this.state.centerCode}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        />\r\n                                        <input\r\n                                          type=\"text\"\r\n                                          id=\"centerNumber\"\r\n                                          name=\"centerNumber\"\r\n                                          placeholder=\"Center Number\"\r\n                                          value={this.state.centerNumber}\r\n                                          onChange={this.handleChange}\r\n                                          required\r\n                                        />\r\n                                        <div className=\"submitButton\">\r\n                                          <button type=\"submit\">Submit{loading ? \"ting\" : \"\"}</button>\r\n                                        </div>\r\n                                      </fieldset>\r\n                                    </Form>\r\n                                  </StyledDivision>\r\n                                )}\r\n                              </Mutation>\r\n                            );\r\n                          }}\r\n                        </Query>\r\n                      );\r\n                    }}\r\n                  </Query>\r\n                );\r\n              }}\r\n            </Query>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateCenter;\r\n"],"mappings":"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","sourceRoot":""}