{"version":3,"file":"static/webpack/static\\development\\pages\\creates\\newDivision.js.de180f7071e949334c42.hot-update.js","sources":["webpack:///./src/components/division/NewDivisionHooks.jsx"],"sourcesContent":["import React from 'react'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport { Formik, Form } from 'formik';\r\nimport Select from 'react-select'\r\nimport { customStyle, SygexInput, StyledForm, ButtonStyled, StyledButton } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { getAllCountrysQuery, getAllDivisionsQuery, getAllRegionsOfACountryQuery } from '../queries&Mutations&Functions/Queries'\r\nimport { removeTypename, getObjectFromID } from '../queries&Mutations&Functions/Functions'\r\nimport { createDivisionMutation } from '../queries&Mutations&Functions/Mutations'\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        divName: Yup\r\n            .string()\r\n            .required('Nom Département Obligatoire'),\r\n        divCode: Yup\r\n            .string()\r\n            .required('Code Département Obligatoire'),\r\n        region: Yup\r\n            .object()\r\n            .required('Région Obligatoire')\r\n    });\r\n\r\n\r\n\r\nconst NewDivisionHooks = () => {\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    const refinedCountry = removeTypename(reducedCountries)\r\n    console.log(refinedCountry);\r\n    const { id } = { ...refinedCountry }\r\n    console.log(id);\r\n\r\n\r\n\r\n    const { data: dataRegions, loading: loadingReg, error: errorReg } = useQuery(getAllRegionsOfACountryQuery, { variables: { id } })\r\n    { loadingReg && <p>Loading regions from DB...</p> }\r\n    { errorReg && <Error error={errorReg} /> }\r\n    const getCountry = dataRegions && dataRegions.country\r\n    const { region } = { ...getCountry }\r\n    console.log(dataRegions);\r\n    const getRegionsOptions = region && region.map((item) => ({\r\n        value: item.id, label: item.regName\r\n    }))\r\n    const [createDivision, { loading, error }] = useMutation(createDivisionMutation, {\r\n        refetchQueries: [\"getAllDivisionsQuery\"]\r\n    })\r\n\r\n    return (\r\n\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={{ divName: \"\", divCode: \"\", region: \"\" }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createDivision({\r\n                    variables:\r\n                    {\r\n                        ...values,\r\n                        region: values.region && getObjectFromID(values.region.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 400);\r\n            }}>\r\n            {({ setFieldValue }) => {\r\n                return (\r\n                    <MinimStyledPage>\r\n                        <h4>Nouveau Département</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={loading} aria-busy={loading} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n\r\n                                        <Select options={getRegionsOptions} name=\"region\" onChange={value => setFieldValue('region', value)} styles={customStyle} placeholder=\"la Région\" />\r\n                                        <SygexInput name=\"divName\" type=\"text\" label=\"Nom Département\" />\r\n                                        <SygexInput name=\"divCode\" type=\"text\" label=\"Code Département\" />\r\n\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\">Valid{loading ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n\r\n    )\r\n}\r\nexport default NewDivisionHooks"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAGA;AAGA;AAGA;AAPA;AACA;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AALA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AACA;AAUA;AACA;AAZA;AAeA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAnBA;AAAA;AACA;AAmBA;AACA;AAAA;AACA;AAAA;AADA;AAAA;AACA;AAtBA;AAyBA;AADA;AAxBA;AAAA;AAAA;AAAA;AAAA;AACA;AA2BA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAHA;AADA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAKA;AACA;AAAA;;;;A","sourceRoot":""}