{"version":3,"file":"static/webpack/static\\development\\pages\\creates\\newCenter.js.8b1fa6d05b0ffb6100b8.hot-update.js","sources":["webpack:///./src/components/center/NewCenterHooks.jsx"],"sourcesContent":["\r\nimport React from 'react';\r\nimport { useMutation, useQuery } from '@apollo/react-hooks'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport Select from 'react-select'\r\nimport useForm from '../utils/useForm'\r\nimport { Formik, Form } from 'formik';\r\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton, customStyle } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { createCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getObjectFromID, uniqueCodeGen } from \"../queries&Mutations&Functions/Functions\";\r\n\r\nimport {\r\n    getAllCountrysQuery,\r\n    getAllCentersQuery,\r\n    getAllRegionsOfACountryQuery,\r\n    getDivisionsOfARegionQuery,\r\n    getSubDivisionsOfADivisionQuery,\r\n    getTownsOfASubDivisionQuery\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    \r\n    display: flex;\r\n    flex-direction:column;\r\n    min-width:13rem;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n/* min-width: 17rem; */\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object()\r\n    .shape({\r\n        centerName: Yup\r\n            .string()\r\n            .required(\"Nom du Centre Obligatoire\"),\r\n        centerCode: Yup\r\n            .string()\r\n            .required(\"Code centre Obligatoire\"),\r\n        centerNumber: Yup\r\n            .number()\r\n            .min(1, \"Numéro centre du doit etre Positif\")\r\n            .required(\"Numéro centre Obligatoire\"),\r\n    });\r\n\r\nconst NewCenterHooks = () => {\r\n    const initialValues = {\r\n        centerName: \"\",\r\n        centerCode: \"\",\r\n        town: \"\"\r\n    }\r\n    const [state, setState, handleReactSelectChange] = useForm({ regionID: \"\", divisionID: \"\", subDivID: \"\" })\r\n\r\n    const { data, loading: loadingCount, error: errorCount } = useQuery(getAllCountrysQuery)\r\n    { loadingCount && <p>Loading Countries from DB...</p> }\r\n    { errorCount && <Error error={error} /> }\r\n    const { countries } = { ...data }\r\n    console.log(countries);\r\n    const reducedCountries = countries && countries.reduce((item) => item)\r\n    console.log(reducedCountries);\r\n    const { id } = { ...reducedCountries }\r\n    console.log(id);\r\n\r\n\r\n    const { data: dataCountry, loading: loadingCountry, error: errCountry } = useQuery(getAllRegionsOfACountryQuery, {\r\n        variables: { id: id }\r\n    })\r\n    { loadingCountry && <p>loading...</p>; }\r\n    { errCountry && <Error error={errCountry} />; }\r\n    console.log(dataCountry);\r\n    const getCountry = dataCountry && dataCountry.country;\r\n    console.log(getCountry);\r\n    const { region } = { ...getCountry }\r\n    const getRegionsOptions =\r\n        region &&\r\n        region.map(item => ({ value: item.id, label: item.regName }));\r\n    console.log(state.regionID);\r\n\r\n    const { data: dataRegion, loading: loadingRegion, error: errRegion } = useQuery(getDivisionsOfARegionQuery, {\r\n        skip: !state.regionID,\r\n        variables: { id: state.regionID }\r\n    })\r\n    { loadingRegion && <p>loading...</p>; }\r\n    { errRegion && <Error error={errRegion} />; }\r\n    console.log(dataRegion);\r\n    const getRegion = dataRegion && dataRegion.region\r\n    const { division } = { ...getRegion }\r\n    console.log(division);\r\n    const getDivOptions = division && division.map(item => ({ value: item.id, label: item.divName }))\r\n\r\n    console.log(state.divisionID);\r\n\r\n    const { data: dataDivision, loading: loadingDivision, error: errDivision } = useQuery(getSubDivisionsOfADivisionQuery, {\r\n        skip: !state.divisionID,\r\n        variables: { id: state.divisionID }\r\n    })\r\n    { loadingDivision && <p>loading...</p>; }\r\n    { errDivision && <Error error={errDivision} />; }\r\n    console.log(dataDivision);\r\n    const getDivision = dataDivision && dataDivision.division\r\n    const { subDivision } = { ...getDivision }\r\n    console.log(subDivision);\r\n    const getSubDivOptions = subDivision && subDivision.map(item => ({ value: item.id, label: item.subDivName }))\r\n\r\n    const { data: dataSubDivision, loading: loadingSubDivision, error: errSubDivision } = useQuery(getTownsOfASubDivisionQuery, {\r\n        skip: !state.subDivID,\r\n        variables: { id: state.subDivID }\r\n    })\r\n    { loadingSubDivision && <p>loading...</p>; }\r\n    { errSubDivision && <Error error={errSubDivision} />; }\r\n    console.log(dataSubDivision);\r\n    const getSubDivision = dataSubDivision && dataSubDivision.subDivision\r\n    const { town } = { ...getSubDivision }\r\n    console.log(town);\r\n    const getTownOptions = town && town.map(item => ({ value: item.id, label: item.townName }))\r\n\r\n    const [createCenter, { loading, error }] = useMutation(createCenterMutation, {\r\n        refetchQueries: [\"getAllCentersQuery\"]\r\n    })\r\n    return (\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await createCenter({\r\n                    variables: {\r\n                        ...values,\r\n                        centerSecretCode: uniqueCodeGen(18),\r\n                        town: values.town && getObjectFromID(values.town.value)\r\n                    }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 200);\r\n            }}>\r\n            {({ values, setFieldValue, isSubmitting }) => {\r\n                return (\r\n\r\n                    <MinimStyledPage>\r\n                        <h4>Nouveau Centre</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={isSubmitting} aria-busy={isSubmitting} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n                                        <Select onChange={handleReactSelectChange} name=\"regionID\" styles={customStyle} placeholder={\"La Région\"} options={getRegionsOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"divisionID\" styles={customStyle} placeholder={\"Le Département\"} options={getDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={handleReactSelectChange} name=\"subDivID\" styles={customStyle} placeholder={\"L'Arrondissement\"} options={getSubDivOptions} disabled={isSubmitting} />\r\n                                        <Select onChange={(value) => (setFieldValue('town', value))} name=\"town\" styles={customStyle} placeholder=\"La Ville\" options={getTownOptions} disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerName\" type=\"text\" label=\"Libéllé du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerCode\" type=\"text\" label=\"Nom Court du centre\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"centerNumber\" type=\"number\" label=\"Code Numérique du centre\" disabled={isSubmitting} />\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\" disabled={isSubmitting}>Valid{isSubmitting ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n\r\n    );\r\n}\r\nexport default NewCenterHooks;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAMA;AAGA;AAGA;AAGA;AAPA;AACA;AAYA;AACA;AACA;AACA;AACA;AAHA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAXA;AAAA;AACA;AAWA;AACA;AAAA;AAAA;AACA;AACA;AAfA;AAAA;AACA;AAeA;AACA;AAjBA;AAoBA;AAAA;AAAA;AADA;AAnBA;AAAA;AAAA;AACA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA3BA;AAAA;AACA;AA2BA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhCA;AAkCA;AACA;AAAA;AAAA;AAFA;AAjCA;AAAA;AAAA;AACA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAzCA;AAAA;AACA;AAyCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AA9CA;AAgDA;AACA;AAAA;AAAA;AAFA;AA/CA;AAAA;AAAA;AACA;AAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAvDA;AAAA;AACA;AAuDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1DA;AA4DA;AACA;AAAA;AAAA;AAFA;AA3DA;AAAA;AAAA;AACA;AA8DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAnEA;AAAA;AACA;AAmEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtEA;AAwEA;AADA;AAvEA;AAAA;AAAA;AAAA;AAAA;AACA;AAyEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAHA;AADA;AACA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmsourceRoot":""}