{"version":3,"file":"static/webpack/static\\development\\pages\\newTown.js.97d25fe0b37b273b6623.hot-update.js","sources":["webpack:///./src/components/CreateTown.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport Form from \"./styles/Form\";\r\nimport gql from \"graphql-tag\";\r\nimport Error from \"./ErrorMessage\";\r\nimport styled from \"styled-components\";\r\nimport { storeRegion, storedDivision, storedSubDivision } from \"../data\";\r\n\r\nconst StyledDivision = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 350px;\r\n`;\r\n\r\nconst GET_ALL_REGIONS_QUERY = gql`\r\n  query GET_ALL_REGIONS_QUERY {\r\n    regions(orderBy: regName_DESC) {\r\n      id\r\n      regName\r\n      regCode\r\n    }\r\n  }\r\n`;\r\nconst GET_ALL_DIVISIONS_QUERY = gql`\r\n  query GET_ALL_DIVISIONS_QUERY {\r\n    divisions(orderBy: divName_ASC) {\r\n      id\r\n      divName\r\n      divCode\r\n    }\r\n  }\r\n`;\r\nconst GET_DIVISIONS_OF_A_REGION_QUERY = gql`\r\n  query GET_DIVISIONS_OF_A_REGION_QUERY($id: ID!) {\r\n    region(id: $id) {\r\n      id\r\n      regName\r\n      division(orderBy: divName_ASC) {\r\n        id\r\n        divName\r\n        divCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SUBDIVISIONS_OF_A_DIVSION_QUERY = gql`\r\n  query GET_SUBDIVISIONS_OF_A_DIVSION_QUERY($id: ID!) {\r\n    division(id: $id) {\r\n      id\r\n      divName\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        id\r\n        subDivName\r\n        subDivCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_TOWN_MUTATION = gql`\r\n  mutation CREATE_TOWN_MUTATION($townName: String!, $townCode: String!, $subDiv: SubDivisionWhereUniqueInput!) {\r\n    createTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n      id\r\n      townName\r\n      townCode\r\n      subDiv {\r\n        subDivName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass CreateTown extends Component {\r\n  state = {\r\n    townName: \"\",\r\n    townCode: \"\",\r\n    divisionID: \"12\",\r\n    subDivisionID: \"12\",\r\n    regionID: \"12\",\r\n    region: storeRegion,\r\n    division: storedDivision,\r\n    subDiv: storedSubDivision\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value, type } = e.target;\r\n    const val = type === \"number\" ? parseInt(value) : value;\r\n    this.setState({ [name]: val });\r\n  };\r\n\r\n  getselectedDivision = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempDivisions = [...dataSource];\r\n      // get the selected division object\r\n      const selectedDivision = tempDivisions.find(item => item.id === this.state.divisionID);\r\n      console.log(selectedDivision);\r\n      return selectedDivision;\r\n    }\r\n  };\r\n\r\n  getselectedSubDivision = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempSubDivisions = [...dataSource];\r\n      // get the selected division object\r\n      const selectedSubDivision = tempSubDivisions.find(item => item.id === this.state.subDivisionID);\r\n\r\n      console.log(selectedSubDivision);\r\n      return selectedSubDivision;\r\n    }\r\n  };\r\n\r\n  getselectedRegion = dataSource => {\r\n    // 1 copy the data source\r\n    if (dataSource.length > 0) {\r\n      const tempRegions = [...dataSource];\r\n      // get the selected region object\r\n      const selectedRegion = tempRegions.find(item => item.id === this.state.regionID);\r\n      console.log(\"getting selected region\");\r\n      console.log(selectedRegion);\r\n      return selectedRegion;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Query query={GET_ALL_REGIONS_QUERY}>\r\n        {({ data, loading, error }) => {\r\n          {\r\n            loading && <p>Loading...</p>;\r\n          }\r\n          {\r\n            error && <Error error={error} />;\r\n          }\r\n          const { regions } = data;\r\n          const anyRegion = regions[0];\r\n          console.log(\"this is any chosen region\");\r\n          console.log(anyRegion);\r\n\r\n          //prepare data for the region select options\r\n          const regionsOptions = regions.map(item => (\r\n            <option value={item.id} key={item.id}>\r\n              {item.regName}\r\n            </option>\r\n          ));\r\n          return (\r\n            <Query query={GET_DIVISIONS_OF_A_REGION_QUERY} variables={this.getselectedRegion(regions) || anyRegion}>\r\n              {({ data, loading, error }) => {\r\n                {\r\n                  loading && <p>Loading...</p>;\r\n                }\r\n                {\r\n                  error && <Error error={error} />;\r\n                }\r\n\r\n                console.log(\"these are the divisions of the selected region\");\r\n                console.log(data.region.division);\r\n                const { region } = data;\r\n                const { division } = region;\r\n                const anyDivision = division[0];\r\n                console.log(anyDivision);\r\n                const divisionsOptions = division.map(item => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.divName}\r\n                  </option>\r\n                ));\r\n                //*******important function'stripping off __typename')\r\n                const divisionsOfARegion = division.map(({ __typename, ...others }) => others);\r\n                return (\r\n                  <Query\r\n                    query={GET_SUBDIVISIONS_OF_A_DIVSION_QUERY}\r\n                    variables={this.getselectedDivision(division) || anyDivision}\r\n                  >\r\n                    {({ data, loading, error }) => {\r\n                      {\r\n                        loading && <p>Loading...</p>;\r\n                      }\r\n                      {\r\n                        error && <Error error={error} />;\r\n                      }\r\n                      console.log(\"getting sub divisions\");\r\n                      console.log(data.division.subDivision);\r\n\r\n                      const subDivisionsOptions = data.division.subDivision.map(item => (\r\n                        <option value={item.id} key={item.id}>\r\n                          {item.subDivName}\r\n                        </option>\r\n                      ));\r\n                      //*******important function'stripping off __typename')\r\n                      const subDivisionsOfADivision = data.division.subDivision.map(\r\n                        ({ __typename, subDivName, subDivCode, ...others }) => others\r\n                      );\r\n                      console.log(\"sub division for the town\");\r\n                      console.log(subDivisionsOfADivision);\r\n                      console.log(\"This are the state values\");\r\n                      console.log(this.state);\r\n                      return (\r\n                        <Mutation\r\n                          mutation={CREATE_TOWN_MUTATION}\r\n                          variables={{\r\n                            ...this.state,\r\n                            subDiv: this.getselectedSubDivision(subDivisionsOfADivision)\r\n                          }}\r\n                        >\r\n                          {(createTown, { loading, error }) => (\r\n                            <StyledDivision>\r\n                              <Form\r\n                                onSubmit={async e => {\r\n                                  e.preventDefault();\r\n                                  const res = await createTown();\r\n                                  console.log(res);\r\n                                }}\r\n                              >\r\n                                <h5>Nouvelle Ville</h5>\r\n                                <Error error={error} />\r\n                                <fieldset disabled={loading} aria-busy={loading}>\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"regionID\"\r\n                                    name=\"regionID\"\r\n                                    value={this.state.regionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option>choisssez une region</option>\r\n                                    {regionsOptions}\r\n                                  </select>\r\n\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"divisionID\"\r\n                                    name=\"divisionID\"\r\n                                    value={this.state.divisionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option> choisissez un departement</option>\r\n                                    {divisionsOptions}\r\n                                  </select>\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"subDivisionID\"\r\n                                    name=\"subDivisionID\"\r\n                                    value={this.state.subDivisionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option> choisissez un arrondissement</option>\r\n                                    {subDivisionsOptions}\r\n                                  </select>\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    id=\"townName\"\r\n                                    name=\"townName\"\r\n                                    placeholder=\"Town Name\"\r\n                                    value={this.state.subDivName}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  />\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    id=\"townCode\"\r\n                                    name=\"townCode\"\r\n                                    placeholder=\"Town Code\"\r\n                                    value={this.state.subDivCode}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  />\r\n                                  <div className=\"submitButton\">\r\n                                    <button type=\"submit\">Submit{loading ? \"ting\" : \"\"}</button>\r\n                                  </div>\r\n                                </fieldset>\r\n                              </Form>\r\n                            </StyledDivision>\r\n                          )}\r\n                        </Mutation>\r\n                      );\r\n                    }}\r\n                  </Query>\r\n                );\r\n              }}\r\n            </Query>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateTown;\r\nexport { GET_ALL_SUBDIVISIONS_QUERY };\r\n"],"mappings":"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","sourceRoot":""}