{"version":3,"file":"static\\development\\pages\\creates\\newMarks.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/newMarks.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Functions.jsx","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/score/MuiMarks.jsx","webpack:///./src/components/styles/Form.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@material-ui/core\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React from \"react\";\r\nimport MuiMarks from \"../../src/components/score/MuiMarks\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledCandidate = styled.div`\r\n  margin: 0 auto;\r\n  min-width: 220px;\r\n  width: 50vw;\r\n  h5 {\r\n    margin: 10px auto;\r\n    text-align: center;\r\n    font-size: 2.1rem;\r\n    font-weight: normal;\r\n  }\r\n`;\r\n\r\nconst newMarks = () => {\r\n  return (\r\n    <StyledCandidate>\r\n      <MuiMarks />\r\n    </StyledCandidate>\r\n  );\r\n};\r\nexport default newMarks;\r\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Error Msg!</strong>\n          {error.message.replace(\"GraphQL error: \", \"\")}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace(\"GraphQL error: \", \"\")}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {}\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object\n};\n\nexport default DisplayError;\n","import React from 'react';\r\n\r\nconst uniqueCodeGen = (keyLength) => {\r\n\tvar i,\r\n\t\tkey = '',\r\n\t\t//  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\t\tcharacters = 'abcdefghijklmnopqrstuvwxyzABCDEF@#$%&GHIJKLMNOPQRSTUVWXYZ0123456789';\r\n\r\n\tvar charactersLength = characters.length;\r\n\r\n\tfor (i = 0; i < keyLength; i++) {\r\n\t\tkey += characters.substr(Math.floor(Math.random() * charactersLength + 1), 1);\r\n\t}\r\n\r\n\treturn key;\r\n};\r\n\r\nconst objectFromCode = (codeValue) => {\r\n\tconst storedObject = {\r\n\t\tcandCode: `${codeValue}`\r\n\t};\r\n\treturn storedObject;\r\n};\r\n\r\nconst getSelectedObject = (dataSource, objectID) => {\r\n\t// 1 copy the data source\r\n\tif (dataSource.length > 0) {\r\n\t\tconst tempObjects = [ ...dataSource ];\r\n\t\t// get the object\r\n\t\tconst selectedObject = tempObjects.find((item) => item.id === objectID);\r\n\t\treturn selectedObject;\r\n\t}\r\n};\r\nconst calcCandAve = (candScores) => {\r\n\tconst aveTotal = candScores.reduce((tally, item) => tally + item.subjectAve * item.coeff, 0);\r\n\tconst coeffTotal = candScores.reduce((tally, item) => (item.subjectAve === null ? tally : tally + item.coeff), 0);\r\n\tconst candAve = aveTotal / coeffTotal;\r\n\tconsole.log(`aveTotal is = ${aveTotal}`);\r\n\tconsole.log(`coeffTotal is = ${coeffTotal}`);\r\n\tconsole.log(`ave is = ${candAve}`);\r\n\treturn candAve;\r\n};\r\n\r\nexport { calcCandAve, objectFromCode, updateItemMutation, uniqueCodeGen, getSelectedObject };\r\n","import gql from 'graphql-tag';\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n\tmutation signInCandidate($candCode: String!) {\r\n\t\tcandidateSignIn(candCode: $candCode) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t}\r\n\t}\r\n`;\r\n//\r\n\r\nconst updateRegionMutation = gql`\r\n\tmutation updateRegionMutation($id: ID!, $regName: String, $regCode: String) {\r\n\t\tupdateRegion(id: $id, regName: $regName, regCode: $regCode) {\r\n\t\t\tid\r\n\t\t\tregName\r\n\t\t\tregCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewReportMutation = gql`\r\n\tmutation createNewReportMutation(\r\n\t\t$reportImage: String!\r\n\t\t$reportName: String!\r\n\t\t$centerAdmin: CenterAdminWhereUniqueInput!\r\n\t) {\r\n\t\tcreateReport(reportImage: $reportImage, reportName: $reportName, centerAdmin: $centerAdmin) {\r\n\t\t\tid\r\n\t\t\treportName\r\n\t\t\treportImage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createRegistrationMutation = gql`\r\n\tmutation createRegistrationMutation(\r\n\t\t$exam: ExamWhereUniqueInput!\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$candidate: CandidateWhereUniqueInput!\r\n\t\t$session: SessionWhereUniqueInput!\r\n\t\t$center: CenterWhereUniqueInput!\r\n\t\t$candExamSecretCode: String!\r\n\t) {\r\n\t\tcreateRegistration(\r\n\t\t\tcandExamSecretCode: $candExamSecretCode\r\n\t\t\texam: $exam\r\n\t\t\tseries: $series\r\n\t\t\tsession: $session\r\n\t\t\tcandidate: $candidate\r\n\t\t\tcenter: $center\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tseriesName\r\n\t\t\t}\r\n\t\t\tcandidate {\r\n\t\t\t\tid\r\n\t\t\t\tcand1stName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterAdminMutation = gql`\r\n\tmutation createCenterAdminMutation(\r\n\t\t$exam: ExamWhereUniqueInput!\r\n\t\t$rank: RankWhereUniqueInput!\r\n\t\t$session: SessionWhereUniqueInput!\r\n\t\t$center: CenterWhereUniqueInput!\r\n\t\t$authName: String!\r\n\t\t$authCode: String!\r\n\t\t$authCNI: String!\r\n\t\t$authPhone: Int!\r\n\t\t$authMatricule: String!\r\n\t) {\r\n\t\tcreateCenterAdmin(\r\n\t\t\texam: $exam\r\n\t\t\trank: $rank\r\n\t\t\tsession: $session\r\n\t\t\tcenter: $center\r\n\t\t\tauthCNI: $authCNI\r\n\t\t\tauthName: $authName\r\n\t\t\tauthCode: $authCode\r\n\t\t\tauthPhone: $authPhone\r\n\t\t\tauthMatricule: $authMatricule\r\n\t\t) {\r\n\t\t\tauthName\r\n\t\t\tauthCode\r\n\t\t\tauthPhone\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createDivisionMutation = gql`\r\n\tmutation createDivisionMutation($divName: String!, $divCode: String!, $region: RegionCreateWithoutDivisionInput!) {\r\n\t\tcreateDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n\t\t\tid\r\n\t\t\tdivName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterMutation = gql`\r\n\tmutation createCenterMutation(\r\n\t\t$centerName: String!\r\n\t\t$centerNumber: Int\r\n\t\t$centerCode: String!\r\n\t\t$town: TownWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCenter(centerName: $centerName, centerNumber: $centerNumber, centerCode: $centerCode, town: $town) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t\ttown {\r\n\t\t\t\ttownName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSeriesMutation = gql`\r\n\tmutation createSeriesMutation(\r\n\t\t$seriesName: String!\r\n\t\t$seriesCode: String!\r\n\t\t$educationType: EducationTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSeries(seriesName: $seriesName, seriesCode: $seriesCode, educationType: $educationType) {\r\n\t\t\tid\r\n\t\t\tseriesName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createEducationTypeMutation = gql`\r\n\tmutation createEducationTypeMutation($educationTypeName: String!, $educationTypeCode: String!) {\r\n\t\tcreateEducationType(educationTypeName: $educationTypeName, educationTypeCode: $educationTypeCode) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createTownMutation = gql`\r\n\tmutation createTownMutation($townName: String!, $townCode: String!, $subDiv: SubDivisionWhereUniqueInput!) {\r\n\t\tcreateTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n\t\t\tid\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tsubDiv {\r\n\t\t\t\tsubDivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectTypeMutation = gql`\r\n\tmutation createNewSubjectTypeMutation($subjectTypeName: String!, $subjectTypeCode: String!) {\r\n\t\tcreateSubjectType(subjectTypeName: $subjectTypeName, subjectTypeCode: $subjectTypeCode) {\r\n\t\t\tid\r\n\t\t\tsubjectTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectMutation = gql`\r\n\tmutation createNewSubjectMutation(\r\n\t\t$subjectName: String!\r\n\t\t$subjectCode: String!\r\n\t\t$subjectType: SubjectTypeWhereUniqueInput!\r\n\t\t$educType: EducationTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubject(\r\n\t\t\tsubjectName: $subjectName\r\n\t\t\teducType: $educType\r\n\t\t\tsubjectCode: $subjectCode\r\n\t\t\tsubjectType: $subjectType\r\n\t\t) {\r\n\t\t\tsubjectCode\r\n\t\t\tsubjectName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSubDivisionMutation = gql`\r\n\tmutation createSubDivisionMutation(\r\n\t\t$subDivName: String!\r\n\t\t$subDivCode: String!\r\n\t\t$division: DivisionWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubDivision(subDivName: $subDivName, subDivCode: $subDivCode, division: $division) {\r\n\t\t\tid\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tdivision {\r\n\t\t\t\tdivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSessionMutation = gql`\r\n\tmutation createNewSessionMutation($sessionName: String!, $sessionCode: String!) {\r\n\t\tcreateSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n\t\t\tid\r\n\t\t\tsessionName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewRankMutation = gql`\r\n\tmutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n\t\tcreateRank(rankName: $rankName, rankCode: $rankCode) {\r\n\t\t\tid\r\n\t\t\trankName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createNewRegionMutation = gql`\r\n\tmutation createNewRegionMutation($regName: String!, $regCode: String!) {\r\n\t\tcreateRegion(regName: $regName, regCode: $regCode) {\r\n\t\t\tid\r\n\t\t\tregName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createExamMutation = gql`\r\n\tmutation createExamMutation($examName: String!, $examCode: String!) {\r\n\t\tcreateExam(examName: $examName, examCode: $examCode) {\r\n\t\t\tid\r\n\t\t\texamName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst registerSubjectSeriesMutation = gql`\r\n\tmutation registerSubjectSeriesMutation(\r\n\t\t$subject: SubjectWhereUniqueInput!\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$coeff: Int!\r\n\t) {\r\n\t\tcreateSubjectSeries(subject: $subject, series: $series, coeff: $coeff) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tsubjectSeries {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubject {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tsubjectName\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst registerNewSubjectSeriesMutation = gql`\r\n\tmutation registerNewSubjectSeriesMutation(\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$coeff: Int!\r\n\t\t$subjectName: String!\r\n\t\t$subjectCode: String!\r\n\t) {\r\n\t\tcreateSubjectSeries(subjectCode: $subjectCode, subjectName: $subjectName, series: $series, coeff: $coeff) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tsubjectSeries {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubjectName\r\n\t\t\t\t\tsubjectCode\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCandidateMutation = gql`\r\n\tmutation createCandidateMutation(\r\n\t\t$cand1stName: String!\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$candCode: String\r\n\t\t$email: String!\r\n\t\t$image: String!\r\n\t\t$phoneNumb: Int\r\n\t\t$placeOfBirth: String\r\n\t\t$gender: GenderCreateWithoutCandidateInput!\r\n\t) {\r\n\t\tcreateCandidate(\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tcandCode: $candCode\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t\tgender: $gender\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcandCode\r\n\t\t\timage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n\tmutation updateSubDivisionMutation($id: ID!, $subDivName: String, $subDivCode: String) {\r\n\t\tupdateSubDivision(id: $id, subDivName: $subDivName, subDivCode: $subDivCode) {\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateCenterMutation = gql`\r\n\tmutation updateCenterMutation($id: ID!, $centerName: String, $centerCode: String) {\r\n\t\tupdateCenter(id: $id, centerName: $centerName, centerCode: $centerCode) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateTownMutation = gql`\r\n\tmutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n\t\tupdateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateExamMutation = gql`\r\n\tmutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n\t\tupdateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n\t\t\texamName\r\n\t\t\texamCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateScoreMutation = gql`\r\n\tmutation updateScoreMutation(\r\n\t\t$subjectSeries: SubjectSeriesWhereUniqueInput!\r\n\t\t$subjectAve: Float!\r\n\t\t$candExamSecretCode: String!\r\n\t) {\r\n\t\tupdateScore(subjectSeries: $subjectSeries, subjectAve: $subjectAve, candExamSecretCode: $candExamSecretCode) {\r\n\t\t\tsubjectAve\r\n\t\t\tcoeff\r\n\t\t\tid\r\n\t\t\tsubjectSeries {\r\n\t\t\t\tid\r\n\t\t\t\tsubjectCode\r\n\t\t\t\tsubjectName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateCandidateMutation = gql`\r\n\tmutation updateCandidateMutation(\r\n\t\t$id: ID!\r\n\t\t$cand1stName: String\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$candCode: String\r\n\t\t$email: String\r\n\t\t$image: String\r\n\t\t$phoneNumb: Int\r\n\t\t$placeOfBirth: String\r\n\t) {\r\n\t\tupdateCandidate(\r\n\t\t\tid: $id\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tcandCode: $candCode\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\timage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateGenderMutation = gql`\r\n\tmutation updateGenderMutation($id: ID!, $genderName: String, $genderCode: String) {\r\n\t\tupdateGender(id: $id, genderName: $genderName, genderCode: $genderCode) {\r\n\t\t\tid\r\n\t\t\tgenderName\r\n\t\t\tgenderCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateItemMutation = async (e, updateMutation) => {\r\n\te.preventDefault();\r\n\tconsole.log('Updating Region!!');\r\n\tconst res = await updateMutation({\r\n\t\tvariables: {\r\n\t\t\tid: this.props.id,\r\n\t\t\t...this.state\r\n\t\t}\r\n\t});\r\n\tconsole.log('Region Updated!!');\r\n};\r\n\r\n////**************Update mutations */\r\n\r\nexport {\r\n\tcreateCandidateMutation,\r\n\tcreateNewSubjectMutation,\r\n\tcreateNewSubjectTypeMutation,\r\n\tcreateTownMutation,\r\n\tcreateCenterAdminMutation,\r\n\tcreateDivisionMutation,\r\n\tcreateRegistrationMutation,\r\n\tcreateCenterMutation,\r\n\tcreateEducationTypeMutation,\r\n\tcreateSeriesMutation,\r\n\tcreateSubDivisionMutation,\r\n\tcreateNewSessionMutation,\r\n\tcreateNewRankMutation,\r\n\tcreateNewReportMutation,\r\n\tcreateNewRegionMutation,\r\n\tcreateExamMutation,\r\n\tregisterSubjectSeriesMutation,\r\n\tregisterNewSubjectSeriesMutation,\r\n\tupdateCenterMutation,\r\n\tupdateTownMutation,\r\n\tupdateRegionMutation,\r\n\tupdateExamMutation,\r\n\tupdateSubDivisionMutation,\r\n\tupdateGenderMutation,\r\n\tupdateCandidateMutation,\r\n\tupdateScoreMutation,\r\n\tupdateItemMutation,\r\n\tsignInCandidate\r\n};\r\n","import gql from 'graphql-tag';\r\n\r\nconst schoolDataQuery = gql`\r\n\tquery schoolDataQuery {\r\n\t\tcandidates {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tregistration {\r\n\t\t\t\tid\r\n\t\t\t\tcandExamSecretCode\r\n\t\t\t\tscores {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubjectAve\r\n\t\t\t\t\tsubjectSeries {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tsubjectName\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getACenterAdminQuery = gql`\r\n\tquery getACenterAdminQuery($authCode: String!) {\r\n\t\tcenterAdminSignIn(authCode: $authCode) {\r\n\t\t\tid\r\n\t\t\tauthCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllRegionsQuery = gql`\r\n\tquery getAllRegionsQuery {\r\n\t\tregions(orderBy: regName_ASC) {\r\n\t\t\tregName\r\n\t\t\tregCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\nconst getAllRanksQuery = gql`\r\n\tquery getAllRanksQuery {\r\n\t\tranks(orderBy: rankName_ASC) {\r\n\t\t\trankName\r\n\t\t\trankCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n\tquery getAllSubjectsQuery {\r\n\t\tsubjects(orderBy: subjectName_ASC) {\r\n\t\t\tsubjectName\r\n\t\t\tsubjectCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n\tquery getAllGendersQuery {\r\n\t\tgenders(orderBy: genderName_ASC) {\r\n\t\t\tid\r\n\t\t\tgenderName\r\n\t\t\tgenderCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n\tquery getAllEducationTypesQuery {\r\n\t\teducationTypes {\r\n\t\t\teducationTypeName\r\n\t\t\teducationTypeCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n\tquery getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n\t\teducationType(id: $id) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t\tseries(orderBy: seriesName_ASC) {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tseriesCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllSeriesQuery = gql`\r\n\tquery getAllSeriesQuery {\r\n\t\tserieses(orderBy: seriesName_ASC) {\r\n\t\t\tid\r\n\t\t\tseriesName\r\n\t\t\tseriesCode\r\n\t\t}\r\n\t}\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n\tquery getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n\t\teducationType(id: $id) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t\tsubject(orderBy: subjectName_ASC) {\r\n\t\t\t\tid\r\n\t\t\t\tsubjectName\r\n\t\t\t\tsubjectCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n\tquery getAllSubjectsOfASeriesQuery($id: ID!) {\r\n\t\tseries(id: $id) {\r\n\t\t\tid\r\n\t\t\tseriesName\r\n\t\t\tsubjectSeries {\r\n\t\t\t\tid\r\n\t\t\t\tsubjectName\r\n\t\t\t\tsubjectCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n\tquery getAllExamsQuery {\r\n\t\texams(orderBy: examName_ASC) {\r\n\t\t\texamName\r\n\t\t\texamCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n\tquery getAllSessionsQuery {\r\n\t\tsessions(orderBy: createdAt_DESC) {\r\n\t\t\tsessionName\r\n\t\t\tsessionCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n\tquery getAllDivisionsQuery {\r\n\t\tdivisions(orderBy: divName_ASC) {\r\n\t\t\tdivName\r\n\t\t\tdivCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n\tquery getDivisionsOfARegionQuery($id: ID!) {\r\n\t\tregion(id: $id) {\r\n\t\t\tregName\r\n\t\t\tid\r\n\t\t\tdivision(orderBy: divName_ASC) {\r\n\t\t\t\tdivName\r\n\t\t\t\tdivCode\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n\tquery getSubDivisionsOfADivisionQuery($id: ID!) {\r\n\t\tdivision(id: $id) {\r\n\t\t\tdivName\r\n\t\t\tid\r\n\t\t\tsubDivision(orderBy: subDivName_ASC) {\r\n\t\t\t\tsubDivName\r\n\t\t\t\tsubDivCode\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n\tquery getTownsOfASubDivision($id: ID!) {\r\n\t\tsubDivision(id: $id) {\r\n\t\t\tsubDivName\r\n\t\t\tid\r\n\t\t\ttown(orderBy: townName_ASC) {\r\n\t\t\t\ttownName\r\n\t\t\t\ttownCode\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n\tquery getCentersOfATownQuery($id: ID!) {\r\n\t\ttown(id: $id) {\r\n\t\t\ttownName\r\n\t\t\tid\r\n\t\t\tcenter(orderBy: centerName_ASC) {\r\n\t\t\t\tcenterName\r\n\t\t\t\tcenterCode\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllSubjectTypesQuery = gql`\r\n\tquery getAllSubjectTypesQuery {\r\n\t\tsubjectTypes(orderBy: subjectTypeName_DESC) {\r\n\t\t\tid\r\n\t\t\tsubjectTypeName\r\n\t\t\tsubjectTypeCode\r\n\t\t}\r\n\t}\r\n`;\r\nconst getAllCentersQuery = gql`\r\n\tquery getAllCentersQuery {\r\n\t\tcenters(orderBy: centerName_ASC) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n\tquery getAllCandidatesQuery {\r\n\t\tcandidates(orderBy: cand1stName_ASC) {\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\temail\r\n\t\t\timage\r\n\t\t\tphoneNumb\r\n\t\t\tplaceOfBirth\r\n\t\t\tcandCode\r\n\t\t\tid\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n\tquery singleCenterQuery($id: ID!) {\r\n\t\tcenter(id: $id) {\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n\tquery singleTownQuery($id: ID!) {\r\n\t\ttown(id: $id) {\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n\tquery singleExamQuery($id: ID!) {\r\n\t\texam(id: $id) {\r\n\t\t\texamName\r\n\t\t\texamCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n\tquery singleCandidateQuery1($id: ID!) {\r\n\t\tcandidate(id: $id) {\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\tcandCode\r\n\t\t\temail\r\n\t\t\timage\r\n\t\t\tphoneNumb\r\n\t\t\tplaceOfBirth\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n\tquery singleCandidateQuery($id: ID!) {\r\n\t\tcandidate(id: $id) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\tcandCode\r\n\t\t\temail\r\n\t\t\timage\r\n\t\t\tphoneNumb\r\n\t\t\tplaceOfBirth\r\n\t\t\tgender {\r\n\t\t\t\tgenderName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n\tquery viewSingleCandidateQuery($candCode: String!) {\r\n\t\tsingleCandidate(candCode: $candCode) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\tcandCode\r\n\t\t\temail\r\n\t\t\timage\r\n\t\t\tphoneNumb\r\n\t\t\tplaceOfBirth\r\n\t\t\tgender {\r\n\t\t\t\tgenderName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getScoreID = gql`\r\n\tquery getScoreID($candExamSecretCode: String!) {\r\n\t\tscores(candExamSecretCode: $candExamSecretCode) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n\tquery getRegistrations($candExamSecretCode: String!) {\r\n\t\tregistration(candExamSecretCode: $candExamSecretCode) {\r\n\t\t\tid\r\n\t\t\tscores {\r\n\t\t\t\tid\r\n\t\t\t\tsubject {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubjectName\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n\tquery singleSubDivisionQuery($id: ID!) {\r\n\t\tsubDivision(id: $id) {\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n\tquery getSingleRegionQuery($id: ID!) {\r\n\t\tregion(id: $id) {\r\n\t\t\tregName\r\n\t\t\tregCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n\tquery singleCenterAdminQuery($id: ID!) {\r\n\t\tcenterAdmin(id: $id) {\r\n\t\t\tcenterAdminName\r\n\t\t\tcenterAdminCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\nconst dataForAverage = gql`\r\n\tquery dataForAverage($candExamSecretCode: String!) {\r\n\t\tscores(candExamSecretCode: $candExamSecretCode) {\r\n\t\t\tid\r\n\t\t\tsubjectAve\r\n\t\t\tcoeff\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n\tgetAllSubjectsOfASeriesQuery,\r\n\tgetAllSubjectTypesQuery,\r\n\tgetAllGendersQuery,\r\n\tgetAllEducTypeQuery,\r\n\tgetAllRegionsQuery,\r\n\tgetAllSeriesOfAnEducationTypeQuery,\r\n\tgetAllExamsQuery,\r\n\tgetAllSessionsQuery,\r\n\tgetDivisionsOfARegionQuery,\r\n\tgetAllDivisionsQuery,\r\n\tgetSubDivisionsOfADivisionQuery,\r\n\tgetTownsOfASubDivisionQuery,\r\n\tgetCentersOfATownQuery,\r\n\tgetAllEducationTypesQuery,\r\n\tgetAllSubjectsQuery,\r\n\tgetAllRanksQuery,\r\n\tgetAllEducTypesOfAnExam,\r\n\tgetAllCandidatesQuery,\r\n\tgetAllCentersQuery,\r\n\tgetSingleRegionQuery,\r\n\tgetACenterAdminQuery,\r\n\tgetAllSeriesQuery,\r\n\tgetAllSubjectsOfAnEducTypeQuery,\r\n\tgetScoreID,\r\n\tgetRegistrations,\r\n\tsingleCandidateQuery1,\r\n\tsingleCandidateQuery,\r\n\tviewSingleCandidateQuery,\r\n\tsingleCenterQuery,\r\n\tsingleCenterAdminQuery,\r\n\tsingleExamQuery,\r\n\tsingleTownQuery,\r\n\tschoolDataQuery,\r\n\tsingleSubDivisionQuery,\r\n\tdataForAverage\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport Form from \"../styles/Form\";\r\nimport Error from \"../ErrorMessage\";\r\nimport styled from \"styled-components\";\r\n// import \"typeface-roboto\";\r\nimport { updateScoreMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getSelectedObject } from \"../queries&Mutations&Functions/Functions\";\r\nimport {\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSeriesOfAnEducationTypeQuery\r\n} from \"../queries&Mutations&Functions/Queries\";\r\nimport { Select, TextField, Typography, Button, Paper, MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n  paper: {\r\n    borderRadius: 30,\r\n    background: \"#359\",\r\n    \"& *\": { color: \"rgba(255, 255, 255, 0.7)\" }\r\n  },\r\n  typography: {\r\n    fontSize: 23\r\n  }\r\n});\r\nconst StyledDivision = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 52rem;\r\n`;\r\n\r\nconst CenterSelect = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 40rem;\r\n`;\r\n\r\nconst OtherSelect = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 40rem;\r\n`;\r\n\r\nclass MuiMarks extends Component {\r\n  state = {\r\n    subjectAve: \"\",\r\n    seriesID: \"12\",\r\n    examID: \"12\",\r\n    educTypeID: \"12\",\r\n    sessionID: \"\",\r\n    candExamSecretCode: \"\",\r\n    MuiText: \"\",\r\n    subjectSeriesID: \"ck5thzgfrwmow09352gytkff6\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value, type } = e.target;\r\n    const val = type === \"number\" ? parseFloat(value) : value;\r\n    this.setState({ [name]: val });\r\n  };\r\n  resetForm = () => {\r\n    this.setState({ candExamSecretCode: \"\", subjectAve: \"\" });\r\n  };\r\n\r\n  makeCandVariableObject = candCodeValue => {\r\n    const storedCandidate = {\r\n      candExamSecretCode: `${candCodeValue}`\r\n    };\r\n    return storedCandidate;\r\n  };\r\n\r\n  updateItemMutation = async (e, updateMutation) => {\r\n    e.preventDefault();\r\n    console.log(\"Entering Marks!!\");\r\n    const res = await updateMutation({\r\n      variables: {\r\n        ...this.state\r\n      }\r\n    });\r\n    console.log(\"Marks entered!!\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Query query={getAllEducationTypesQuery}>\r\n        {({ data, loading, error }) => {\r\n          {\r\n            loading && <p>loading...</p>;\r\n          }\r\n          {\r\n            error && <Error error={error} />;\r\n          }\r\n          console.log(data);\r\n\r\n          const { educationTypes } = data;\r\n          console.log(educationTypes);\r\n          const educTypeOptions =\r\n            educationTypes &&\r\n            educationTypes.map(item => (\r\n              <option key={item.id} value={item.id}>\r\n                {item.educationTypeName}\r\n              </option>\r\n            ));\r\n\r\n          return (\r\n            <Query\r\n              query={getAllSeriesOfAnEducationTypeQuery}\r\n              variables={educationTypes && getSelectedObject(educationTypes, this.state.educTypeID)}\r\n            >\r\n              {({ data, loading, error }) => {\r\n                {\r\n                  loading && <p>loading...</p>;\r\n                }\r\n                {\r\n                  error && <Error error={error} />;\r\n                }\r\n                console.log(data);\r\n\r\n                const { educationType } = data;\r\n\r\n                const seriesEducType = { ...educationType };\r\n                const { series } = seriesEducType;\r\n                console.log(series);\r\n\r\n                const refinedSeries = series && series.map(({ __typename, seriesName, ...others }) => others);\r\n                const seriesOptions =\r\n                  series &&\r\n                  series.map(item => (\r\n                    <option key={item.id} value={item.id}>\r\n                      {item.seriesName}\r\n                    </option>\r\n                  ));\r\n                return (\r\n                  <Query\r\n                    query={getAllSubjectsOfASeriesQuery}\r\n                    variables={series && getSelectedObject(series, this.state.seriesID)}\r\n                  >\r\n                    {({ data, loading, error }) => {\r\n                      {\r\n                        loading && <p>loading...</p>;\r\n                      }\r\n                      {\r\n                        error && <Error error={error} />;\r\n                      }\r\n\r\n                      console.log(data);\r\n                      const { series } = data;\r\n                      const allEducTypes = { ...series };\r\n                      const { subjectSeries } = allEducTypes;\r\n                      console.log(subjectSeries);\r\n\r\n                      const refinedSubjectSeries =\r\n                        subjectSeries && subjectSeries.map(({ __typename, subjectName, subjectCode, ...others }) => others);\r\n                      const subjectOptions =\r\n                        subjectSeries &&\r\n                        subjectSeries.map(item => (\r\n                          <option key={item.id} value={item.id}>\r\n                            {item.subjectName}\r\n                          </option>\r\n                        ));\r\n\r\n                      return (\r\n                        <Mutation\r\n                          mutation={updateScoreMutation}\r\n                          variables={{\r\n                            ...this.state,\r\n                            subjectSeries:\r\n                              refinedSubjectSeries && getSelectedObject(refinedSubjectSeries, this.state.subjectSeriesID)\r\n                          }}\r\n                        >\r\n                          {(updateScore, { loading, error }) => (\r\n                            <MuiThemeProvider theme={theme}>\r\n                              <Paper>\r\n                                <Form\r\n                                  onSubmit={async e => {\r\n                                    e.preventDefault();\r\n                                    const res = await this.updateItemMutation(e, updateScore);\r\n                                    this.resetForm();\r\n                                    console.log(res);\r\n                                  }}\r\n                                >\r\n                                  <Typography variant=\"display1\" align=\"center\" gutterBottom>\r\n                                    <h4>Inscrire les notes des candidats</h4>\r\n                                  </Typography>\r\n                                  <Error error={error} />\r\n                                  <fieldset disabled={loading} aria-busy={loading}>\r\n                                    <StyledDivision>\r\n                                      <Select\r\n                                        type=\"select\"\r\n                                        id=\"educTypeID\"\r\n                                        name=\"educTypeID\"\r\n                                        value={this.state.educTypeID}\r\n                                        onChange={this.handleChange}\r\n                                        required\r\n                                      >\r\n                                        <option>Choisir un Type d'enseignement</option>\r\n                                        {educTypeOptions}\r\n                                      </Select>\r\n                                      <Select\r\n                                        type=\"select\"\r\n                                        id=\"seriesID\"\r\n                                        name=\"seriesID\"\r\n                                        value={this.state.seriesID}\r\n                                        onChange={this.handleChange}\r\n                                        required\r\n                                      >\r\n                                        <option>Choisir une Serie</option>\r\n                                        {seriesOptions}\r\n                                      </Select>\r\n                                      <Select\r\n                                        type=\"select\"\r\n                                        id=\"subjectSeriesID\"\r\n                                        name=\"subjectSeriesID\"\r\n                                        value={this.state.subjectSeriesID}\r\n                                        onChange={this.handleChange}\r\n                                        required\r\n                                      >\r\n                                        <option>Choisir la matiere</option>\r\n                                        {subjectOptions}\r\n                                      </Select>\r\n                                      <TextField\r\n                                        type=\"text\"\r\n                                        id=\"candExamSecretCode\"\r\n                                        name=\"candExamSecretCode\"\r\n                                        placeholder=\"Code secret du candidat\"\r\n                                        value={this.state.candExamSecretCode}\r\n                                        onChange={this.handleChange}\r\n                                        required\r\n                                      />\r\n                                      <TextField\r\n                                        type=\"number\"\r\n                                        step=\"0.001\"\r\n                                        min=\"0.0\"\r\n                                        max=\"20.0\"\r\n                                        id=\"subjectAve\"\r\n                                        name=\"subjectAve\"\r\n                                        placeholder=\"Note de la matiere\"\r\n                                        value={this.state.subjectAve}\r\n                                        onChange={this.handleChange}\r\n                                        required\r\n                                      />\r\n\r\n                                      <div className=\"submitButton\">\r\n                                        <Button type=\"submit\">Valid{loading ? \"ation en cours\" : \"er\"}</Button>\r\n                                      </div>\r\n                                    </StyledDivision>\r\n                                  </fieldset>\r\n                                </Form>\r\n                              </Paper>\r\n                            </MuiThemeProvider>\r\n                          )}\r\n                        </Mutation>\r\n                      );\r\n                    }}\r\n                  </Query>\r\n                );\r\n              }}\r\n            </Query>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MuiMarks;\r\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05); */\n  background: ${(props) => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.2rem;\n  line-height: 1.2;\n  font-weight: 100;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.3rem;\n    border-style: none;\n    border-bottom: 1px solid ${(props) => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${(props) => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${(props) => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    font-size: 1.3rem;\n    font-weight: 200;\n    border-radius:7px;\n    margin-top: 1rem;\n    padding: .8rem .8rem;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .8px solid ${(props) => props.theme.lightGrey};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    /* grid-template-columns: repeat(auto-fit, -ms-content-zoom-limit-max(200px,1fr)); */\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${(props) => props.theme.bs};\n\n    &[disabled] {\n      opacity: 0.3;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@material-ui/core\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAWA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;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","sourceRoot":""}