{"version":3,"file":"static\\development\\pages\\creates\\login.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/login.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/styles/StyledPage.jsx","webpack:///./src/components/user/Login.jsx","webpack:///./src/components/utils/FormInputs.jsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"formik\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"styled-components\"","webpack:///external \"yup\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React from 'react';\r\nimport Login from '../../src/components/user/Login';\r\n\r\nconst login = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Login />\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default login;\r\n","import styled from \"styled-components\";\r\nimport React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ErrorStyles = styled.div`\r\n  padding: 0.5rem;\r\n  background: ${props => props.theme.grey[2]};\r\n  margin:0 1.1rem ;\r\n  border-radius: 0.5rem;\r\n  border: 0.01rem solid rgba(0, 0, 0, 0.05);\r\n  /* border-right: 0.08rem solid red; */\r\n  border-left: 0.05rem solid red;\r\n  p {\r\n    margin: 0;\r\n    font-size:1.2rem;\r\n    font-weight: bold;\r\n  }\r\n  strong {\r\n    margin-right: 0.15rem;\r\n  }\r\n`;\r\n\r\nconst DisplayError = ({ error }) => {\r\n  if (!error || !error.message) return null;\r\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\r\n    return error.networkError.result.errors.map((error, i) => (\r\n      <ErrorStyles key={i}>\r\n        <p data-test=\"graphql-error\">\r\n          <strong>Probleme Reseaux!</strong>\r\n          {error.message.replace(\"GraphQL error: \", \"\")}\r\n        </p>\r\n      </ErrorStyles>\r\n    ));\r\n  }\r\n  return (\r\n    <ErrorStyles >\r\n      <p data-test=\"graphql-error\">\r\n        <strong>Erreure!</strong>\r\n        {error.message.replace(\"GraphQL error: \", \"\")}\r\n      </p>\r\n    </ErrorStyles>\r\n  );\r\n};\r\n\r\nDisplayError.defaultProps = {\r\n  error: {}\r\n};\r\n\r\nDisplayError.propTypes = {\r\n  error: PropTypes.object\r\n};\r\n\r\nexport default DisplayError;\r\n","import gql from 'graphql-tag'\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n  mutation signInCandidate($candCode: String!) {\r\n    candidateSignIn(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n    }\r\n  }\r\n`\r\n//\r\n\r\nconst updateSessionMutation = gql`\r\n  mutation updateSessionMutation(\r\n    $id: ID!\r\n    $sessionName: String\r\n    $sessionCode: String\r\n  ) {\r\n    updateSession(\r\n      id: $id\r\n      sessionName: $sessionName\r\n      sessionCode: $sessionCode\r\n    ) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateEducationTypeMutation = gql`\r\n  mutation updateEducationTypeMutation(\r\n    $id: ID!\r\n    $educationTypeName: String\r\n    $educationTypeCode: String\r\n  ) {\r\n    updateEducationType(\r\n      id: $id\r\n      educationTypeName: $educationTypeName\r\n      educationTypeCode: $educationTypeCode\r\n    ) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`\r\nconst updateSubjectTypeMutation = gql`\r\n  mutation updateSubjectTypeMutation(\r\n    $id: ID!\r\n    $subjectTypeName: String\r\n    $subjectTypeCode: String\r\n  ) {\r\n    updateSubjectType(\r\n      id: $id\r\n      subjectTypeName: $subjectTypeName\r\n      subjectTypeCode: $subjectTypeCode\r\n    ) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`\r\n\r\nconst updateSubjectMutation = gql`\r\n  mutation updateSubjectMutation(\r\n    $id: ID!\r\n    $subjectName: String\r\n    $subjectCode: String\r\n  ) {\r\n    updateSubject(\r\n      id: $id\r\n      subjectName: $subjectName\r\n      subjectCode: $subjectCode\r\n    ) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateRankMutation = gql`\r\n  mutation updateRankMutation($id: ID!, $rankName: String, $rankCode: String) {\r\n    updateRank(id: $id, rankName: $rankName, rankCode: $rankCode) {\r\n      id\r\n      rankName\r\n      rankCode\r\n    }\r\n  }\r\n`\r\n\r\nconst updateSeriesMutation = gql`\r\n  mutation updateSeriesMutation(\r\n    $id: ID!\r\n    $seriesName: String\r\n    $seriesCode: String\r\n  ) {\r\n    updateSeries(id: $id, seriesName: $seriesName, seriesCode: $seriesCode) {\r\n      seriesName\r\n      seriesCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateDivisionMutation = gql`\r\n  mutation updateDivisionMutation(\r\n    $id: ID!\r\n    $divName: String\r\n    $divCode: String\r\n  ) {\r\n    updateDivision(id: $id, divName: $divName, divCode: $divCode) {\r\n      id\r\n      divName\r\n      divCode\r\n    }\r\n  }\r\n`\r\n\r\nconst updateRegionMutation = gql`\r\n  mutation updateRegionMutation($id: ID!, $regName: String, $regCode: String) {\r\n    updateRegion(id: $id, regName: $regName, regCode: $regCode) {\r\n      id\r\n      regName\r\n      regCode\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewReportMutation = gql`\r\n  mutation createNewReportMutation(\r\n    $reportImage: String!\r\n    $reportName: String!\r\n    $centerExamSessionExaminer: CenterExamSessionExaminerWhereUniqueInput!\r\n\r\n  ) {\r\n    createReport(\r\n      reportImage: $reportImage\r\n      reportName: $reportName\r\n      centerExamSessionExaminer: $centerExamSessionExaminer\r\n    ) {\r\n      id\r\n      reportName\r\n      reportImage\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewGenderMutation = gql`\r\n  mutation createNewGenderMutation($genderName: String!, $genderCode: String!) {\r\n    createGender(genderName: $genderName, genderCode: $genderCode) {\r\n      id\r\n      genderCode\r\n      genderName\r\n    }\r\n  }\r\n`\r\n\r\nconst createRegistrationMutation = gql`\r\n  mutation createRegistrationMutation(\r\n    $candidate: CandidateWhereUniqueInput!\r\n    $candExamSecretCode: String!\r\n    $candExamSession: String!\r\n    $candRegistrationNumber: String!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $centerExamSessionSeries: CenterExamSessionSeriesWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n  ) {\r\n    createRegistration(\r\n      candidate: $candidate\r\n      candExamSecretCode: $candExamSecretCode\r\n      candExamSession: $candExamSession\r\n      candRegistrationNumber: $candRegistrationNumber\r\n      centerExamSession: $centerExamSession\r\n      centerExamSessionSeries: $centerExamSessionSeries\r\n      series: $series\r\n    ) {\r\n      id\r\n      centerExamSession {\r\n        id\r\n        center {\r\n          id\r\n          centerName\r\n        }\r\n      }\r\n      candidate {\r\n        id\r\n        cand1stName\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst createCenterExamSessionMutation = gql`\r\n  mutation createCenterExamSessionMutation(\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n  ) {\r\n    createCenterExamSession(examSession: $examSession, center: $center) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst createPhaseRankMutation = gql`\r\n  mutation createPhaseRankMutation(\r\n    $phase: PhaseWhereUniqueInput!\r\n    $rankName:  String!                                                                                                                                                                    \r\n    $rankCode:  String!                                                                                                                                                                   \r\n  ) {\r\n    createPhaseRank(phase: $phase, rankName : $rankName, rankCode: $rankCode ){                                                                                                                                                                      \r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst createCenterExamSessionExaminerMutation = gql`\r\n  mutation createCenterExamSessionExaminerMutation(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $examiner:  ExaminerWhereUniqueInput! \r\n    $phaseRank:  PhaseRankWhereUniqueInput! \r\n  ) {\r\n    createCenterExamSessionExaminer(\r\n    phaseRank: $phaseRank,\r\n    centerExamSession: $centerExamSession,\r\n    examiner: $examiner\r\n    ){                                                                                                                                                                      \r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst createCenterExamSessionSeriesMutation = gql`\r\n  mutation createCenterExamSessionSeriesMutation(\r\n    $series: SeriesWhereUniqueInput!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n  ) {\r\n    createCenterExamSessionSeries(\r\n      series: $series\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\n\r\n// const createCenterExamSessionexaminerorityMutation = gql`\r\n//   mutation createCenterExamSessionexaminerorityMutation(\r\n//     $rank: RankWhereUniqueInput!\r\n//     $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n//     $examinerName: String!\r\n//     $examinerCode: String!\r\n//     $examinerCNI: String!\r\n//     $examinerPhone: Int!\r\n//     $examinerMatricule: String!\r\n//   ) {\r\n//     createCenterExamSessionexaminerority(\r\n//       rank: $rank\r\n//       centerExamSession: $centerExamSession\r\n//       examinerCNI: $examinerCNI\r\n//       examinerName: $examinerName\r\n//       examinerCode: $examinerCode\r\n//       examinerPhone: $examinerPhone\r\n//       examinerMatricule: $examinerMatricule\r\n//     ) {\r\n//       examinerName\r\n//       examinerCode\r\n//       examinerPhone\r\n//     }\r\n//   }\r\n// `\r\n\r\nconst createDivisionMutation = gql`\r\n  mutation createDivisionMutation(\r\n    $divName: String!\r\n    $divCode: String!\r\n    $region: RegionWhereUniqueInput!\r\n  ) {\r\n    createDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n      id\r\n      divName\r\n    }\r\n  }\r\n`\r\n\r\nconst createCenterMutation = gql`\r\n  mutation createCenterMutation(\r\n    $centerName: String!\r\n    $centerNumber: Int\r\n    $centerCode: String!\r\n    $centerSecretCode: String!\r\n    $town: TownWhereUniqueInput!\r\n  ) {\r\n    createCenter(\r\n      centerSecretCode: $centerSecretCode\r\n      centerName: $centerName\r\n      centerNumber: $centerNumber\r\n      centerCode: $centerCode\r\n      town: $town\r\n    ) {\r\n      id\r\n      centerName\r\n      centerSecretCode\r\n      centerCode\r\n      town {\r\n        townName\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst createSeriesMutation = gql`\r\n  mutation createSeriesMutation(\r\n    $seriesName: String!\r\n    $seriesCode: String!\r\n    $educationType: EducationTypeWhereUniqueInput!\r\n  ) {\r\n    createSeries(\r\n      seriesName: $seriesName\r\n      seriesCode: $seriesCode\r\n      educationType: $educationType\r\n    ) {\r\n      id\r\n      seriesName\r\n    }\r\n  }\r\n`\r\nconst createEducationTypeMutation = gql`\r\n  mutation createEducationTypeMutation(\r\n    $educationTypeName: String!\r\n    $educationTypeCode: String!\r\n  ) {\r\n    createEducationType(\r\n      educationTypeName: $educationTypeName\r\n      educationTypeCode: $educationTypeCode\r\n    ) {\r\n      id\r\n      educationTypeName\r\n    }\r\n  }\r\n`\r\n\r\nconst createTownMutation = gql`\r\n  mutation createTownMutation(\r\n    $townName: String!\r\n    $townCode: String!\r\n    $subDiv: SubDivisionWhereUniqueInput!\r\n  ) {\r\n    createTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n      id\r\n      townName\r\n      townCode\r\n      subDiv {\r\n        subDivName\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewSubjectTypeMutation = gql`\r\n  mutation createNewSubjectTypeMutation(\r\n    $subjectTypeName: String!\r\n    $subjectTypeCode: String!\r\n  ) {\r\n    createSubjectType(\r\n      subjectTypeName: $subjectTypeName\r\n      subjectTypeCode: $subjectTypeCode\r\n    ) {\r\n      id\r\n      subjectTypeName\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewSubjectMutation = gql`\r\n  mutation createNewSubjectMutation(\r\n    $subjectName: String!\r\n    $subjectCode: String!\r\n    $subjectType: SubjectTypeWhereUniqueInput!\r\n    $educType: EducationTypeWhereUniqueInput!\r\n  ) {\r\n    createSubject(\r\n      subjectName: $subjectName\r\n      educType: $educType\r\n      subjectCode: $subjectCode\r\n      subjectType: $subjectType\r\n    ) {\r\n      subjectCode\r\n      subjectName\r\n    }\r\n  }\r\n`\r\n\r\nconst createSubDivisionMutation = gql`\r\n  mutation createSubDivisionMutation(\r\n    $subDivName: String!\r\n    $subDivCode: String!\r\n    $division: DivisionWhereUniqueInput!\r\n  ) {\r\n    createSubDivision(\r\n      subDivName: $subDivName\r\n      subDivCode: $subDivCode\r\n      division: $division\r\n    ) {\r\n      id\r\n      subDivName\r\n      subDivCode\r\n      division {\r\n        divName\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewSessionMutation = gql`\r\n  mutation createNewSessionMutation(\r\n    $sessionName: String!\r\n    $sessionCode: String!\r\n  ) {\r\n    createSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n      id\r\n      sessionName\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewRankMutation = gql`\r\n  mutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n    createRank(rankName: $rankName, rankCode: $rankCode) {\r\n      id\r\n      rankName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewRegionMutation = gql`\r\n  mutation createNewRegionMutation(\r\n    $regName: String!\r\n     $regCode: String!\r\n      $country: CountryWhereUniqueInput!\r\n      ) {\r\n    createRegion(\r\n       country: $country \r\n        regName: $regName\r\n         regCode: $regCode\r\n         ) {\r\n      id\r\n      regName\r\n    }\r\n  }\r\n`\r\n\r\nconst signupUserMutation = gql`\r\n  mutation signupUserMutation(\r\n    $name: String!\r\n     $email: String!\r\n      $password: String!\r\n      ) {\r\n    signup(\r\n       password: $password \r\n        name: $name\r\n         email: $email\r\n         ) {\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst loginUserMutation = gql`\r\n  mutation loginUserMutation(\r\n     $email: String!\r\n      $password: String!\r\n      ) {\r\n    login(\r\n       password: $password \r\n         email: $email\r\n         ) {\r\n      id\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nconst createNewCountryMutation = gql`\r\n  mutation createNewCountryMutation($countryName: String!, $countryCode: String!) {\r\n    createCountry(countryName: $countryName, countryCode: $countryCode) {\r\n      id\r\n      countryName\r\n      countryCode\r\n    }\r\n  }\r\n`\r\n\r\nconst createPhaseMutation = gql`\r\n  mutation createPhaseMutation($phaseName: String!, $phaseCode: String!){\r\n    createPhase(phaseName: $phaseName, phaseCode: $phaseCode) {\r\n      id\r\n      phaseName\r\n    }\r\n  }\r\n`\r\n\r\nconst createExamMutation = gql`\r\n  mutation createExamMutation($examName: String!, $examCode: String!) {\r\n    createExam(examName: $examName, examCode: $examCode) {\r\n      id\r\n      examName\r\n    }\r\n  }\r\n`\r\n\r\nconst registerSubjectSeriesMutation = gql`\r\n  mutation registerSubjectSeriesMutation(\r\n    $subject: SubjectWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n    $coeff: Int!\r\n  ) {\r\n    createSubjectSeries(subject: $subject, series: $series, coeff: $coeff) {\r\n      id\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subject {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst registerNewSubjectSeriesMutation = gql`\r\n  mutation registerNewSubjectSeriesMutation(\r\n    $series: SeriesWhereUniqueInput!\r\n    $coeff: Int!\r\n    $subjectName: String!\r\n    $subjectCode: String!\r\n  ) {\r\n    createSubjectSeries(\r\n      subjectCode: $subjectCode\r\n      subjectName: $subjectName\r\n      series: $series\r\n      coeff: $coeff\r\n    ) {\r\n      id\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n          subjectCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst createCandidateMutation = gql`\r\n  mutation createCandidateMutation(\r\n    $cand1stName: String!\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $dadName: String\r\n    $momName: String\r\n    $candCode: String\r\n    $email: String!\r\n    $image: String!\r\n    $phoneNumb: Int\r\n    $dateOfBirth: DateTime\r\n    $birthCertNumber: String\r\n    $placeOfBirth: String\r\n    $gender: GenderWhereUniqueInput!\r\n  ) {\r\n    createCandidate(\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      dadName: $dadName\r\n      momName: $momName\r\n      cand3rdName: $cand3rdName\r\n      candCode: $candCode\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      dateOfBirth: $dateOfBirth\r\n      birthCertNumber: $birthCertNumber\r\n      placeOfBirth: $placeOfBirth\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      momName\r\n      dadName\r\n      candCode\r\n      birthCertNumber\r\n      dateOfBirth\r\n      image\r\n    }\r\n  }\r\n`\r\n\r\nconst createExaminerMutation = gql`\r\n  mutation createExaminerMutation(\r\n    $examiner1stName: String!\r\n    $examiner2ndName: String!\r\n    $examinerOtherNames: String\r\n    $examinerCode: String!\r\n    $examinerEmail: String!\r\n    $examinerCNI: String!\r\n    $examinerMatricule: String!\r\n    $examinerImage: String!\r\n    $examinerPhone: Int!\r\n    $gender: GenderWhereUniqueInput!\r\n  ) {\r\n    createExaminer(\r\n      examiner1stName: $examiner1stName\r\n      examiner2ndName: $examiner2ndName\r\n      examinerOtherNames: $examinerOtherNames\r\n      examinerMatricule: $examinerMatricule\r\n      examinerCode: $examinerCode\r\n      examinerCNI: $examinerCNI\r\n      examinerEmail: $examinerEmail\r\n      examinerImage: $examinerImage\r\n      examinerPhone: $examinerPhone\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCode\r\n      examinerEmail\r\n      examinerImage\r\n      examinerPhone\r\n    }\r\n  }\r\n`\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n  mutation updateSubDivisionMutation(\r\n    $id: ID!\r\n    $subDivName: String\r\n    $subDivCode: String\r\n  ) {\r\n    updateSubDivision(\r\n      id: $id\r\n      subDivName: $subDivName\r\n      subDivCode: $subDivCode\r\n    ) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateCenterMutation = gql`\r\n  mutation updateCenterMutation(\r\n    $id: ID!\r\n    $centerName: String\r\n    $centerCode: String\r\n    $centerNumber: Int\r\n  ) {\r\n    updateCenter(\r\n      id: $id\r\n      centerName: $centerName\r\n      centerCode: $centerCode\r\n      centerNumber: $centerNumber\r\n    ) {\r\n      id\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n    }\r\n  }\r\n`\r\n\r\nconst updateTownMutation = gql`\r\n  mutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n    updateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateExamMutation = gql`\r\n  mutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n    updateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`\r\n\r\nconst updateScoreMutation = gql`\r\n  mutation updateScoreMutation(\r\n    $subjectSeries: SubjectSeriesWhereUniqueInput!\r\n    $subjectAve: Float!\r\n    $candExamSecretCode: String!\r\n  ) {\r\n    updateScore(\r\n      subjectSeries: $subjectSeries\r\n      subjectAve: $subjectAve\r\n      candExamSecretCode: $candExamSecretCode\r\n    ) {\r\n      subjectAve\r\n      coeff\r\n      id\r\n      subjectSeries {\r\n        id\r\n        subjectCode\r\n        subjectName\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// const createUserMutation = gql`\r\n//   mutation createUserMutation(\r\n//     $email: String!\r\n//     $name: String!\r\n//     $password: String!\r\n//     ) {\r\n//     createUser( \r\n//                email: $email!\r\n//                name: $name!\r\n//                password: $password!\r\n//                ) {\r\n//       id\r\n//       name\r\n//       email\r\n//       password\r\n//     }\r\n//   }\r\n// `\r\n\r\nconst updateCandidateMutation = gql`\r\n  mutation updateCandidateMutation(\r\n    $id: ID!\r\n    $cand1stName: String\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $momName: String\r\n    $dadName: String\r\n    $email: String\r\n    $image: String\r\n    $phoneNumb: Int\r\n    $placeOfBirth: String\r\n    $dateOfBirth: DateTime\r\n    $birthCertNumber: String\r\n    $gender: GenderWhereUniqueInput\r\n  ) {\r\n    updateCandidate(\r\n      id: $id\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      cand3rdName: $cand3rdName\r\n      momName: $momName\r\n      dadName: $dadName\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      placeOfBirth: $placeOfBirth\r\n      dateOfBirth: $dateOfBirth\r\n      birthCertNumber: $birthCertNumber\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      dateOfBirth\r\n      birthCertNumber\r\n      gender {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst updateGenderMutation = gql`\r\n  mutation updateGenderMutation(\r\n    $id: ID!\r\n    $genderName: String\r\n    $genderCode: String\r\n  ) {\r\n    updateGender(id: $id, genderName: $genderName, genderCode: $genderCode) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`\r\n\r\nconst signUpMutation = gql`\r\n  mutation signUpMutation($email: String!, $name: String!, $password: String!) {\r\n    signUp(email: $email, name: $name, password: $password) {\r\n      id\r\n      email\r\n      resetToken\r\n      password\r\n    }\r\n  }\r\n`\r\n\r\nconst updateItemMutation = async (e, updateMutation) => {\r\n  e.preventDefault()\r\n  console.log('Updating Region!!')\r\n  const res = await updateMutation({\r\n    variables: {\r\n      id: this.props.id,\r\n      ...this.state,\r\n    },\r\n  })\r\n  console.log('Region Updated!!')\r\n}\r\n\r\n////**************Update mutations */\r\n\r\nexport {\r\n  createCandidateMutation,\r\n  createNewSubjectMutation,\r\n  createNewSubjectTypeMutation,\r\n  createTownMutation,\r\n  createCenterExamSessionExaminerMutation,\r\n  createDivisionMutation,\r\n  createRegistrationMutation,\r\n  createCenterMutation,\r\n  createEducationTypeMutation,\r\n  createSeriesMutation,\r\n  createSubDivisionMutation,\r\n  createNewSessionMutation,\r\n  createNewRankMutation,\r\n  createNewReportMutation,\r\n  createNewRegionMutation,\r\n  createNewGenderMutation,\r\n  createExamMutation,\r\n  registerSubjectSeriesMutation,\r\n  registerNewSubjectSeriesMutation,\r\n  updateCenterMutation,\r\n  updateTownMutation,\r\n  updateSessionMutation,\r\n  updateRegionMutation,\r\n  updateExamMutation,\r\n  updateSubDivisionMutation,\r\n  updateGenderMutation,\r\n  updateCandidateMutation,\r\n  updateScoreMutation,\r\n  updateDivisionMutation,\r\n  updateItemMutation,\r\n  createExaminerMutation,\r\n  createPhaseMutation,\r\n  createCenterExamSessionSeriesMutation,\r\n  updateSeriesMutation,\r\n  updateRankMutation,\r\n  createPhaseRankMutation,\r\n  createNewCountryMutation,\r\n  signUpMutation,\r\n  updateSubjectMutation,\r\n  updateSubjectTypeMutation,\r\n  createCenterExamSessionMutation,\r\n  updateEducationTypeMutation,\r\n  signInCandidate,\r\n  loginUserMutation,\r\n  signupUserMutation,\r\n}\r\n","import gql from 'graphql-tag';\r\n\r\nconst getACenterAdminQuery = gql`\r\n  query getACenterAdminQuery($authCode: String!) {\r\n    centerAdminSignIn(authCode: $authCode) {\r\n      id\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst meQuery = gql`\r\n  query meQuery {\r\n    me {\r\n      id\r\n     email\r\n     name \r\n     password\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleEducationTypeQuery = gql`\r\n  query singleEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCESExaminerQuery = gql`\r\n  query getCESExaminerQuery(\r\n    $examiner: ExaminerWhereUniqueInput!,\r\n     $centerExamSession:CenterExamSessionWhereUniqueInput!) {\r\n    getCenterExamSessionExaminers(\r\n      examiner: $examiner, \r\n      centerExamSession:$centerExamSession  ) {\r\n     \r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectTypeQuery = gql`\r\n  query singleSubjectTypeQuery($id: ID!) {\r\n    subjectType(id: $id) {\r\n      subjectTypeName\r\n      subjectTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterAdminsQuery = gql`\r\n  query getAllCenterAdminsQuery {\r\n    centerAdmins {\r\n      id\r\n      authName\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes(orderBy: educationTypeName_ASC) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllRegionsOfACountryQuery = gql`\r\n  query getAllRegionsOfACountryQuery($id: ID!) {\r\n    country(id: $id) {\r\n      id\r\n      region(orderBy: regName_ASC){\r\n       regName\r\n      regCode\r\n      id\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n      regions{\r\n       regName\r\n      regCode\r\n      id\r\n  }}\r\n`;\r\nconst getAllCountrysQuery = gql`\r\n  query getAllCountrysQuery {\r\n    countries(orderBy:countryName_ASC) {\r\n      countryName\r\n      countryCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllCountrysRegionCreateQuery = gql`\r\n  query getAllCountrysRegionCreateQuery {\r\n    countries(orderBy:countryName_ASC) {\r\n           id\r\n    }\r\n  }\r\n`;\r\nconst getCenterResultsQuery = gql`\r\n  query getCenterResultsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    getResultsPerCenter(exam: $exam, center: $center, session: $session) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n      scores {\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          subjectName\r\n          series {\r\n            id\r\n            seriesName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateResultsQuery = gql`\r\n  query getCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      createdAt\r\n      candRegistrationNumber\r\n      \r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        placeOfBirth\r\n        image\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      centerExamSessionSeries {\r\n      centerExamSession{\r\n        id \r\n      examSession {\r\n       id\r\n        exam{\r\n          id \r\n          examName\r\n        }\r\n        session{\r\n          id\r\n          sessionName\r\n        }\r\n      }\r\n      center {\r\n        id\r\n        centerName\r\n      }}\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n      }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries  {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExaminerRegistrationQuery = gql`\r\n  query getExaminerRegistrationQuery($id: ID!) {\r\n    centerExamSessionExaminer(id: $id) {\r\n      id\r\n      examiner{\r\n        examiner1stName\r\n        examiner2ndName\r\n        examinerOtherNames\r\n        examinerMatricule\r\n        examinerPhone\r\n        examinerCNI\r\n        examinerImage\r\n        examinerEmail\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      centerExamSession{\r\n        id \r\n      examSession {\r\n       id\r\n        exam{\r\n          id \r\n          examName\r\n        }\r\n        session{\r\n          id\r\n          sessionName\r\n      }}\r\n      center {\r\n        id\r\n        centerName\r\n      }\r\n      \r\n      }\r\n      phaseRank {\r\n        id\r\n        rankName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterResultsQuery = gql`\r\n  query getAllCenterResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     registration{\r\n       id\r\n       candidate{\r\n         cand1stName\r\n         id\r\n       }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     }\r\n   }\r\n  }\r\n`;\r\n\r\nconst getEachCandidateResultsQuery = gql`\r\n  query getEachCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      series {\r\n        id\r\n        seriesName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDQuery = gql`\r\n  query getCandidateRegistrationIDQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n  ) {\r\n    candidateRegistrationID(centerExamSession: $centerExamSession, candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDsQuery = gql`\r\n  query getCandidateRegistrationIDsQuery($candidate: RegistrationWhereInput!  ) {\r\n    candidateRegistrationIDs(candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidateRegistrationIDsQuery = gql`\r\n  query getAllCandidateRegistrationIDsQuery($id: ID!  ) {\r\n    candidate( id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      gender{\r\nid\r\ngenderName\r\n      }\r\n      registration{\r\n        id\r\n     \r\n        centerExamSessionSeries{\r\n          id\r\n         series{\r\n           id\r\n           seriesName\r\n         }\r\n         centerExamSession{\r\n          center{\r\n            id\r\n            centerName\r\n          }\r\n          examSession{\r\n            id\r\n            exam{\r\n              id\r\n              examName\r\n            }\r\n            session{\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n       \r\n        }\r\n        scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n        }\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateIDQuery = gql`\r\n  query getCandidateIDQuery(\r\n    $candCode: String!\r\n  ) {\r\n    candidateCode(candCode: $candCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrationIDFromRegNumberQuery = gql`\r\n  query getRegistrationIDFromRegNumberQuery(\r\n    $candRegistrationNumber: String!\r\n  ) {\r\n    candidateRegistrationNumber(candRegistrationNumber: $candRegistrationNumber) {\r\n     id\r\n     candidate{\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      gender{\r\nid\r\ngenderName\r\n      }\r\n      registration{\r\n        id\r\n     \r\n        centerExamSessionSeries{\r\n          id\r\n         series{\r\n           id\r\n           seriesName\r\n         }\r\n         centerExamSession{\r\n          center{\r\n            id\r\n            centerName\r\n          }\r\n          examSession{\r\n            id\r\n            exam{\r\n              id\r\n              examName\r\n            }\r\n            session{\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n       \r\n        }\r\n        scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n        }\r\n        }\r\n        }\r\n    }\r\n`;\r\n\r\nconst getCenterIDFromCenterCodeQuery = gql`\r\n  query getCenterIDFromCenterCodeQuery($centerCode: String!) {\r\n    centerByCode(centerCode: $centerCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterRegistrationIDsQuery = gql`\r\n  query getCenterRegistrationIDsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    centerRegistrationIDs(exam: $exam, center: $center, session: $session) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSeriesForResultsQuery = gql`\r\n  query centerExamSessionSeriesForResultsQuery($centerExamSession: String !) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n      }\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionForResultsQuery = gql`\r\n  query centerExamSessionForResultsQuery($id: ID !) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      center{\r\n                 id\r\n                 centerName\r\n                 centerCode\r\n               }\r\n               examSession{\r\n               exam{\r\n                 id\r\n                 examName\r\n               }\r\n               session{\r\n                 id\r\n                 sessionName\r\n               }}\r\n           centerExamSessionSeries{\r\n             id\r\n            series{\r\n              id\r\n              seriesName\r\n              seriesCode\r\n            }\r\n             registration{\r\n               id\r\n               candRegistrationNumber\r\n               candExamSecretCode\r\n               candidate{\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n            dateOfBirth\r\n            placeOfBirth\r\n            email\r\n            phoneNumb\r\n            gender{\r\n              id\r\n              genderName\r\n            }\r\n\r\n               }\r\n               scores{\r\n                 id\r\n                 subjectAve\r\n\r\n               }\r\n             }\r\n           }\r\n       \r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst centerExamSessionSeriesResultsQuery = gql`\r\n  query centerExamSessionSeriesResultsQuery($id: ID !) {\r\n    centerExamSessionSeries(id: $id) {\r\n      id\r\n      centerExamSession{\r\n                 id\r\n                center{\r\n                  id\r\n                  centerName\r\n                  centerCode\r\n                }\r\n               examSession{\r\n               exam{\r\n                 id\r\n                 examName\r\n               }\r\n               session{\r\n                 id\r\n                 sessionName\r\n               }\r\n               }}\r\n         \r\n          \r\n            series{\r\n              id\r\n              seriesName\r\n              seriesCode\r\n            }\r\n             registration{\r\n               id\r\n               candRegistrationNumber\r\n               candExamSecretCode\r\n               candidate{\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n            dateOfBirth\r\n            placeOfBirth\r\n            email\r\n            phoneNumb\r\n            gender{\r\n              id\r\n              genderName\r\n            }\r\n\r\n               }\r\n               scores{\r\n                 id\r\n                 subjectAve\r\n\r\n               }\r\n             }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateByCandCodeQuery = gql`\r\n  query getCandidateByCandCodeQuery($candCode: String!) {\r\n    getCandidateByCode(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      candCode\r\n      dateOfBirth\r\n      placeOfBirth\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllPhasesQuery = gql`\r\n  query getAllPhasesQuery {\r\n  phases(orderBy:phaseName_ASC) {\r\n    phaseName\r\n    phaseCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n  query getAllGendersQuery {\r\n    genders(orderBy: genderName_ASC) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n  query getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      series(orderBy: seriesName_ASC) {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfACenterExamSessionQuery = gql`\r\n  query getAllSeriesOfACenterExamSessionQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      centerExamSessionSeries{\r\n      series {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }}\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst getAllSeriesQuery = gql`\r\n  query getAllSeriesQuery {\r\n    serieses(orderBy: seriesName_ASC) {\r\n      id\r\n      seriesName\r\n      seriesCode\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n  query getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      subject(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n  query getAllSubjectsOfASeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      id\r\n      seriesName\r\n      subjectSeries {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubDivisionsQuery = gql`\r\n  query getAllSubDivisionsQuery {\r\n    subDivision(orderBy: subDivName_ASC) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centersPerTownQuery = gql`\r\n  query centersPerTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerNumber\r\n        centerSecretCode\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectTypesQuery = gql`\r\n  query getAllSubjectTypesQuery {\r\n    subjectTypes(orderBy: subjectTypeName_DESC) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterQuery = gql`\r\n  query getSingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleProfQuery = gql`\r\n  query getSingleProfQuery($authCode: String!) {\r\n   profByAuthCode(authCode:  $authCode) {\r\n     authCode\r\n      id\r\n      auth1stName\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst getSingleCenterByCodeQuery = gql`\r\n  query getSingleCenterByCodeQuery($centerSecretCode: String!) {\r\n    getCenterByCode(centerSecretCode:  $centerSecretCode) {\r\n      id\r\n      centerCode\r\n     \r\n    }\r\n  }\r\n`;\r\n\r\nconst getASingleCenterQuery = gql`\r\n  query getASingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      centerNumber\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionQuery = gql`\r\n  query getSingleCenterExamSessionQuery(\r\n    $center: CenterWhereUniqueInput!\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionsByCode(examSession: $examSession, center: $center) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksOfAnExamPhaseQuery = gql`\r\n  query getAllRanksOfAnExamPhaseQuery($id: ID!) {\r\n    phase(id: $id) {\r\n      id\r\n      phaseRank{\r\n             id\r\n          rankName\r\n          rankCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidateCountQuery = gql`\r\n  query getRegisteredCandidateCountQuery($id: ID!)\r\n {\r\n    registrationsConnection(id: $id) {\r\n     aggregate{\r\n       count\r\n     }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterExamSessionSeriesQuery = gql`\r\n  query getCenterExamSessionSeriesQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionSerieses(series: $series, centerExamSession: $centerExamSession) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExamSessionQuery = gql`\r\n  query getExamSessionQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    examSessions(session: $session, exam: $exam) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      dadName\r\n      momName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode  \r\n      dadName\r\n      momName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExaminerQuery = gql`\r\n  query singleExaminerQuery($id: ID!) {\r\n    examiner(id: $id) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCode\r\n      examinerEmail\r\n      examinerImage\r\n      examinerPhone\r\n      examinerMatricule\r\n      examinerCNI\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getScoreID = gql`\r\n  query getScoreID($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n  query getRegistrations($candExamSecretCode: String!) {\r\n    registration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      scores {\r\n        id\r\n        subject(orderBy: subjectName_ASC) {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n  query getSingleRegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleGenderQuery = gql`\r\n  query singleGenderQuery($id: ID!) {\r\n    gender(id: $id) {\r\n      genderName\r\n      genderCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSeriesQuery = gql`\r\n  query singleSeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      seriesName\r\n      seriesCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n  query singleCenterAdminQuery($id: ID!) {\r\n    centerAdmin(id: $id) {\r\n      centerAdminName\r\n      centerAdminCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst dataForAverage = gql`\r\n  query dataForAverage($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      subjectAve\r\n      coeff\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleDivisionQuery = gql`\r\n  query singleDivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleRankQuery = gql`\r\n  query singleRankQuery($id: ID!) {\r\n    rank(id: $id) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectQuery = gql`\r\n  query singleSubjectQuery($id: ID!) {\r\n    subject(id: $id) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSessionQuery = gql`\r\n  query singleSessionQuery($id: ID!) {\r\n    session(id: $id) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSubjectTypesQuery,\r\n  getAllGendersQuery,\r\n  getAllEducTypeQuery,\r\n  getAllRegionsOfACountryQuery,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsQuery,\r\n  getAllRanksQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getSingleRegionQuery,\r\n  getACenterAdminQuery,\r\n  getAllCenterAdminsQuery,\r\n  getAllSeriesQuery,\r\n  getAllSubDivisionsQuery,\r\n  getAllSubjectsOfAnEducTypeQuery,\r\n  getScoreID,\r\n  singleSeriesQuery,\r\n  getRegistrations,\r\n  singleSubjectQuery,\r\n  singleCandidateQuery1,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleCenterAdminQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  schoolDataQuery,\r\n  getAllCenterResultsQuery,\r\n  singleSessionQuery,\r\n  singleDivisionQuery,\r\n  singleSubDivisionQuery,\r\n  singleSubjectTypeQuery,\r\n  singleEducationTypeQuery,\r\n  singleRankQuery,\r\n  centerExamSessionSeriesForResultsQuery,\r\n  getAllCandidateRegistrationIDsQuery,\r\n  getCenterExamSessionSeriesQuery,\r\n  singleGenderQuery,\r\n  getExamSessionQuery,\r\n  getAllSeriesOfACenterExamSessionQuery,\r\n  getCenterResultsQuery,\r\n  getCandidateRegistrationIDQuery,\r\n  getCandidateRegistrationIDsQuery,\r\n  centerExamSessionForResultsQuery,\r\n  getCandidateIDQuery,\r\n  getASingleCenterQuery,\r\n  getRegisteredCandidateCountQuery,\r\n  centersPerTownQuery,\r\n  getSingleCenterQuery,\r\n  getCandidateResultsQuery,\r\n  getCenterRegistrationIDsQuery,\r\n  getCandidateByCandCodeQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getEachCandidateResultsQuery,\r\n  getCenterIDFromCenterCodeQuery,\r\n  getRegistrationIDFromRegNumberQuery,\r\n  centerExamSessionSeriesResultsQuery,\r\n  dataForAverage,\r\n  getAllCountrysRegionCreateQuery,\r\n  getAllPhasesQuery,\r\n  getAllRegionsQuery,\r\n  getAllCountrysQuery,\r\n  singleExaminerQuery,\r\n  getCESExaminerQuery,\r\n  getExaminerRegistrationQuery,\r\n  getSingleProfQuery,\r\n  getAllRanksOfAnExamPhaseQuery,\r\n  getASinglePhaseRankQuery,\r\n  meQuery,\r\n  getSingleCenterByCodeQuery\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledPage = styled.div`\r\npadding:0 1rem\r\n margin:0 auto;\r\n  display: grid;\r\n  grid-template-columns:1fr;\r\n  grid-auto-flow:row;\r\n  /* grid-row-gap:1rem; */\r\n  text-align: center;\r\n  width: 70vw;\r\n  min-width: 30rem;\r\n  \r\nbackground-color: ${props => props.theme.pureWhite};\r\nh4{\r\n  margin:0 auto;\r\n  margin-bottom:1rem ;\r\n  padding:0.5rem 1rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  font-weight: normal;\r\n  box-shadow: ${props => props.theme.formBS};\r\n  background:${props => props.theme.pureWhite};\r\nwidth:100%;\r\n  border-radius:0.5rem;\r\n  color:${props => props.theme.blues[2]};\r\n}\r\n.Form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n  form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst MiniStyledPage = styled.div`\r\n  display: grid;\r\n  padding:0 1rem;\r\n  margin:0 auto;\r\n  grid-template-columns:1fr;\r\n  grid-auto-flow:row;\r\n  \r\n  text-align: center;\r\n  width: 50vw;\r\n  min-width: 30rem;\r\n  background-color: ${props => props.theme.pureWhite};\r\n  \r\n  h4{\r\n    margin:0 auto;\r\n  margin-bottom:1rem ;\r\n  padding:0.5rem 1rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  font-weight: normal;\r\n  box-shadow: ${props => props.theme.formBS};\r\n  background:${props => props.theme.pureWhite};\r\nwidth:100%;\r\n  border-radius:0.5rem;\r\n  color:${props => props.theme.blues[2]};\r\n}\r\n  /* .Form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n  form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  } */\r\n`;\r\n\r\nconst MinimStyledPage = styled.div`\r\n  display: grid;\r\n   margin:0 auto;\r\n  \r\n  grid-template-columns:1fr;\r\n  grid-auto-flow:row;\r\n  text-align: center;\r\n  width: 30vw;\r\n  min-width: 25rem;\r\nbackground-color: ${props => props.theme.pureWhite};\r\nh4{\r\n  margin:0 auto;\r\n  margin-bottom:1rem ;\r\n  padding:0.5rem 1rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  font-weight: normal;\r\n  box-shadow: ${props => props.theme.formBS};\r\n  background:${props => props.theme.pureWhite};\r\nwidth:100%;\r\n  border-radius:0.5rem;\r\n  color:${props => props.theme.blues[2]};\r\n}\r\n  .Form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n  form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst BigStyledPage = styled.div`\r\n  display: grid;\r\n  padding:0 1rem;\r\n   margin:0 auto;\r\n  \r\n  grid-template-columns:1fr;\r\n  grid-auto-flow:row;\r\n  text-align: center;\r\n  width: 60vw;\r\n  min-width: 30rem;\r\n  \r\nbackground-color: ${props => props.theme.pureWhite};\r\n  h4{\r\n    margin:0 auto;\r\n  margin-bottom:1rem ;\r\n  padding:0.5rem 1rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  font-weight: normal;\r\n  box-shadow: ${props => props.theme.formBS};\r\n  background:${props => props.theme.pureWhite};\r\nwidth:100%;\r\n  border-radius:0.5rem;\r\n  color:${props => props.theme.blues[2]};\r\n}\r\n  .Form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n  fieldset {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst BiggestStyledPage = styled.div`\r\n  display: grid;\r\n  padding:0 1rem;\r\n   margin:0 auto;\r\n  \r\n  grid-template-columns:1fr;\r\n  text-align: center;\r\n  width: 90vw;\r\n  min-width: 30rem;\r\n\r\nbackground-color: ${props => props.theme.pureWhite};\r\nh4{\r\n  margin:0 auto;\r\n  margin-bottom:1rem ;\r\n  padding:0.5rem 1rem;\r\n  text-align: center;\r\n  font-size: 1.6rem;\r\n  font-weight: normal;\r\n  box-shadow: ${props => props.theme.formBS};\r\n  background:${props => props.theme.pureWhite};\r\nwidth:100%;\r\n  border-radius:0.5rem;\r\n  color:${props => props.theme.blues[2]};\r\n}\r\n  .Form {\r\n    justify-items: center;\r\n    align-items: center;\r\n  } \r\n  fieldset {\r\n    justify-items: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport { MinimStyledPage, MiniStyledPage, StyledPage, BigStyledPage, BiggestStyledPage };\r\n\r\n\r\n","import React from 'react'\r\nimport { MinimStyledPage } from '../styles/StyledPage'\r\nimport Error from '../ErrorMessage.js';\r\nimport { Formik, Form } from 'formik';\r\nimport { SygexInput, StyledForm, ButtonStyled, StyledButton } from '../utils/FormInputs'\r\nimport styled from 'styled-components';\r\nimport * as Yup from 'yup';\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { loginUserMutation } from '../queries&Mutations&Functions/Mutations'\r\nimport { meQuery } from '../queries&Mutations&Functions/Queries'\r\n\r\n\r\nconst InputGroup = styled.div`\r\n    display: flex;\r\n    flex-direction:column;\r\n    margin:0 1rem;\r\n   \r\n`;\r\nconst AllControls = styled.div`\r\n  display: flex;\r\nflex-direction:column;\r\n`;\r\n\r\nconst validationSchema = Yup\r\n    .object().shape({\r\n        email: Yup\r\n            .string()\r\n            .min(3, 'Email 3 characters au moins')\r\n            .required('Email Obligatoire')\r\n            .email('Email invalide'),\r\n\r\n        password: Yup\r\n            .string()\r\n            .required('Mont de passe Obligatoire')\r\n            .min(3, 'Mot de passe 3 characters au moins'),\r\n    });\r\n\r\n\r\n\r\nconst Login = () => {\r\n\r\n\r\n    const initialValues = {\r\n        email: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n\r\n    const [login, { loading, error }] = useMutation(loginUserMutation, {\r\n        refetchQueries: [{ query: meQuery }]\r\n    })\r\n\r\n    return (\r\n\r\n        <Formik\r\n            method=\"POST\"\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={async (values, actions, setSubmitting, resetForm) => {\r\n                const res = await login({\r\n                    variables: { ...values }\r\n                });\r\n                setTimeout(() => {\r\n                    console.log(JSON.stringify(values, null, 2));\r\n                    console.log(res);\r\n                    actions.resetForm(true);\r\n                    actions.setSubmitting(false);\r\n                }, 200);\r\n            }}>\r\n            {({ isSubmitting }) => {\r\n                return (\r\n                    <MinimStyledPage>\r\n                        <h4>Accedez a votre compte</h4>\r\n                        <Error error={error} />\r\n                        <StyledForm disabled={isSubmitting} aria-busy={isSubmitting} >\r\n                            <Form>\r\n                                <AllControls>\r\n                                    <InputGroup>\r\n\r\n                                        <SygexInput name=\"email\" type=\"text\" label=\"Email\" disabled={isSubmitting} />\r\n                                        <SygexInput name=\"password\" type=\"text\" label=\"Mot de passe\" disabled={isSubmitting} />\r\n\r\n                                    </InputGroup>\r\n                                    <ButtonStyled>\r\n                                        <StyledButton type=\"submit\" disabled={isSubmitting}>Valid{isSubmitting ? 'ation en cours' : 'er'}</StyledButton>\r\n                                    </ButtonStyled>\r\n                                </AllControls>\r\n                            </Form>\r\n                        </StyledForm>\r\n                    </MinimStyledPage>\r\n                )\r\n            }}\r\n        </Formik>\r\n    )\r\n}\r\nexport default Login","import React from 'react';\r\n\r\nimport { useField } from 'formik';\r\n\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst loading = keyframes`\r\n  from {\r\n    background-position: 0 0;\r\n    /* rotate: 0; */\r\n  }\r\n\r\n  to {\r\n    background-position: 100% 100%;\r\n    /* rotate: 360deg; */\r\n  }\r\n`;\r\n\r\n\r\nconst customStyle = {\r\n  control: (provided) => ({\r\n    ...provided,\r\n    fontFamily: 'Roboto Slab',\r\n    border: \"0px solid black\",\r\n    borderBottom: \"0.9px solid #0780b7\",\r\n    fontSize: '1.6rem',\r\n    outline: 'none',\r\n    backgroundColor: 'white',\r\n    color: '#000',\r\n    borderRadius: '0',\r\n    boxShadow: \"none\",\r\n    alignItems: \"center\",\r\n    '&:hover': {\r\n      borderBottom: ' 2px solid #d4351c',\r\n      borderRadius: '0',\r\n    }, // border style on hover\r\n    '&:focus': {\r\n      borderBottom: ' 2px solid #d4351c',\r\n      borderRadius: '0',\r\n    }, // border style on hover\r\n\r\n  }),\r\n  option: (provided) => ({\r\n    ...provided,\r\n    textAlign: 'left',\r\n\r\n  }),\r\n}\r\n\r\n\r\n\r\n\r\nconst StyledInput = styled.input`\r\n    padding-top:1rem;\r\n    /* display:block; */\r\n    margin-top:0.4rem;\r\n    font-size: 1.5rem;\r\n    border-style: none;\r\n    width:100%;\r\n    outline: none;\r\n    border-bottom: 0.09rem solid ${(props) => props.theme.blues[2]};\r\n     z-index:10;\r\n     font-family:\"Roboto Slab\";\r\n    \r\n     &:valid + label{\r\n      top:-.25rem;\r\n      font-size:1.1rem;\r\n      color:${props => props.theme.britishBlue};\r\n     }\r\n    &:focus,\r\n    &active {\r\n      outline: none; \r\n    border-bottom: 0.2rem solid ${(props) => props.theme.britishRed};\r\n    }\r\n    &:focus + label{\r\n      top:-.25rem;\r\n      font-size:1.1rem;\r\n      color:#aaa;\r\n    }\r\n   \r\n     \r\n      \r\n    `;\r\n\r\nconst InputGroup = styled.div`\r\nposition:relative;\r\n  `;\r\n\r\nconst StyledLabel = styled.label`\r\n    font-size: 1.5rem;\r\n    border-style: none;\r\n    position:absolute;\r\n    left:1rem;\r\n    top:1.5rem;\r\n    color: ${props => props.theme.greys[2]};\r\n    pointer-events:none;\r\n    transition: all 1s ease-out;\r\n    font-family:\"Roboto Slab\";\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n   margin-top:1rem;\r\n    font-size: 1.5rem;\r\n    border-style: none;\r\n     border-bottom: 0.09rem solid ${(props) => props.theme.blues[2]};\r\n     option {\r\n         background: white;\r\n         font-weight: 400;\r\n         display: flex;\r\n         white-space: pre;\r\n         min-height: 20px;\r\n         padding: 0px 2px 1px;\r\n         background: ${props => props.theme.blues[0]};\r\n         border-radius:0.5rem;\r\n       }\r\n    &:focus {\r\n      outline: none;\r\n      border-color: ${(props) => props.theme.britishRed};\r\n    }\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\npadding-top:0.2rem;\r\nfont-size:1.3rem;\r\ncolor: ${props => props.theme.britishRed};\r\n/* padding-left: 0.5rem; */\r\n`;\r\n\r\n\r\nconst StyledButton = styled.button`\r\n  background-color: ${props => props.theme.blues[2]};\r\n  color: ${props => props.theme.white};\r\n  border: 0;\r\n  border-radius: .5rem;\r\n  font-size: 3rem;\r\n  font-weight: 300;\r\n  line-height: 1.5rem;\r\n  text-shadow:3px 4px 5px #0000;\r\n  /* padding:0.7rem ; */\r\n  /* margin-bottom: 1rem auto; */\r\n  box-shadow: ${props => props.theme.bs2}\r\n  /* margin-bottom: 1.1rem; */\r\n  cursor: pointer;\r\n  /* &:hover {\r\n    background-color: ${props => props.theme.grey[10]};\r\n  }\r\n  &:disabled {\r\n    background-color: ${props => props.theme.grey[13]};\r\n  }  */\r\n  \r\n`;\r\n\r\nconst ButtonStyled = styled.div`\r\npadding-bottom: 0.5rem;\r\npadding-top: 1rem;\r\nbutton{\r\n    border-radius: 0.6rem;\r\n    font-size: 1.7rem;\r\n    font-weight:bold;\r\n    box-shadow:${props => props.theme.formBS};\r\n    border: 0.05rem solid ${props => props.theme.blues[2]};\r\n    color: ${ props => props.theme.blues[2]};\r\n    background: ${ props => props.theme.pureWhite};\r\n    cursor: pointer;\r\n    padding:  0.8rem;\r\n    outline: none;\r\n    &:hover {\r\n      \r\n    color: ${props => props.theme.blues[2]}\r\n    background-color: ${props => props.theme.sand};\r\n  }\r\n}\r\n`;\r\n\r\n\r\nconst StyledForm = styled.div`\r\nmargin: 0 2rem;\r\npadding:0.6rem;\r\nfont-size: 1.5rem;\r\nborder-radius: .5rem;\r\nborder: 0.09rem solid ${(props) => props.theme.blues[2]};\r\n/* border-top: 1.5rem solid ${ (props) => props.theme.blues[2]}; */\r\n/* border-left: 0.09rem solid ${ (props) => props.theme.blues[2]};\r\nborder-right: 0.09rem solid ${ (props) => props.theme.blues[2]};\r\nborder-bottom: 0.09rem solid ${ (props) => props.theme.blues[2]}; */\r\nbox-shadow: ${(props) => props.theme.formBS};\r\nmin-width: 20rem;\r\n\r\n\r\n&[disabled] {\r\n      opacity: 0.3;\r\n    }\r\n    &::before {\r\n      height: 0.3rem;\r\n      content: '';\r\n      display: block;\r\n      background-image: linear-gradient(to right, #0780b7 0%, #e2b04a 20%, #0780b7 100%);\r\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\r\n    }\r\n    &[aria-busy='true']::before {\r\n      background-size: 50% auto;\r\n      animation: ${loading} 0.5s linear infinite;\r\n    }\r\n\r\n`;\r\n\r\nconst SygexInput = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <InputGroup>\r\n      <StyledInput className=\"text-input\" {...field} {...props} required />\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n\r\n    </InputGroup>\r\n  );\r\n};\r\n\r\nconst SygexSelect = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      {/* <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel> */}\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport { customStyles, StyledLabel, StyledButton, StyledButtonBlue, customStyle, SygexSelect, ButtonStyled, SygexInput, StyledForm }","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"formik\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"styled-components\");","module.exports = require(\"yup\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}