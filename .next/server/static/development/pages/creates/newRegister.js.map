{"version":3,"file":"static\\development\\pages\\creates\\newRegister.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/newRegister.js","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Functions.jsx","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/registration/Registration.jsx","webpack:///./src/components/styles/Form.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React from 'react';\r\nimport Registration from '../../src/components/registration/Registration';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledRegion = styled.div`\r\n\t/* display: block; */\r\n\ttext-align: center;\r\n\tmargin: 0 auto;\r\n\twidth: 60vw;\r\n`;\r\n\r\nconst register = () => {\r\n\treturn (\r\n\t\t<StyledRegion>\r\n\t\t\t<Registration />\r\n\t\t</StyledRegion>\r\n\t);\r\n};\r\nexport default register;\r\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Error Msg!</strong>\n          {error.message.replace(\"GraphQL error: \", \"\")}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace(\"GraphQL error: \", \"\")}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {}\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object\n};\n\nexport default DisplayError;\n","import React from 'react';\r\n\r\nconst uniqueCodeGen = (keyLength) => {\r\n\tvar i,\r\n\t\tkey = '',\r\n\t\t//  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\t\tcharacters = 'abcdefghijklmnopqrstuvwxyzABCDEF@#$%&GHIJKLMNOPQRSTUVWXYZ0123456789';\r\n\r\n\tvar charactersLength = characters.length;\r\n\r\n\tfor (i = 0; i < keyLength; i++) {\r\n\t\tkey += characters.substr(Math.floor(Math.random() * charactersLength + 1), 1);\r\n\t}\r\n\r\n\treturn key;\r\n};\r\n\r\nconst objectFromCode = (codeValue) => {\r\n\tconst storedObject = {\r\n\t\tcandCode: `${codeValue}`\r\n\t};\r\n\treturn storedObject;\r\n};\r\n\r\nconst getSelectedObject = (dataSource, objectID) => {\r\n\t// 1 copy the data source\r\n\tif (dataSource.length > 0) {\r\n\t\tconst tempObjects = [ ...dataSource ];\r\n\t\t// get the object\r\n\t\tconst selectedObject = tempObjects.find((item) => item.id === objectID);\r\n\t\treturn selectedObject;\r\n\t}\r\n};\r\n\r\nexport { objectFromCode, uniqueCodeGen, getSelectedObject };\r\n","import gql from \"graphql-tag\";\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n  mutation signInCandidate($candCode: String!) {\r\n    candidateSignIn(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n    }\r\n  }\r\n`;\r\n//\r\n\r\nconst createRegistrationMutation = gql`\r\n  mutation createRegistrationMutation(\r\n    $exam: ExamWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n  ) {\r\n    createRegistration(exam: $exam, series: $series, session: $session, candidate: $candidate, center: $center) {\r\n      id\r\n      series {\r\n        seriesName\r\n      }\r\n      candidate {\r\n        id\r\n        cand1stName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterAdminMutation = gql`\r\n  mutation createCenterAdminMutation(\r\n    $exam: ExamWhereUniqueInput!\r\n    $rank: RankWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $authName: String!\r\n    $authCode: String!\r\n    $authCNI: String!\r\n    $authPhone: Int!\r\n    $authMatricule: String!\r\n  ) {\r\n    createCenterAdmin(\r\n      exam: $exam\r\n      rank: $rank\r\n      session: $session\r\n      center: $center\r\n      authCNI: $authCNI\r\n      authName: $authName\r\n      authCode: $authCode\r\n      authPhone: $authPhone\r\n      authMatricule: $authMatricule\r\n    ) {\r\n      authName\r\n      authCode\r\n      authPhone\r\n    }\r\n  }\r\n`;\r\n\r\nconst createDivisionMutation = gql`\r\n  mutation createDivisionMutation($divName: String!, $divCode: String!, $region: RegionCreateWithoutDivisionInput!) {\r\n    createDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n      id\r\n      divName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterMutation = gql`\r\n  mutation createCenterMutation($centerName: String!, $centerNumber: Int, $centerCode: String!, $town: TownWhereUniqueInput!) {\r\n    createCenter(centerName: $centerName, centerNumber: $centerNumber, centerCode: $centerCode, town: $town) {\r\n      id\r\n      centerName\r\n      centerCode\r\n      town {\r\n        townName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createSeriesMutation = gql`\r\n  mutation createSeriesMutation($seriesName: String!, $seriesCode: String!, $educationType: EducationTypeWhereUniqueInput!) {\r\n    createSeries(seriesName: $seriesName, seriesCode: $seriesCode, educationType: $educationType) {\r\n      id\r\n      seriesName\r\n    }\r\n  }\r\n`;\r\nconst createEducationTypeMutation = gql`\r\n  mutation createEducationTypeMutation($educationTypeName: String!, $exam: ExamWhereUniqueInput!, $educationTypeCode: String!) {\r\n    createEducationType(educationTypeName: $educationTypeName, exam: $exam, educationTypeCode: $educationTypeCode) {\r\n      id\r\n      educationTypeName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createTownMutation = gql`\r\n  mutation createTownMutation($townName: String!, $townCode: String!, $subDiv: SubDivisionWhereUniqueInput!) {\r\n    createTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n      id\r\n      townName\r\n      townCode\r\n      subDiv {\r\n        subDivName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewSubjectTypeMutation = gql`\r\n  mutation createNewSubjectTypeMutation($subjectTypeName: String!, $subjectTypeCode: String!) {\r\n    createSubjectType(subjectTypeName: $subjectTypeName, subjectTypeCode: $subjectTypeCode) {\r\n      id\r\n      subjectTypeName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewSubjectMutation = gql`\r\n  mutation createNewSubjectMutation($subjectName: String!, $subjectCode: String!, $subjectType: SubjectTypeWhereUniqueInput!) {\r\n    createSubject(subjectName: $subjectName, subjectCode: $subjectCode, subjectType: $subjectType) {\r\n      subjectCode\r\n      subjectName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createSubDivisionMutation = gql`\r\n  mutation createSubDivisionMutation($subDivName: String!, $subDivCode: String!, $division: DivisionWhereUniqueInput!) {\r\n    createSubDivision(subDivName: $subDivName, subDivCode: $subDivCode, division: $division) {\r\n      id\r\n      subDivName\r\n      subDivCode\r\n      division {\r\n        divName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewSessionMutation = gql`\r\n  mutation createNewSessionMutation($sessionName: String!, $sessionCode: String!) {\r\n    createSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n      id\r\n      sessionName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewRankMutation = gql`\r\n  mutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n    createRank(rankName: $rankName, rankCode: $rankCode) {\r\n      id\r\n      rankName\r\n    }\r\n  }\r\n`;\r\nconst createNewRegionMutation = gql`\r\n  mutation createNewRegionMutation($regName: String!, $regCode: String!) {\r\n    createRegion(regName: $regName, regCode: $regCode) {\r\n      id\r\n      regName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createExamMutation = gql`\r\n  mutation createExamMutation($examName: String!, $examCode: String!) {\r\n    createExam(examName: $examName, examCode: $examCode) {\r\n      id\r\n      examName\r\n    }\r\n  }\r\n`;\r\n\r\nconst registerSubjectSeriesMutation = gql`\r\n  mutation registerSubjectSeriesMutation($subject: SubjectWhereUniqueInput!, $series: SeriesWhereUniqueInput!) {\r\n    createSubjectSeries(subject: $subject, series: $series) {\r\n      id\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subject {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCandidateMutation = gql`\r\n  mutation createCandidateMutation(\r\n    $cand1stName: String!\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $candCode: String\r\n    $email: String!\r\n    $image: String!\r\n    $phoneNumb: Int\r\n    $placeOfBirth: String\r\n    $gender: GenderCreateWithoutCandidateInput!\r\n  ) {\r\n    createCandidate(\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      cand3rdName: $cand3rdName\r\n      candCode: $candCode\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      placeOfBirth: $placeOfBirth\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      candCode\r\n      image\r\n    }\r\n  }\r\n`;\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n  mutation updateSubDivisionMutation($id: ID!, $subDivName: String, $subDivCode: String) {\r\n    updateSubDivision(id: $id, subDivName: $subDivName, subDivCode: $subDivCode) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateCenterMutation = gql`\r\n  mutation updateCenterMutation($id: ID!, $centerName: String, $centerCode: String) {\r\n    updateCenter(id: $id, centerName: $centerName, centerCode: $centerCode) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateTownMutation = gql`\r\n  mutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n    updateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateExamMutation = gql`\r\n  mutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n    updateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateCandidateMutation = gql`\r\n  mutation updateCandidateMutation(\r\n    $id: ID!\r\n    $cand1stName: String\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $candCode: String\r\n    $email: String\r\n    $image: String\r\n    $phoneNumb: Int\r\n    $placeOfBirth: String\r\n  ) {\r\n    updateCandidate(\r\n      id: $id\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      cand3rdName: $cand3rdName\r\n      candCode: $candCode\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      placeOfBirth: $placeOfBirth\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      image\r\n    }\r\n  }\r\n`;\r\n\r\n////**************Update mutations */\r\n\r\nexport {\r\n  createCandidateMutation,\r\n  createNewSubjectMutation,\r\n  createNewSubjectTypeMutation,\r\n  createTownMutation,\r\n  createCenterAdminMutation,\r\n  createDivisionMutation,\r\n  createRegistrationMutation,\r\n  createCenterMutation,\r\n  createEducationTypeMutation,\r\n  createSeriesMutation,\r\n  createSubDivisionMutation,\r\n  createNewSessionMutation,\r\n  createNewRankMutation,\r\n  createNewRegionMutation,\r\n  createExamMutation,\r\n  registerSubjectSeriesMutation,\r\n  updateCenterMutation,\r\n  updateTownMutation,\r\n  updateExamMutation,\r\n  updateSubDivisionMutation,\r\n  updateCandidateMutation,\r\n  signInCandidate\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nconst getACenterAdminQuery = gql`\r\n  query getACenterAdminQuery($authCode: String!) {\r\n    centerAdminSignIn(authCode: $authCode) {\r\n      id\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n  query getAllGendersQuery {\r\n    genders(orderBy: genderName_ASC) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n  query getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      series(orderBy: seriesName_ASC) {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducTypesOfAnExam = gql`\r\n  query getAllEducTypesOfAnExam($id: ID!) {\r\n    exam(id: $id) {\r\n      id\r\n      examName\r\n      educationType(orderBy: educationTypeName_ASC) {\r\n        educationTypeName\r\n        educationTypeCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n  query getSubjectsOfASeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      seriesName\r\n      id\r\n      subjectSeries {\r\n        subject {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectTypeQuery = gql`\r\n  query getAllSubjectTypeQuery {\r\n    subjectTypes(orderBy: subjectTypeName_DESC) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      gender {\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      gender {\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n  query singleCenterAdminQuery($id: ID!) {\r\n    centerAdmin(id: $id) {\r\n      centerAdminName\r\n      centerAdminCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSubjectTypeQuery,\r\n  getAllGendersQuery,\r\n  getAllRegionsQuery,\r\n  getAllEducTypeQuery,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsQuery,\r\n  getAllRanksQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getACenterAdminQuery,\r\n  singleCandidateQuery1,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleCenterAdminQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  singleSubDivisionQuery\r\n};\r\n","import React, {Component} from \"react\";\r\nimport {Mutation, Query} from \"react-apollo\";\r\nimport Form from \"../styles/Form\";\r\nimport Error from \"../ErrorMessage\";\r\nimport styled from \"styled-components\";\r\nimport {createRegistrationMutation} from '../queries&Mutations&Functions/Mutations'\r\nimport {getSelectedObject} from '../queries&Mutations&Functions/Functions'\r\nimport {\r\n  getAllRegionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getAllExamsQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllSessionsQuery,\r\n\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\n\r\n\r\nconst StyledDivision = styled.div `\r\n  display: grid;\r\n  grid-template-columns:repeat(2, 1fr);\r\n  grid-gap:2rem;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  width: 55vw;\r\n\r\n`;\r\n\r\nconst CenterSelect = styled.div `\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  /* min-width: 40rem; */\r\n`;\r\n\r\nconst OtherSelect = styled.div `\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  /* min-width: 40rem; */\r\n`;\r\n\r\n\r\n\r\nclass Registration extends Component {\r\n    state = {\r\n         candCode: \"12mn\",\r\n        divisionID: \"12\",\r\n        subDivisionID: \"12\",\r\n        regionID: \"12\",\r\n        centerID: \"12\",\r\n        townID: \"12\",\r\n        sessionID: \"12\",\r\n        seriesID: \"12\",\r\n        examID: \"12\",\r\n        educTypeID: \"12\",\r\n        exam: \"\",\r\n        series: \"\",\r\n        session: \"\",\r\n        center: \"\",\r\n        candExamSession:\"\",\r\n        candidate: \"\",\r\n        subjects: \"\"\r\n     \r\n    };\r\n\r\n    handleChange = e => {\r\n        const {name, value, type} = e.target;\r\n        const val = type === \"number\"? parseInt(value): value;\r\n        this.setState({[name]: val});\r\n    };\r\n\r\n\r\n    \r\n    resetForm=()=>{\r\n        this.setState({candCode: \"\"})\r\n    }\r\n       \r\n    // getSelectedRegion = dataSource => {\r\n    //     // 1 copy the data source\r\n    //     if (dataSource.length > 0) {\r\n    //         const tempRegions = [...dataSource];\r\n    //         // get the selected region object\r\n    //         const selectedRegion = tempRegions.find(item => item.id === this.state.regionID);\r\n    //         console.log(\"getting selected region\");\r\n    //         console.log(selectedRegion);\r\n    //         return selectedRegion;\r\n    //     }\r\n    // };\r\n    // getSelectedDivision = dataSource => {\r\n    //     // 1 copy the data source\r\n    //     if (dataSource.length > 0) {\r\n    //         const tempDivisions = [...dataSource];\r\n    //         // get the selected division object\r\n    //         const selectedDivision = tempDivisions.find(item => item.id === this.state.divisionID);\r\n    //         console.log(selectedDivision);\r\n    //         return selectedDivision;\r\n    //     }\r\n    // };\r\n\r\n    \r\n    getSelectedSubDivision = (dataSource) => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempSubDivisions = [...dataSource];\r\n            // get the selected division object\r\n            const selectedSubDivision = tempSubDivisions.find(item => item.id === this.state.subDivisionID);\r\n\r\n            console.log(selectedSubDivision);\r\n            return selectedSubDivision;\r\n        }\r\n    };\r\n\r\n    getSelectedTown = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempTown = [...dataSource];\r\n            // get the selected division object\r\n            const selectedTown = tempTown.find(item => item.id === this.state.townID);\r\n\r\n            console.log(selectedTown);\r\n            return selectedTown;\r\n        }\r\n    };\r\n\r\n      getSelectedCenter = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempCenter = [...dataSource];\r\n            // get the selected division object\r\n            const selectedCenter = tempCenter.find(item => item.id === this.state.centerID);\r\n\r\n            console.log(selectedCenter);\r\n            return selectedCenter;\r\n        }\r\n    };\r\n    getSelectedExam = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempExam = [...dataSource];\r\n            // get the selected division object\r\n            const selectedExam = tempExam.find(item => item.id === this.state.examID);\r\n\r\n            console.log(selectedExam);\r\n            return selectedExam;\r\n        }\r\n    };\r\n    getSelectedSession = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempSession = [...dataSource];\r\n            // get the selected division object\r\n            const selectedSession = tempSession.find(item => item.id === this.state.sessionID);\r\n\r\n            console.log(selectedSession);\r\n            return selectedSession;\r\n        }\r\n    };\r\n\r\n    setSubjects=(subjectList)=>{\r\n        this.setState({subjects:subjectList })\r\n    }\r\n\r\n    getSelectedSeries = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n          const tempSeries = [...dataSource];\r\n          // get the selected division object\r\n          const selectedSeries = tempSeries.find(item => item.id === this.state.seriesID);\r\n    \r\n          console.log(selectedSeries);\r\n          return selectedSeries;\r\n        }\r\n      };\r\n    \r\n     \r\n      getSelectedEducType = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n          const tempEducType = [...dataSource];\r\n          // get the selected division object\r\n          const selectedEducType = tempEducType.find(item => item.id === this.state.educTypeID);\r\n    \r\n          console.log(selectedEducType);\r\n          return selectedEducType;\r\n        }\r\n      };\r\n    //   getCandExamSession = () => {\r\n    //     const candExamSession = `${this.state.candCode}-${this.state.examID}-${this.state.sessionID}`\r\n    //     console.log(candExamSession)\r\n    //     return candExamSession;\r\n    // }\r\n\r\n    makeCandVariableObject = (candCodeValue) => {\r\n        const storedCandidate = {\r\n            \"candCode\": `${candCodeValue}`\r\n        }\r\n        return storedCandidate\r\n    }\r\n\r\n    getSelectedCandidate = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempCandidates = [...dataSource];\r\n            // get the selected region object\r\n            const selectedCandidate = tempCandidates.find(item => item.candCode === this.state.candCode);\r\n            console.log(\"getting selected region\");\r\n            console.log(selectedCandidate);\r\n            return selectedCandidate;\r\n        }\r\n    };\r\n\r\n    \r\n       \r\n    render() {\r\nconst { regionID,divisionID, subDivisionID,townID,educTypeID, centerID, examID, sessionID, seriesID, candCode}= this.state\r\n        return (\r\n            <Query query={getAllRegionsQuery}>\r\n                {({data, loading, error}) => {\r\n                    {\r\n                        loading && <p>Loading...</p>;\r\n                    }\r\n                    {\r\n                        error && <Error error={error}/>;\r\n                    }\r\n                    const {regions} = data;\r\n                    const anyRegion = regions[0];\r\n     //prepare data for the region select options\r\n     const regionsOptions = regions && regions.map(item => (\r\n                        <option value={item.id} key={item.id}>\r\n                            {item.regName}\r\n                        </option>\r\n                    ));\r\n\r\n //*******important function'stripping off __typename')\r\n const refinedRegions = regions.map(({ __typename, ...others }) => others);\r\n\r\n                    return (\r\n                        <Query\r\n                            query={getDivisionsOfARegionQuery}\r\n                            variables={regions && (getSelectedObject(regions,regionID) || anyRegion)}>\r\n                            {({data, loading, error}) => {\r\n                                {\r\n                                    loading && <p>Loading...</p>;\r\n                                }\r\n                                {\r\n                                    error && <Error error={error}/>;\r\n                                }\r\n\r\n                                const {region: province} = data;\r\n                                const {division} = province;\r\n                                const anyDivision = division[0];\r\n\r\n                                const divisionsOptions =division && division.map(item => (\r\n                                    <option value={item.id} key={item.id}>\r\n                                        {item.divName}\r\n                                    </option>\r\n                                ));\r\n\r\n                         \r\n                                return (\r\n                                    <Query\r\n                                        query={getSubDivisionsOfADivisionQuery}\r\n                                        variables={division && (getSelectedObject(division, divisionID) || anyDivision)}>\r\n                                        {({data, loading, error}) => {\r\n                                            {\r\n                                                loading && <p>Loading...</p>;\r\n                                            }\r\n                                            {\r\n                                                error && <Error error={error}/>;\r\n                                            }\r\n                                          const {division} = data;\r\n                                            const {subDivision:arrondissement } = division\r\n                                        console.log(arrondissement)\r\n                                            const subDivisionsOptions =arrondissement && arrondissement.map(item => (\r\n                                                    <option value={item.id} key={item.id}>\r\n                                                        {item.subDivName}\r\n                                                    </option>\r\n                                                ));  \r\n\r\n\r\n                                            return (\r\n                                                <Query\r\n                                                    query={getTownsOfASubDivisionQuery}\r\n                                                    variables={arrondissement && getSelectedObject(arrondissement, subDivisionID)  }\r\n                                                    >\r\n                                                    {({data, loading, error}) => {\r\n                                                        {\r\n                                                            loading && <p>Loding...</p>;\r\n                                                        }\r\n                                                        {\r\n                                                            error && <Error error={error}/>;\r\n                                                        }\r\n\r\n                                                        console.log(\"these are the towns of the selected Sub division\");\r\n                                                      \r\n                                                       const {subDivision: district} = data; \r\n                                                       console.log(data)\r\n                                                       const {  town} = {...district}\r\n                                                       console.log(town)\r\n                                                                                            \r\n                                                return (\r\n                                                <Query\r\n                                                    query={getCentersOfATownQuery}\r\n                                                    variables={town && getSelectedObject(town, townID)  }\r\n\r\n                                                     >\r\n                                                    {({data, loading, error}) => {\r\n                                                        {\r\n                                                            loading && <p>Loding...</p>;\r\n                                                        }\r\n                                                        {\r\n                                                            error && <Error error={error}/>;\r\n                                                        }\r\n                                                         const { town: ville} =data\r\n                                                          const theTowns= {...ville}\r\n                                                          const { center}= theTowns\r\n                                                          console.log(center) \r\n                                          const refinedCenter = center && center.map(({__typename, centerName,...others})=> others)\r\n                                                                    return(                            \r\n                                                <Query query={getAllExamsQuery}>\r\n                                                    {({ data, loading, error }) => {\r\n                                                    {\r\n                                                        loading && <p>loading...</p>;\r\n                                                    }\r\n                                                    {\r\n                                                        error && <Error error={error} />;\r\n                                                    }\r\n\r\n                                                   const { exams } = data;\r\n                                                    console.log(exams);\r\n                                                   \r\n  const refinedExams = exams && exams.map(({__typename, examName, ...others})=>others)\r\n                                                    return (\r\n                                                        <Query query={getAllEducTypesOfAnExam}\r\n                                                         variables={exams && getSelectedObject(exams, examID)}>\r\n                                                        {({ data, loading, error }) => {\r\n                                                            {\r\n                                                            loading && <p>loading...</p>;\r\n                                                            }\r\n                                                            {\r\n                                                            error && <Error error={error} />;\r\n                                                            }\r\n                                                            console.log(data);\r\n                                                            const { exam } = data;\r\n                                                            const educTypeList = { ...exam };\r\n                                                            const { educationType } = educTypeList;\r\n                                                             console.log(educationType);\r\n                                                            const educTypeOptions =\r\n                                                            educationType &&\r\n                                                            educationType.map(item => (\r\n                                                                <option key={item.id} value={item.id}>\r\n                                                                {item.educationTypeName}\r\n                                                                </option>\r\n                                                            )); \r\n\r\n                                                            return (\r\n                                                            <Query\r\n                                                                query={getAllSeriesOfAnEducationTypeQuery}\r\n                                                                variables={educationType && getSelectedObject(educationType, educTypeID)}\r\n                                                            >\r\n                                                                {({ data, loading, error }) => {\r\n                                                                {\r\n                                                                    loading && <p>loading...</p>;\r\n                                                                }\r\n                                                                {\r\n                                                                    error && <Error error={error} />;\r\n                                                                }\r\n                                                                console.log(data);\r\n\r\n                                                                const { educationType } = data;\r\n\r\n                                                                const seriesEducType = { ...educationType };\r\n                                                                const { series } = seriesEducType;\r\n                                                                console.log(series);\r\n\r\n                                                                const refinedSeries = series && series.map(({ __typename, seriesName, ...others }) => others);\r\n                                                                const seriesOptions =\r\n                                                                    series &&\r\n                                                                    series.map(item => (\r\n                                                                    <option key={item.id} value={item.id}>\r\n                                                                        {item.seriesName}\r\n                                                                    </option>\r\n                                                                    )); \r\n                                                                  return (\r\n                       \r\n                                                            <Query query={getAllSessionsQuery}>\r\n                                                                {({data, loading, error}) => {\r\n                                                                  {\r\n                                                                    loading && <p>loading...</p>;\r\n                                                                }\r\n                                                                {\r\n                                                                    error && <Error error={error}/>\r\n                                                                }\r\n\r\n                                                                const {sessions} = data;\r\n                                                                const refinedSessions =sessions && sessions.map(({__typename, sessionName,...others})=>others)\r\n                                                                               return (\r\n                                                                                    <Mutation\r\n                                                                                        mutation={createRegistrationMutation}\r\n                                                                                        variables={{\r\n                                                                                            ...this.state,\r\n                                                                                         series: series && getSelectedObject(refinedSeries,seriesID),\r\n                                                                                         exam: exams && getSelectedObject(refinedExams,examID),\r\n                                                                                         session: sessions && getSelectedObject(refinedSessions,sessionID),\r\n                                                                                         center: center && getSelectedObject(refinedCenter,centerID),\r\n                                                                                         candidate: this.makeCandVariableObject(this.state.candCode),\r\n\r\n                                                                                    }}>\r\n                                                                                        {(createCenterAdmin, {loading, error}) => (\r\n                                                                                          <Form\r\n                                                                                                    onSubmit={async e => {\r\n                                                                                                    e.preventDefault();\r\n                                                                                                    const res = await createCenterAdmin();\r\n                                                                                                    console.log(res);\r\n                                                                                                    this.resetForm()\r\n                                                                                                }}>\r\n                                                                                                    <h4>Inscription a l'Examen</h4>\r\n                                                                                                    <Error error={error}/>\r\n                                                                                                    <fieldset disabled={loading} aria-busy={loading}>\r\n                                                                                            <StyledDivision>\r\n                                                                                                    <CenterSelect>\r\n                                                                                                  <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"regionID\"\r\n                                                                                                            name=\"regionID\"\r\n                                                                                                            placeholder=\"select a region\"\r\n                                                                                                            value={this.state.regionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez une region</option>\r\n                                                                                                            {regionsOptions }\r\n                                                                                                        </select>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"divisionID\"\r\n                                                                                                            name=\"divisionID\"\r\n                                                                                                            value={this.state.divisionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez un departement</option>\r\n                                                                                                            {division && divisionsOptions }\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"subDivisionID\"\r\n                                                                                                            name=\"subDivisionID\"\r\n                                                                                                            value={this.state.subDivisionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>choisissez un Arrondissement</option>\r\n                                                                                                            {arrondissement && subDivisionsOptions}\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"townID\"\r\n                                                                                                            name=\"townID\"\r\n                                                                                                            value={this.state.townID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>choisissez une Ville</option>\r\n                                                                                                           {town && town.map(item=>(\r\n                                                                                                            <option key={item.id} value={item.id} >\r\n                                                                                                              {item.townName}  </option>\r\n                                                                                                          ))}\r\n\r\n\r\n                                                                                                        </select>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"centerD\"\r\n                                                                                                            name=\"centerID\"\r\n                                                                                                            value={this.state.centerID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            \r\n                                                                                                              <option>Choisissez un Centre d'Examen</option>\r\n                                                                                                              {center && center.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>\r\n                                                                                                                {item.centerName}</option>))  } \r\n                                                                                                        </select>\r\n    \r\n                                                                                                        </CenterSelect>\r\n                                                                                                        <OtherSelect>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"examID\"\r\n                                                                                                            name=\"examID\"\r\n                                                                                                            value={this.state.examID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n \r\n                                                                                                            <option>Choisissez un Examen</option>\r\n                                                                                                              {exams && exams.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>{item.examName}</option>))  }\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"educTypeID\"\r\n                                                                                                            name=\"educTypeID\"\r\n                                                                                                            value={this.state.educTypeID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n \r\n                                                                                                            <option>Choisissez un Type D'enseignement</option>\r\n                                                                                                            {educTypeOptions}\r\n                                                                                                             \r\n                                                                                                          </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"seriesID\"\r\n                                                                                                            name=\"seriesID\"\r\n                                                                                                            value={this.state.seriesID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n \r\n                                                                                                            <option>Choisissez une Serie</option>\r\n                                                                                                              {seriesOptions}\r\n                                                                                                        </select>\r\n                                                                                                      \r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"sessionID\"\r\n                                                                                                            name=\"sessionID\"\r\n                                                                                                            value={this.state.sessionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez la Session</option>\r\n                                                                                                              {sessions && sessions.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>{item.sessionName}</option>))  }\r\n                                                                                                        </select>\r\n                                                                                                     \r\n                                                                                                            <input\r\n                                                                                                               type=\"text\"\r\n                                                                                                               id=\"candCode\"\r\n                                                                                                               name=\"candCode\"\r\n                                                                                                               placeholder=\"Code Candidat\"\r\n                                                                                                               value={this.state.candCode}\r\n                                                                                                               onChange={this.handleChange}\r\n                                                                                                               required/>\r\n                                                                                                        </OtherSelect>\r\n                                                                                                       \r\n                                                                                                        <div className=\"submitButton\">\r\n                                                                                                            <button type=\"submit\">Valid{loading? \"ation en cours\" : \"er\"}</button>\r\n                                                                                                        </div>\r\n                                                                                            </StyledDivision>\r\n                                                                                                    </fieldset>\r\n                                                                                                </Form>\r\n                                                                                        )}\r\n                                                                                    </Mutation>\r\n                                                                               \r\n                                                                        );\r\n                                                                      }\r\n                                                                    }\r\n                                                                    </Query>\r\n                                                                        );\r\n                                                                      }\r\n                                                                    }\r\n                                                                    </Query>\r\n                                                                );\r\n                                                                }}\r\n                                                            </Query>\r\n                                                                );\r\n                                                                }}\r\n                                                            </Query>\r\n                                                        );\r\n                                                    }}\r\n                                                </Query>\r\n                                            );\r\n                                        }}\r\n                                    </Query>\r\n                                          \r\n                                );\r\n                            }}\r\n                        </Query>\r\n                                          \r\n                                );\r\n                            }}\r\n                        </Query>\r\n                    );\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Registration;","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05); */\n  background: ${(props) => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.2rem;\n  line-height: 1.2;\n  font-weight: 100;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.3rem;\n    border-style: none;\n    border-bottom: 1px solid ${(props) => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${(props) => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${(props) => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    font-size: 1.3rem;\n    font-weight: 200;\n    border-radius:7px;\n    margin-top: 1rem;\n    padding: .8rem .8rem;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .8px solid ${(props) => props.theme.lightGrey};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    /* grid-template-columns: repeat(auto-fit, -ms-content-zoom-limit-max(200px,1fr)); */\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${(props) => props.theme.bs};\n\n    &[disabled] {\n      opacity: 0.3;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AAEA;AACA;AASA;AAqBA;AA8BA;AASA;AAaA;AAQA;AASA;AAaA;AASA;AASA;AAaA;AASA;AAQA;AASA;AASA;AAmBA;AAkCA;AACA;AACA;AAUA;AAUA;AAUA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtRA;AAEA;AASA;AASA;AAUA;AAUA;AAUA;AAUA;AAcA;AAcA;AAUA;AASA;AASA;AAcA;AAcA;AAeA;AAcA;AAcA;AASA;AAUA;AACA;AAiBA;AAUA;AAUA;AAUA;AAgBA;AAmBA;AAmBA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/TA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AACA;AAQA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAoBA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAMA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AAUA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAAA;AASA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AARA;AAWA;AACA;AAZA;AAAA;AACA;AAYA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AACA;AAOA;AACA;AATA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AASA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AACA;AAQA;AACA;AAVA;AAWA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAPA;AACA;AAUA;AACA;AAZA;AAaA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AASA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AACA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzIA;AAkJA;AAIA;AAIA;AAGA;AAGA;AAGA;AAIA;AAIA;AAGA;AAGA;;;;AA9hBA;AACA;AAgiBA;;;;;;;;;;;;ACjlBA;AAAA;AAAA;AAAA;AAEA;AAYA;AAAA;AAAA;AAAA;AAEA;AAAA;AAoBA;AAAA;AAGA;AAAA;AAMA;AAAA;AAcA;AAAA;AAOA;AAAA;AAmBA;;;;;;;;;;;;;;;;;;;;;;;ACrFA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}