{"version":3,"file":"static\\development\\pages\\creates\\newTown.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/newTown.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Functions.jsx","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/styles/Form.js","webpack:///./src/components/town/CreateTown.jsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CreateTown from \"../../src/components/town/CreateTown\";\r\n\r\nconst DivStyled = styled.div`\r\n  display: block;\r\n  margin: 0 auto;\r\n  max-width: 40vw;\r\n`;\r\nconst newTown = props => {\r\n  return (\r\n    <DivStyled>\r\n      <CreateTown />\r\n    </DivStyled>\r\n  );\r\n};\r\nexport default newTown;\r\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Error Msg!</strong>\n          {error.message.replace(\"GraphQL error: \", \"\")}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace(\"GraphQL error: \", \"\")}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {}\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object\n};\n\nexport default DisplayError;\n","import React from 'react';\r\n\r\nconst uniqueCodeGen = (keyLength) => {\r\n\tvar i,\r\n\t\tkey = '',\r\n\t\t//  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\t\tcharacters = 'abcdefghijklmnopqrstuvwxyzABCDEF@#$%&GHIJKLMNOPQRSTUVWXYZ0123456789';\r\n\r\n\tvar charactersLength = characters.length;\r\n\r\n\tfor (i = 0; i < keyLength; i++) {\r\n\t\tkey += characters.substr(Math.floor(Math.random() * charactersLength + 1), 1);\r\n\t}\r\n\r\n\treturn key;\r\n};\r\n\r\nconst objectFromCode = (codeValue) => {\r\n\tconst storedObject = {\r\n\t\tcandCode: `${codeValue}`\r\n\t};\r\n\treturn storedObject;\r\n};\r\n\r\nconst getSelectedObject = (dataSource, objectID) => {\r\n\t// 1 copy the data source\r\n\tif (dataSource.length > 0) {\r\n\t\tconst tempObjects = [ ...dataSource ];\r\n\t\t// get the object\r\n\t\tconst selectedObject = tempObjects.find((item) => item.id === objectID);\r\n\t\treturn selectedObject;\r\n\t}\r\n};\r\n\r\nexport { objectFromCode, uniqueCodeGen, getSelectedObject };\r\n","import gql from 'graphql-tag';\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n\tmutation signInCandidate($candCode: String!) {\r\n\t\tcandidateSignIn(candCode: $candCode) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t}\r\n\t}\r\n`;\r\n//\r\n\r\nconst createNewReportMutation = gql`\r\n\tmutation createNewReportMutation(\r\n\t\t$reportImage: String!\r\n\t\t$reportName: String!\r\n\t\t$centerAdmin: CenterAdminWhereUniqueInput!\r\n\t) {\r\n\t\tcreateReport(reportImage: $reportImage, reportName: $reportName, centerAdmin: $centerAdmin) {\r\n\t\t\tid\r\n\t\t\treportName\r\n\t\t\treportImage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createRegistrationMutation = gql`\r\n\tmutation createRegistrationMutation(\r\n\t\t$exam: ExamWhereUniqueInput!\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$candidate: CandidateWhereUniqueInput!\r\n\t\t$session: SessionWhereUniqueInput!\r\n\t\t$center: CenterWhereUniqueInput!\r\n\t) {\r\n\t\tcreateRegistration(exam: $exam, series: $series, session: $session, candidate: $candidate, center: $center) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tseriesName\r\n\t\t\t}\r\n\t\t\tcandidate {\r\n\t\t\t\tid\r\n\t\t\t\tcand1stName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterAdminMutation = gql`\r\n\tmutation createCenterAdminMutation(\r\n\t\t$exam: ExamWhereUniqueInput!\r\n\t\t$rank: RankWhereUniqueInput!\r\n\t\t$session: SessionWhereUniqueInput!\r\n\t\t$center: CenterWhereUniqueInput!\r\n\t\t$authName: String!\r\n\t\t$authCode: String!\r\n\t\t$authCNI: String!\r\n\t\t$authPhone: Int!\r\n\t\t$authMatricule: String!\r\n\t) {\r\n\t\tcreateCenterAdmin(\r\n\t\t\texam: $exam\r\n\t\t\trank: $rank\r\n\t\t\tsession: $session\r\n\t\t\tcenter: $center\r\n\t\t\tauthCNI: $authCNI\r\n\t\t\tauthName: $authName\r\n\t\t\tauthCode: $authCode\r\n\t\t\tauthPhone: $authPhone\r\n\t\t\tauthMatricule: $authMatricule\r\n\t\t) {\r\n\t\t\tauthName\r\n\t\t\tauthCode\r\n\t\t\tauthPhone\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createDivisionMutation = gql`\r\n\tmutation createDivisionMutation($divName: String!, $divCode: String!, $region: RegionCreateWithoutDivisionInput!) {\r\n\t\tcreateDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n\t\t\tid\r\n\t\t\tdivName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterMutation = gql`\r\n\tmutation createCenterMutation(\r\n\t\t$centerName: String!\r\n\t\t$centerNumber: Int\r\n\t\t$centerCode: String!\r\n\t\t$town: TownWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCenter(centerName: $centerName, centerNumber: $centerNumber, centerCode: $centerCode, town: $town) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t\ttown {\r\n\t\t\t\ttownName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSeriesMutation = gql`\r\n\tmutation createSeriesMutation(\r\n\t\t$seriesName: String!\r\n\t\t$seriesCode: String!\r\n\t\t$educationType: EducationTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSeries(seriesName: $seriesName, seriesCode: $seriesCode, educationType: $educationType) {\r\n\t\t\tid\r\n\t\t\tseriesName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createEducationTypeMutation = gql`\r\n\tmutation createEducationTypeMutation(\r\n\t\t$educationTypeName: String!\r\n\t\t$exam: ExamWhereUniqueInput!\r\n\t\t$educationTypeCode: String!\r\n\t) {\r\n\t\tcreateEducationType(educationTypeName: $educationTypeName, exam: $exam, educationTypeCode: $educationTypeCode) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createTownMutation = gql`\r\n\tmutation createTownMutation($townName: String!, $townCode: String!, $subDiv: SubDivisionWhereUniqueInput!) {\r\n\t\tcreateTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n\t\t\tid\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tsubDiv {\r\n\t\t\t\tsubDivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectTypeMutation = gql`\r\n\tmutation createNewSubjectTypeMutation($subjectTypeName: String!, $subjectTypeCode: String!) {\r\n\t\tcreateSubjectType(subjectTypeName: $subjectTypeName, subjectTypeCode: $subjectTypeCode) {\r\n\t\t\tid\r\n\t\t\tsubjectTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectMutation = gql`\r\n\tmutation createNewSubjectMutation(\r\n\t\t$subjectName: String!\r\n\t\t$subjectCode: String!\r\n\t\t$subjectType: SubjectTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubject(subjectName: $subjectName, subjectCode: $subjectCode, subjectType: $subjectType) {\r\n\t\t\tsubjectCode\r\n\t\t\tsubjectName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSubDivisionMutation = gql`\r\n\tmutation createSubDivisionMutation(\r\n\t\t$subDivName: String!\r\n\t\t$subDivCode: String!\r\n\t\t$division: DivisionWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubDivision(subDivName: $subDivName, subDivCode: $subDivCode, division: $division) {\r\n\t\t\tid\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tdivision {\r\n\t\t\t\tdivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSessionMutation = gql`\r\n\tmutation createNewSessionMutation($sessionName: String!, $sessionCode: String!) {\r\n\t\tcreateSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n\t\t\tid\r\n\t\t\tsessionName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewRankMutation = gql`\r\n\tmutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n\t\tcreateRank(rankName: $rankName, rankCode: $rankCode) {\r\n\t\t\tid\r\n\t\t\trankName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createNewRegionMutation = gql`\r\n\tmutation createNewRegionMutation($regName: String!, $regCode: String!) {\r\n\t\tcreateRegion(regName: $regName, regCode: $regCode) {\r\n\t\t\tid\r\n\t\t\tregName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createExamMutation = gql`\r\n\tmutation createExamMutation($examName: String!, $examCode: String!) {\r\n\t\tcreateExam(examName: $examName, examCode: $examCode) {\r\n\t\t\tid\r\n\t\t\texamName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst registerSubjectSeriesMutation = gql`\r\n\tmutation registerSubjectSeriesMutation($subject: SubjectWhereUniqueInput!, $series: SeriesWhereUniqueInput!) {\r\n\t\tcreateSubjectSeries(subject: $subject, series: $series) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tsubjectSeries {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubject {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tsubjectName\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCandidateMutation = gql`\r\n\tmutation createCandidateMutation(\r\n\t\t$cand1stName: String!\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$candCode: String\r\n\t\t$email: String!\r\n\t\t$image: String!\r\n\t\t$phoneNumb: Int\r\n\t\t$placeOfBirth: String\r\n\t\t$gender: GenderCreateWithoutCandidateInput!\r\n\t) {\r\n\t\tcreateCandidate(\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tcandCode: $candCode\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t\tgender: $gender\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcandCode\r\n\t\t\timage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n\tmutation updateSubDivisionMutation($id: ID!, $subDivName: String, $subDivCode: String) {\r\n\t\tupdateSubDivision(id: $id, subDivName: $subDivName, subDivCode: $subDivCode) {\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateCenterMutation = gql`\r\n\tmutation updateCenterMutation($id: ID!, $centerName: String, $centerCode: String) {\r\n\t\tupdateCenter(id: $id, centerName: $centerName, centerCode: $centerCode) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateTownMutation = gql`\r\n\tmutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n\t\tupdateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateExamMutation = gql`\r\n\tmutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n\t\tupdateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n\t\t\texamName\r\n\t\t\texamCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateCandidateMutation = gql`\r\n\tmutation updateCandidateMutation(\r\n\t\t$id: ID!\r\n\t\t$cand1stName: String\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$candCode: String\r\n\t\t$email: String\r\n\t\t$image: String\r\n\t\t$phoneNumb: Int\r\n\t\t$placeOfBirth: String\r\n\t) {\r\n\t\tupdateCandidate(\r\n\t\t\tid: $id\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tcandCode: $candCode\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\timage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n////**************Update mutations */\r\n\r\nexport {\r\n\tcreateCandidateMutation,\r\n\tcreateNewSubjectMutation,\r\n\tcreateNewSubjectTypeMutation,\r\n\tcreateTownMutation,\r\n\tcreateCenterAdminMutation,\r\n\tcreateDivisionMutation,\r\n\tcreateRegistrationMutation,\r\n\tcreateCenterMutation,\r\n\tcreateEducationTypeMutation,\r\n\tcreateSeriesMutation,\r\n\tcreateSubDivisionMutation,\r\n\tcreateNewSessionMutation,\r\n\tcreateNewRankMutation,\r\n\tcreateNewReportMutation,\r\n\tcreateNewRegionMutation,\r\n\tcreateExamMutation,\r\n\tregisterSubjectSeriesMutation,\r\n\tupdateCenterMutation,\r\n\tupdateTownMutation,\r\n\tupdateExamMutation,\r\n\tupdateSubDivisionMutation,\r\n\tupdateCandidateMutation,\r\n\tsignInCandidate\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nconst getACenterAdminQuery = gql`\r\n  query getACenterAdminQuery($authCode: String!) {\r\n    centerAdminSignIn(authCode: $authCode) {\r\n      id\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n  query getAllGendersQuery {\r\n    genders(orderBy: genderName_ASC) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n  query getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      series(orderBy: seriesName_ASC) {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducTypesOfAnExam = gql`\r\n  query getAllEducTypesOfAnExam($id: ID!) {\r\n    exam(id: $id) {\r\n      id\r\n      examName\r\n      educationType(orderBy: educationTypeName_ASC) {\r\n        educationTypeName\r\n        educationTypeCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n  query getSubjectsOfASeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      seriesName\r\n      id\r\n      subjectSeries {\r\n        subject {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectTypeQuery = gql`\r\n  query getAllSubjectTypeQuery {\r\n    subjectTypes(orderBy: subjectTypeName_DESC) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      gender {\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      gender {\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n  query singleCenterAdminQuery($id: ID!) {\r\n    centerAdmin(id: $id) {\r\n      centerAdminName\r\n      centerAdminCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSubjectTypeQuery,\r\n  getAllGendersQuery,\r\n  getAllRegionsQuery,\r\n  getAllEducTypeQuery,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsQuery,\r\n  getAllRanksQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getACenterAdminQuery,\r\n  singleCandidateQuery1,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleCenterAdminQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  singleSubDivisionQuery\r\n};\r\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05); */\n  background: ${(props) => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.2rem;\n  line-height: 1.2;\n  font-weight: 100;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.3rem;\n    border-style: none;\n    border-bottom: 1px solid ${(props) => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${(props) => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${(props) => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    font-size: 1.3rem;\n    font-weight: 200;\n    border-radius:7px;\n    margin-top: 1rem;\n    padding: .8rem .8rem;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .8px solid ${(props) => props.theme.lightGrey};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    /* grid-template-columns: repeat(auto-fit, -ms-content-zoom-limit-max(200px,1fr)); */\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${(props) => props.theme.bs};\n\n    &[disabled] {\n      opacity: 0.3;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","import React, { Component } from \"react\";\r\nimport { Mutation, Query } from \"react-apollo\";\r\nimport Form from \"../styles/Form\";\r\nimport Error from \"../ErrorMessage\";\r\nimport styled from \"styled-components\";\r\nimport { createTownMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getSelectedObject } from \"../queries&Mutations&Functions/Functions\";\r\nimport {\r\n  getAllRegionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getSubDivisionsOfADivisionQuery\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst StyledDivision = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 350px;\r\n`;\r\n\r\nclass CreateTown extends Component {\r\n  state = {\r\n    townName: \"\",\r\n    townCode: \"\",\r\n    divisionID: \"12\",\r\n    subDivisionID: \"12\",\r\n    regionID: \"12\",\r\n    region: \"\",\r\n    division: \"\",\r\n    subDiv: \"\"\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value, type } = e.target;\r\n    const setValue = type === \"number\" ? parseInt(value) : value;\r\n    this.setState({ [name]: setValue });\r\n  };\r\n  resetForm() {\r\n    this.setState({ townName: \"\", townCode: \"\" });\r\n  }\r\n \r\n  render() {\r\n    const { regionID, divisionID, subDivisionID} = this.state\r\n    return (\r\n      <Query query={getAllRegionsQuery}>\r\n        {({ data, loading, error }) => {\r\n          {\r\n            loading && <p>Loading...</p>;\r\n          }\r\n          {\r\n            error && <Error error={error} />;\r\n          }\r\n          const { regions } = data;\r\n          const anyRegion = regions[0];\r\n\r\n          //prepare data for the region select options\r\n          const regionsOptions = regions.map(item => (\r\n            <option value={item.id} key={item.id}>\r\n              {item.regName}\r\n            </option>\r\n          ));\r\n          return (\r\n            <Query query={getDivisionsOfARegionQuery} variables={getSelectedObject(regions, regionID) || anyRegion}>\r\n              {({ data, loading, error }) => {\r\n                {\r\n                  loading && <p>Loading...</p>;\r\n                }\r\n                {\r\n                  error && <Error error={error} />;\r\n                }\r\n\r\n                const { region } = data;\r\n                const { division } = region;\r\n                const anyDivision = division[0];\r\n\r\n                const divisionsOptions = division.map(item => (\r\n                  <option value={item.id} key={item.id}>\r\n                    {item.divName}\r\n                  </option>\r\n                ));\r\n                return (\r\n                  <Query query={getSubDivisionsOfADivisionQuery} variables={getSelectedObject(division, divisionID) || anyDivision}>\r\n                    {({ data, loading, error }) => {\r\n                      {\r\n                        loading && <p>Loading...</p>;\r\n                      }\r\n                      {\r\n                        error && <Error error={error} />;\r\n                      }\r\n                      const { division: departement } = data;\r\n                      const { subDivision: arrondissement } = departement;\r\n                      console.log(arrondissement);\r\n                      const refinedSubDiv =\r\n                        arrondissement && arrondissement.map(({ __typename, subDivName, ...others }) => others);\r\n\r\n                      const subDivisionsOptions = arrondissement.map(item => (\r\n                        <option value={item.id} key={item.id}>\r\n                          {item.subDivName}\r\n                        </option>\r\n                      ));\r\n\r\n                      return (\r\n                        <Mutation\r\n                          mutation={createTownMutation}\r\n                          variables={{\r\n                            ...this.state,\r\n                            subDiv:refinedSubDiv && getSelectedObject(refinedSubDiv, subDivisionID)\r\n                          }}\r\n                        >\r\n                          {(createTown, { loading, error }) => (\r\n                            <Form\r\n                              onSubmit={async e => {\r\n                                e.preventDefault();\r\n                                const res = await createTown();\r\n                                console.log(res);\r\n                                this.resetForm();\r\n                              }}\r\n                            >\r\n                              <h5>Nouvelle Ville</h5>\r\n                              <Error error={error} />\r\n                              <fieldset disabled={loading} aria-busy={loading}>\r\n                                <StyledDivision>\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"regionID\"\r\n                                    name=\"regionID\"\r\n                                    value={this.state.regionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option>choisssez une region</option>\r\n                                    {regionsOptions}\r\n                                  </select>\r\n\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"divisionID\"\r\n                                    name=\"divisionID\"\r\n                                    value={this.state.divisionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option> choisissez un departement</option>\r\n                                    {divisionsOptions}\r\n                                  </select>\r\n                                  <select\r\n                                    type=\"select\"\r\n                                    id=\"subDivisionID\"\r\n                                    name=\"subDivisionID\"\r\n                                    value={this.state.subDivisionID}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  >\r\n                                    <option> choisissez un arrondissement</option>\r\n                                    {subDivisionsOptions}\r\n                                  </select>\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    id=\"townName\"\r\n                                    name=\"townName\"\r\n                                    placeholder=\"Nom de la ville\"\r\n                                    value={this.state.subDivName}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  />\r\n                                  <input\r\n                                    type=\"text\"\r\n                                    id=\"townCode\"\r\n                                    name=\"townCode\"\r\n                                    placeholder=\"Code de la ville\"\r\n                                    value={this.state.subDivCode}\r\n                                    onChange={this.handleChange}\r\n                                    required\r\n                                  />\r\n                                  <div className=\"submitButton\">\r\n                                    <button type=\"submit\">Valid{loading ? \"ation en cours\" : \"er\"}</button>\r\n                                  </div>\r\n                                </StyledDivision>\r\n                              </fieldset>\r\n                            </Form>\r\n                          )}\r\n                        </Mutation>\r\n                      );\r\n                    }}\r\n                  </Query>\r\n                );\r\n              }}\r\n            </Query>\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateTown;\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}