{"version":3,"file":"static\\development\\pages\\creates\\newTown.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/newTown.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Functions.jsx","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/styles/Form.js","webpack:///./src/components/styles/StyledPage.jsx","webpack:///./src/components/town/CreateTown.jsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"apollo-link\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport CreateTown from '../../src/components/town/CreateTown';\r\n\r\nconst DivStyled = styled.div`\r\n\tdisplay: block;\r\n\tmargin: 0 auto;\r\n\tmax-width: 40vw;\r\n\th4 {\r\n\t\tmargin: 0 auto;\r\n\t\ttext-align: center;\r\n\t\tfont-size: 3rem;\r\n\t\tfont-weight: normal;\r\n\t}\r\n`;\r\nconst newTown = (props) => {\r\n\treturn (\r\n\t\t<DivStyled>\r\n\t\t\t<CreateTown />\r\n\t\t</DivStyled>\r\n\t);\r\n};\r\nexport default newTown;\r\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Error Msg!</strong>\n          {error.message.replace(\"GraphQL error: \", \"\")}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace(\"GraphQL error: \", \"\")}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {}\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object\n};\n\nexport default DisplayError;\n","import React from 'react';\r\nimport { concat } from 'apollo-link';\r\n\r\nconst uniqueCodeGen = (keyLength) => {\r\n\tvar i,\r\n\t\tkey = '',\r\n\t\t//  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\t\tcharacters = 'abcdefghijklmnopqrstuvwxyzABCDEF@#$%&GHIJKLMNOPQRSTUVWXYZ0123456789';\r\n\r\n\tvar charactersLength = characters.length;\r\n\r\n\tfor (i = 0; i < keyLength; i++) {\r\n\t\tkey += characters.substr(Math.floor(Math.random() * charactersLength + 1), 1);\r\n\t}\r\n\r\n\treturn key;\r\n};\r\n\r\nconst objectFromCode = (codeValue) => {\r\n\tconst storedObject = {\r\n\t\tcandCode: `${codeValue}`\r\n\t};\r\n\treturn storedObject;\r\n};\r\n\r\nconst centerExamSessionObjectFromCode = (codeValue) => {\r\n\tconst storedObject = {\r\n\t\tcenterExamSession: `${codeValue}`\r\n\t};\r\n\treturn storedObject;\r\n};\r\n\r\nconst candExamSessionCode = (candID, examID, sessionID) => {\r\n\r\n\treturn `${candID + examID + sessionID}`\r\n\r\n};\r\n\r\n\r\n\r\nconst getSelectedObject = (dataSource, objectID) => {\r\n\t// 1 copy the data source\r\n\tif (dataSource.length > 0) {\r\n\t\tconst tempObjects = [...dataSource];\r\n\t\t// get the object\r\n\t\tconst selectedObject = tempObjects.find((item) => item.id === objectID);\r\n\t\treturn selectedObject;\r\n\t}\r\n};\r\n\r\nNumber.prototype.pad = function (size) {\r\n\tvar s = String(this);\r\n\twhile (s.length < (size || 2)) { s = \"0\" + s; }\r\n\treturn s;\r\n}\r\n\r\nconst calcCandAve = (candScores) => {\r\n\tconst aveTotal = candScores.reduce((tally, item) => tally + item.subjectAve * item.coeff, 0);\r\n\tconst coeffTotal = candScores.reduce((tally, item) => (item.subjectAve === null ? tally : tally + item.coeff), 0);\r\n\tconst candAve = aveTotal / coeffTotal;\r\n\treturn candAve;\r\n};\r\nconst calcCandTotalScore = (candScores) => {\r\n\tconst aveTotal = candScores.reduce((tally, item) => tally + item.subjectAve * item.coeff, 0);\r\n\treturn aveTotal;\r\n};\r\nconst calcCandTotalCoeff = (candScores) => {\r\n\tconst coeffTotal = candScores.reduce((tally, item) => (item.subjectAve === null ? tally : tally + item.coeff), 0);\r\n\treturn coeffTotal;\r\n};\r\nconst roundFloatNumber = (value, decimals) => {\r\n\treturn Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\r\n};\r\n\r\nexport {\r\n\tcandExamSessionCode,\r\n\troundFloatNumber,\r\n\tcalcCandTotalScore,\r\n\tcalcCandTotalCoeff,\r\n\tcalcCandAve,\r\n\tobjectFromCode,\r\n\tupdateItemMutation,\r\n\tuniqueCodeGen,\r\n\tgetSelectedObject,\r\n\tregistrationSerialNumber,\r\n\tcenterExamSessionObjectFromCode\r\n};\r\n","import gql from 'graphql-tag';\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n\tmutation signInCandidate($candCode: String!) {\r\n\t\tcandidateSignIn(candCode: $candCode) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t}\r\n\t}\r\n`;\r\n//\r\n\r\nconst updateSessionMutation = gql`\r\n\tmutation updateSessionMutation($id: ID!, $sessionName: String, $sessionCode: String) {\r\n\t\tupdateSession(id: $id, sessionName: $sessionName, sessionCode: $sessionCode) {\r\n\t\t\tsessionName\r\n\t\t\tsessionCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateEducationTypeMutation = gql`\r\n\tmutation updateEducationTypeMutation($id: ID!, $educationTypeName: String, $educationTypeCode: String) {\r\n\t\tupdateEducationType(id: $id, educationTypeName: $educationTypeName, educationTypeCode: $educationTypeCode) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t\teducationTypeCode\r\n\t\t}\r\n\t}\r\n`;\r\nconst updateSubjectTypeMutation = gql`\r\n\tmutation updateSubjectTypeMutation($id: ID!, $subjectTypeName: String, $subjectTypeCode: String) {\r\n\t\tupdateSubjectType(id: $id, subjectTypeName: $subjectTypeName, subjectTypeCode: $subjectTypeCode) {\r\n\t\t\tid\r\n\t\t\tsubjectTypeName\r\n\t\t\tsubjectTypeCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateSubjectMutation = gql`\r\n\tmutation updateSubjectMutation($id: ID!, $subjectName: String, $subjectCode: String) {\r\n\t\tupdateSubject(id: $id, subjectName: $subjectName, subjectCode: $subjectCode) {\r\n\t\t\tsubjectName\r\n\t\t\tsubjectCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateRankMutation = gql`\r\n\tmutation updateRankMutation($id: ID!, $rankName: String, $rankCode: String) {\r\n\t\tupdateRank(id: $id, rankName: $rankName, rankCode: $rankCode) {\r\n\t\t\tid\r\n\t\t\trankName\r\n\t\t\trankCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateSeriesMutation = gql`\r\n\tmutation updateSeriesMutation($id: ID!, $seriesName: String, $seriesCode: String) {\r\n\t\tupdateSeries(id: $id, seriesName: $seriesName, seriesCode: $seriesCode) {\r\n\t\t\tseriesName\r\n\t\t\tseriesCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateDivisionMutation = gql`\r\n\tmutation updateDivisionMutation($id: ID!, $divName: String, $divCode: String) {\r\n\t\tupdateDivision(id: $id, divName: $divName, divCode: $divCode) {\r\n\t\t\tid\r\n\t\t\tdivName\r\n\t\t\tdivCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateRegionMutation = gql`\r\n\tmutation updateRegionMutation($id: ID!, $regName: String, $regCode: String) {\r\n\t\tupdateRegion(id: $id, regName: $regName, regCode: $regCode) {\r\n\t\t\tid\r\n\t\t\tregName\r\n\t\t\tregCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewReportMutation = gql`\r\n\tmutation createNewReportMutation(\r\n\t\t$reportImage: String!\r\n\t\t$reportName: String!\r\n\t\t$centerAdmin: CenterAdminWhereUniqueInput!\r\n\t) {\r\n\t\tcreateReport(reportImage: $reportImage, reportName: $reportName, centerAdmin: $centerAdmin) {\r\n\t\t\tid\r\n\t\t\treportName\r\n\t\t\treportImage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewGenderMutation = gql`\r\n\tmutation createNewGenderMutation($genderName: String!, $genderCode: String!) {\r\n\t\tcreateGender(genderName: $genderName, genderCode: $genderCode) {\r\n\t\t\tid\r\n\t\t\tgenderCode\r\n\t\t\tgenderName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createRegistrationMutation = gql`\r\n\tmutation createRegistrationMutation(\r\n\t\t$candidate: CandidateWhereUniqueInput!\r\n\t\t$candExamSecretCode: String!\r\n\t\t$candExamSession: String!\r\n\t\t$candRegistrationNumber: String!\r\n\t\t$centerExamSession: CenterExamSessionWhereUniqueInput!\r\n\t\t$centerExamSessionSeries: CenterExamSessionSeriesWhereUniqueInput!\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t) {\r\n\t\tcreateRegistration(\r\n\t\t\tcandidate: $candidate\r\n\t\t\tcandExamSecretCode: $candExamSecretCode\r\n\t\t\tcandExamSession: $candExamSession\r\n\t\t\tcandRegistrationNumber: $candRegistrationNumber\r\n\t\t\tcenterExamSession: $centerExamSession\r\n\t\t\tcenterExamSessionSeries: $centerExamSessionSeries\r\n\t\t\tseries: $series\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcenterExamSession{\r\n\t\t\t\tid\r\n\t\t\t\tcenter{\r\n\t\t\t\t\tid\r\n\t\t\t\t\tcenterName\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcandidate {\r\n\t\t\t\tid\r\n\t\t\t\tcand1stName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterExamSessionMutation = gql`\r\n\tmutation createCenterExamSessionMutation(\r\n\t\t$examSession: ExamSessionWhereUniqueInput!\r\n\t\t$center: CenterWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCenterExamSession(examSession: $examSession,  center: $center) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterExamSessionSeriesMutation = gql`\r\n\tmutation createCenterExamSessionSeriesMutation(\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$centerExamSession: CenterExamSessionWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCenterExamSessionSeries(\r\n\t\t\tseries: $series,\r\n\t\t\tcenterExamSession: $centerExamSession) {\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterExamSessionAuthorityMutation = gql`\r\n\tmutation createCenterExamSessionAuthorityMutation(\r\n\t\t$rank: RankWhereUniqueInput!\r\n\t\t$centerExamSession: CenterExamSessionWhereUniqueInput!\r\n\t\t$authName: String!\r\n\t\t$authCode: String!\r\n\t\t$authCNI: String!\r\n\t\t$authPhone: Int!\r\n\t\t$authMatricule: String!\r\n\t) {\r\n\t\tcreateCenterExamSessionAuthority(\r\n\t\t\trank: $rank\r\n\t\t\tcenterExamSession: $centerExamSession\r\n\t\t\tauthCNI: $authCNI\r\n\t\t\tauthName: $authName\r\n\t\t\tauthCode: $authCode\r\n\t\t\tauthPhone: $authPhone\r\n\t\t\tauthMatricule: $authMatricule\r\n\t\t) {\r\n\t\t\tauthName\r\n\t\t\tauthCode\r\n\t\t\tauthPhone\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createDivisionMutation = gql`\r\n\tmutation createDivisionMutation($divName: String!, $divCode: String!, $region: RegionCreateWithoutDivisionInput!) {\r\n\t\tcreateDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n\t\t\tid\r\n\t\t\tdivName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCenterMutation = gql`\r\n\tmutation createCenterMutation(\r\n\t\t$centerName: String!\r\n\t\t$centerNumber: Int\r\n\t\t$centerCode: String!\r\n\t\t$centerSecretCode: String!\r\n\t\t$town: TownWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCenter(centerSecretCode: $centerSecretCode, centerName: $centerName, centerNumber: $centerNumber, centerCode: $centerCode, town: $town) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterSecretCode\r\n\t\t\tcenterCode\r\n\t\t\ttown {\r\n\t\t\t\ttownName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSeriesMutation = gql`\r\n\tmutation createSeriesMutation(\r\n\t\t$seriesName: String!\r\n\t\t$seriesCode: String!\r\n\t\t$educationType: EducationTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSeries(seriesName: $seriesName, seriesCode: $seriesCode, educationType: $educationType) {\r\n\t\t\tid\r\n\t\t\tseriesName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createEducationTypeMutation = gql`\r\n\tmutation createEducationTypeMutation($educationTypeName: String!, $educationTypeCode: String!) {\r\n\t\tcreateEducationType(educationTypeName: $educationTypeName, educationTypeCode: $educationTypeCode) {\r\n\t\t\tid\r\n\t\t\teducationTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createTownMutation = gql`\r\n\tmutation createTownMutation($townName: String!, $townCode: String!, $subDiv: SubDivisionWhereUniqueInput!) {\r\n\t\tcreateTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n\t\t\tid\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tsubDiv {\r\n\t\t\t\tsubDivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectTypeMutation = gql`\r\n\tmutation createNewSubjectTypeMutation($subjectTypeName: String!, $subjectTypeCode: String!) {\r\n\t\tcreateSubjectType(subjectTypeName: $subjectTypeName, subjectTypeCode: $subjectTypeCode) {\r\n\t\t\tid\r\n\t\t\tsubjectTypeName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSubjectMutation = gql`\r\n\tmutation createNewSubjectMutation(\r\n\t\t$subjectName: String!\r\n\t\t$subjectCode: String!\r\n\t\t$subjectType: SubjectTypeWhereUniqueInput!\r\n\t\t$educType: EducationTypeWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubject(\r\n\t\t\tsubjectName: $subjectName\r\n\t\t\teducType: $educType\r\n\t\t\tsubjectCode: $subjectCode\r\n\t\t\tsubjectType: $subjectType\r\n\t\t) {\r\n\t\t\tsubjectCode\r\n\t\t\tsubjectName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createSubDivisionMutation = gql`\r\n\tmutation createSubDivisionMutation(\r\n\t\t$subDivName: String!\r\n\t\t$subDivCode: String!\r\n\t\t$division: DivisionWhereUniqueInput!\r\n\t) {\r\n\t\tcreateSubDivision(subDivName: $subDivName, subDivCode: $subDivCode, division: $division) {\r\n\t\t\tid\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tdivision {\r\n\t\t\t\tdivName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewSessionMutation = gql`\r\n\tmutation createNewSessionMutation($sessionName: String!, $sessionCode: String!) {\r\n\t\tcreateSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n\t\t\tid\r\n\t\t\tsessionName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createNewRankMutation = gql`\r\n\tmutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n\t\tcreateRank(rankName: $rankName, rankCode: $rankCode) {\r\n\t\t\tid\r\n\t\t\trankName\r\n\t\t}\r\n\t}\r\n`;\r\nconst createNewRegionMutation = gql`\r\n\tmutation createNewRegionMutation($regName: String!, $regCode: String!) {\r\n\t\tcreateRegion(regName: $regName, regCode: $regCode) {\r\n\t\t\tid\r\n\t\t\tregName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createExamMutation = gql`\r\n\tmutation createExamMutation($examName: String!, $examCode: String!) {\r\n\t\tcreateExam(examName: $examName, examCode: $examCode) {\r\n\t\t\tid\r\n\t\t\texamName\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst registerSubjectSeriesMutation = gql`\r\n\tmutation registerSubjectSeriesMutation(\r\n\t\t$subject: SubjectWhereUniqueInput!\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$coeff: Int!\r\n\t) {\r\n\t\tcreateSubjectSeries(subject: $subject, series: $series, coeff: $coeff) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tsubjectSeries {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubject {\r\n\t\t\t\t\t\tid\r\n\t\t\t\t\t\tsubjectName\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst registerNewSubjectSeriesMutation = gql`\r\n\tmutation registerNewSubjectSeriesMutation(\r\n\t\t$series: SeriesWhereUniqueInput!\r\n\t\t$coeff: Int!\r\n\t\t$subjectName: String!\r\n\t\t$subjectCode: String!\r\n\t) {\r\n\t\tcreateSubjectSeries(subjectCode: $subjectCode, subjectName: $subjectName, series: $series, coeff: $coeff) {\r\n\t\t\tid\r\n\t\t\tseries {\r\n\t\t\t\tid\r\n\t\t\t\tseriesName\r\n\t\t\t\tsubjectSeries {\r\n\t\t\t\t\tid\r\n\t\t\t\t\tsubjectName\r\n\t\t\t\t\tsubjectCode\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst createCandidateMutation = gql`\r\n\tmutation createCandidateMutation(\r\n\t\t$cand1stName: String!\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$dadName: String\r\n\t\t$momName: String\r\n\t\t$candCode: String\r\n\t\t$email: String!\r\n\t\t$image: String!\r\n\t\t$phoneNumb: Int\r\n\t\t$dateOfBirth: DateTime\r\n\t\t$birthCertNumber: String\r\n\t\t$placeOfBirth: String\r\n\t\t$gender: GenderWhereUniqueInput!\r\n\t) {\r\n\t\tcreateCandidate(\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tdadName: $dadName\r\n\t\t\tmomName: $momName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tcandCode: $candCode\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tdateOfBirth: $dateOfBirth\r\n\t\t\tbirthCertNumber: $birthCertNumber\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t\tgender: $gender\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\tmomName\r\n\t\t\tdadName\r\n\t\t\tcandCode\r\n\t\t\tbirthCertNumber\r\n\t\t\tdateOfBirth\r\n\t\t\timage\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n\tmutation updateSubDivisionMutation($id: ID!, $subDivName: String, $subDivCode: String) {\r\n\t\tupdateSubDivision(id: $id, subDivName: $subDivName, subDivCode: $subDivCode) {\r\n\t\t\tsubDivName\r\n\t\t\tsubDivCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateCenterMutation = gql`\r\n\tmutation updateCenterMutation($id: ID!, $centerName: String, $centerCode: String, $centerNumber: Int) {\r\n\t\tupdateCenter(id: $id, centerName: $centerName, centerCode: $centerCode, centerNumber: $centerNumber) {\r\n\t\t\tid\r\n\t\t\tcenterName\r\n\t\t\tcenterNumber\r\n\t\t\tcenterCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateTownMutation = gql`\r\n\tmutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n\t\tupdateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n\t\t\ttownName\r\n\t\t\ttownCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateExamMutation = gql`\r\n\tmutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n\t\tupdateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n\t\t\texamName\r\n\t\t\texamCode\r\n\t\t\tid\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateScoreMutation = gql`\r\n\tmutation updateScoreMutation(\r\n\t\t$subjectSeries: SubjectSeriesWhereUniqueInput!\r\n\t\t$subjectAve: Float!\r\n\t\t$candExamSecretCode: String!\r\n\t) {\r\n\t\tupdateScore(subjectSeries: $subjectSeries, subjectAve: $subjectAve, candExamSecretCode: $candExamSecretCode) {\r\n\t\t\tsubjectAve\r\n\t\t\tcoeff\r\n\t\t\tid\r\n\t\t\tsubjectSeries {\r\n\t\t\t\tid\r\n\t\t\t\tsubjectCode\r\n\t\t\t\tsubjectName\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst logInUserMutation = gql`\r\n  mutation logInUserMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      id\r\n      email\r\n      password\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateCandidateMutation = gql`\r\n\tmutation updateCandidateMutation(\r\n\t\t$id: ID!\r\n\t\t$cand1stName: String\r\n\t\t$cand2ndName: String\r\n\t\t$cand3rdName: String\r\n\t\t$momName: String\r\n\t\t$dadName: String\r\n\t\t$email: String\r\n\t\t$image: String\r\n\t\t$phoneNumb: Int\r\n\t\t$placeOfBirth: String\r\n\t\t$dateOfBirth: DateTime\r\n\t\t$birthCertNumber: String\r\n\t\t$gender: GenderWhereUniqueInput\r\n\t) {\r\n\t\tupdateCandidate(\r\n\t\t\tid: $id\r\n\t\t\tcand1stName: $cand1stName\r\n\t\t\tcand2ndName: $cand2ndName\r\n\t\t\tcand3rdName: $cand3rdName\r\n\t\t\tmomName: $momName\r\n\t\t\tdadName: $dadName\r\n\t\t\temail: $email\r\n\t\t\timage: $image\r\n\t\t\tphoneNumb: $phoneNumb\r\n\t\t\tplaceOfBirth: $placeOfBirth\r\n\t\t\tdateOfBirth: $dateOfBirth\r\n\t\t\tbirthCertNumber: $birthCertNumber\r\n\t\t\tgender: $gender\r\n\t\t) {\r\n\t\t\tid\r\n\t\t\tcand1stName\r\n\t\t\tcand2ndName\r\n\t\t\tcand3rdName\r\n\t\t\timage\r\n\t\t\tgender {\r\n\t\t\t\tid\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nconst updateGenderMutation = gql`\r\n\tmutation updateGenderMutation($id: ID!, $genderName: String, $genderCode: String) {\r\n\t\tupdateGender(id: $id, genderName: $genderName, genderCode: $genderCode) {\r\n\t\t\tid\r\n\t\t\tgenderName\r\n\t\t\tgenderCode\r\n\t\t}\r\n\t}\r\n`;\r\n\r\n\r\n\r\nconst signUpMutation = gql`\r\n  mutation signUpMutation($email: String!, $name: String!, $password: String!) {\r\n    signUp(email: $email, name: $name, password: $password) {\r\n      id\r\n      email\r\n      resetToken\r\n      password\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nconst updateItemMutation = async (e, updateMutation) => {\r\n\te.preventDefault();\r\n\tconsole.log('Updating Region!!');\r\n\tconst res = await updateMutation({\r\n\t\tvariables: {\r\n\t\t\tid: this.props.id,\r\n\t\t\t...this.state\r\n\t\t}\r\n\t});\r\n\tconsole.log('Region Updated!!');\r\n};\r\n\r\n////**************Update mutations */\r\n\r\nexport {\r\n\tcreateCandidateMutation,\r\n\tcreateNewSubjectMutation,\r\n\tcreateNewSubjectTypeMutation,\r\n\tcreateTownMutation,\r\n\tcreateCenterExamSessionAuthorityMutation,\r\n\tcreateDivisionMutation,\r\n\tcreateRegistrationMutation,\r\n\tcreateCenterMutation,\r\n\tcreateEducationTypeMutation,\r\n\tcreateSeriesMutation,\r\n\tcreateSubDivisionMutation,\r\n\tcreateNewSessionMutation,\r\n\tcreateNewRankMutation,\r\n\tcreateNewReportMutation,\r\n\tcreateNewRegionMutation,\r\n\tcreateNewGenderMutation,\r\n\tcreateExamMutation,\r\n\tregisterSubjectSeriesMutation,\r\n\tregisterNewSubjectSeriesMutation,\r\n\tupdateCenterMutation,\r\n\tupdateTownMutation,\r\n\tupdateSessionMutation,\r\n\tupdateRegionMutation,\r\n\tupdateExamMutation,\r\n\tupdateSubDivisionMutation,\r\n\tupdateGenderMutation,\r\n\tlogInUserMutation,\r\n\tupdateCandidateMutation,\r\n\tupdateScoreMutation,\r\n\tupdateDivisionMutation,\r\n\tupdateItemMutation,\r\n\tcreateCenterExamSessionSeriesMutation,\r\n\tupdateSeriesMutation,\r\n\tupdateRankMutation,\r\n\tsignUpMutation,\r\n\tupdateSubjectMutation,\r\n\tupdateSubjectTypeMutation,\r\n\tcreateCenterExamSessionMutation,\r\n\tupdateEducationTypeMutation,\r\n\tsignInCandidate\r\n};\r\n","import gql from 'graphql-tag';\r\n\r\nconst getACenterAdminQuery = gql`\r\n  query getACenterAdminQuery($authCode: String!) {\r\n    centerAdminSignIn(authCode: $authCode) {\r\n      id\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleEducationTypeQuery = gql`\r\n  query singleEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectTypeQuery = gql`\r\n  query singleSubjectTypeQuery($id: ID!) {\r\n    subjectType(id: $id) {\r\n      subjectTypeName\r\n      subjectTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterAdminsQuery = gql`\r\n  query getAllCenterAdminsQuery {\r\n    centerAdmins {\r\n      id\r\n      authName\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes(orderBy: educationTypeName_ASC) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getCenterResultsQuery = gql`\r\n  query getCenterResultsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    getResultsPerCenter(exam: $exam, center: $center, session: $session) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n      scores {\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          subjectName\r\n          series {\r\n            id\r\n            seriesName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateResultsQuery = gql`\r\n  query getCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      createdAt\r\n      candRegistrationNumber\r\n      \r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        placeOfBirth\r\n        image\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      centerExamSessionSeries {\r\n      centerExamSession{\r\n        id \r\n      examSession {\r\n       id\r\n        exam{\r\n          id \r\n          examName\r\n        }\r\n        session{\r\n          id\r\n          sessionName\r\n        }\r\n      }\r\n      center {\r\n        id\r\n        centerName\r\n      }}\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n      }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries  {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterResultsQuery = gql`\r\n  query getAllCenterResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     registration{\r\n       id\r\n       candidate{\r\n         cand1stName\r\n         id\r\n       }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     }\r\n   }\r\n  }\r\n`;\r\n\r\nconst getEachCandidateResultsQuery = gql`\r\n  query getEachCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      series {\r\n        id\r\n        seriesName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDQuery = gql`\r\n  query getCandidateRegistrationIDQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n  ) {\r\n    candidateRegistrationID(centerExamSession: $centerExamSession, candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDsQuery = gql`\r\n  query getCandidateRegistrationIDsQuery($candidate: RegistrationWhereInput!  ) {\r\n    candidateRegistrationIDs(candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidateRegistrationIDsQuery = gql`\r\n  query getAllCandidateRegistrationIDsQuery($id: ID!  ) {\r\n    candidate( id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      gender{\r\nid\r\ngenderName\r\n      }\r\n      registration{\r\n        id\r\n     \r\n        centerExamSessionSeries{\r\n          id\r\n         series{\r\n           id\r\n           seriesName\r\n         }\r\n         centerExamSession{\r\n          center{\r\n            id\r\n            centerName\r\n          }\r\n          examSession{\r\n            id\r\n            exam{\r\n              id\r\n              examName\r\n            }\r\n            session{\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n       \r\n        }\r\n        scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n        }\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateIDQuery = gql`\r\n  query getCandidateIDQuery(\r\n    $candCode: String!\r\n  ) {\r\n    candidateCode(candCode: $candCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterIDFromCenterCodeQuery = gql`\r\n  query getCenterIDFromCenterCodeQuery($centerCode: String!) {\r\n    centerByCode(centerCode: $centerCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterRegistrationIDsQuery = gql`\r\n  query getCenterRegistrationIDsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    centerRegistrationIDs(exam: $exam, center: $center, session: $session) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSeriesForResultsQuery = gql`\r\n  query centerExamSessionSeriesForResultsQuery($centerExamSession: String !) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n      }\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionForResultsQuery = gql`\r\n  query centerExamSessionForResultsQuery($id: ID !) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      center{\r\n                 id\r\n                 centerName\r\n                 centerCode\r\n               }\r\n               examSession{\r\n               exam{\r\n                 id\r\n                 examName\r\n               }\r\n               session{\r\n                 id\r\n                 sessionName\r\n               }}\r\n           centerExamSessionSeries{\r\n             id\r\n            series{\r\n              id\r\n              seriesName\r\n              seriesCode\r\n            }\r\n             registration{\r\n               id\r\n               candExamSecretCode\r\n               candidate{\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n            dateOfBirth\r\n            placeOfBirth\r\n            email\r\n            phoneNumb\r\n            gender{\r\n              id\r\n              genderName\r\n            }\r\n\r\n               }\r\n               scores{\r\n                 id\r\n                 subjectAve\r\n\r\n               }\r\n             }\r\n           }\r\n       \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateByCandCodeQuery = gql`\r\n  query getCandidateByCandCodeQuery($candCode: String!) {\r\n    getCandidateByCode(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      candCode\r\n      dateOfBirth\r\n      placeOfBirth\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n  query getAllGendersQuery {\r\n    genders(orderBy: genderName_ASC) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n  query getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      series(orderBy: seriesName_ASC) {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfACenterExamSessionQuery = gql`\r\n  query getAllSeriesOfACenterExamSessionQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      centerExamSessionSeries{\r\n      series {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }}\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst getAllSeriesQuery = gql`\r\n  query getAllSeriesQuery {\r\n    serieses(orderBy: seriesName_ASC) {\r\n      id\r\n      seriesName\r\n      seriesCode\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n  query getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      subject(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n  query getAllSubjectsOfASeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      id\r\n      seriesName\r\n      subjectSeries {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubDivisionsQuery = gql`\r\n  query getAllSubDivisionsQuery {\r\n    subDivision(orderBy: subDivName_ASC) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centersPerTownQuery = gql`\r\n  query centersPerTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerNumber\r\n        centerSecretCode\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectTypesQuery = gql`\r\n  query getAllSubjectTypesQuery {\r\n    subjectTypes(orderBy: subjectTypeName_DESC) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterQuery = gql`\r\n  query getSingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getASingleCenterQuery = gql`\r\n  query getASingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionQuery = gql`\r\n  query getSingleCenterExamSessionQuery(\r\n    $center: CenterWhereUniqueInput!\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n  ) {\r\n    centerExamSessions(examSession: $examSession, center: $center) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidateCountQuery = gql`\r\n  query getRegisteredCandidateCountQuery($id: ID!)\r\n {\r\n    registrationsConnection(id: $id) {\r\n     aggregate{\r\n       count\r\n     }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterExamSessionSeriesQuery = gql`\r\n  query getCenterExamSessionSeriesQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionSerieses(series: $series, centerExamSession: $centerExamSession) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExamSessionQuery = gql`\r\n  query getExamSessionQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    examSessions(session: $session, exam: $exam) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      dadName\r\n      momName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      dadName\r\n      momName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getScoreID = gql`\r\n  query getScoreID($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n  query getRegistrations($candExamSecretCode: String!) {\r\n    registration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      scores {\r\n        id\r\n        subject(orderBy: subjectName_ASC) {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n  query getSingleRegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleGenderQuery = gql`\r\n  query singleGenderQuery($id: ID!) {\r\n    gender(id: $id) {\r\n      genderName\r\n      genderCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSeriesQuery = gql`\r\n  query singleSeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      seriesName\r\n      seriesCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n  query singleCenterAdminQuery($id: ID!) {\r\n    centerAdmin(id: $id) {\r\n      centerAdminName\r\n      centerAdminCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst dataForAverage = gql`\r\n  query dataForAverage($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      subjectAve\r\n      coeff\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleDivisionQuery = gql`\r\n  query singleDivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleRankQuery = gql`\r\n  query singleRankQuery($id: ID!) {\r\n    rank(id: $id) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectQuery = gql`\r\n  query singleSubjectQuery($id: ID!) {\r\n    subject(id: $id) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSessionQuery = gql`\r\n  query singleSessionQuery($id: ID!) {\r\n    session(id: $id) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSubjectTypesQuery,\r\n  getAllGendersQuery,\r\n  getAllEducTypeQuery,\r\n  getAllRegionsQuery,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsQuery,\r\n  getAllRanksQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getSingleRegionQuery,\r\n  getACenterAdminQuery,\r\n  getAllCenterAdminsQuery,\r\n  getAllSeriesQuery,\r\n  getAllSubDivisionsQuery,\r\n  getAllSubjectsOfAnEducTypeQuery,\r\n  getScoreID,\r\n  singleSeriesQuery,\r\n  getRegistrations,\r\n  singleSubjectQuery,\r\n  singleCandidateQuery1,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleCenterAdminQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  schoolDataQuery,\r\n  getAllCenterResultsQuery,\r\n  singleSessionQuery,\r\n  singleDivisionQuery,\r\n  singleSubDivisionQuery,\r\n  singleSubjectTypeQuery,\r\n  singleEducationTypeQuery,\r\n  singleRankQuery,\r\n  centerExamSessionSeriesForResultsQuery,\r\n  getAllCandidateRegistrationIDsQuery,\r\n  getCenterExamSessionSeriesQuery,\r\n  singleGenderQuery,\r\n  getExamSessionQuery,\r\n  getAllSeriesOfACenterExamSessionQuery,\r\n  getCenterResultsQuery,\r\n  getCandidateRegistrationIDQuery,\r\n  getCandidateRegistrationIDsQuery,\r\n  centerExamSessionForResultsQuery,\r\n  getCandidateIDQuery,\r\n  getASingleCenterQuery,\r\n  getRegisteredCandidateCountQuery,\r\n  centersPerTownQuery,\r\n  getSingleCenterQuery,\r\n  getCandidateResultsQuery,\r\n  getCenterRegistrationIDsQuery,\r\n  getCandidateByCandCodeQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getEachCandidateResultsQuery,\r\n  getCenterIDFromCenterCodeQuery,\r\n  dataForAverage,\r\n};\r\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.5); */\n  background: ${(props) => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.2rem;\n  line-height: 1.2;\n  font-weight: 300;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.5rem;\n    border-style: none;\n    border-bottom: 1px solid ${(props) => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${(props) => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${(props) => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    height: 2.5rem;\n    width:auto;\n    font-size: 1.5rem;\n    font-weight: 500;\n    border-radius:.6rem;\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n    padding: 1rem, 1rem 1rem 1re1;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .6px solid ${(props) => props.theme.googleBlue};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${(props) => props.theme.bs2};\n\n    &[disabled] {\n      opacity: 0.4;\n    }\n    &::before {\n      height: 7px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","import styled from \"styled-components\";\n\nconst StyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 60vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst MiniStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 40vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst MinimStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 30vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst BigStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 80vw;\n\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 2rem;\n    font-weight: bold;\n  }\n  .Form {\n    justify-items: center;\n    align-items: center;\n  }\n  fieldset {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst BiggestStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 100vw;\n\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n  .Form {\n    justify-items: center;\n    align-items: center;\n  }\n  fieldset {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nexport { MinimStyledPage, MiniStyledPage, StyledPage, BigStyledPage, BiggestStyledPage };\n","import React, { Component } from 'react';\r\nimport { Mutation, Query } from 'react-apollo';\r\nimport Form from '../styles/Form';\r\nimport { StyledPage } from '../styles/StyledPage';\r\nimport Error from '../ErrorMessage';\r\nimport { createTownMutation } from '../queries&Mutations&Functions/Mutations';\r\nimport { getSelectedObject } from '../queries&Mutations&Functions/Functions';\r\nimport {\r\n\tgetAllRegionsQuery,\r\n\tgetDivisionsOfARegionQuery,\r\n\tgetSubDivisionsOfADivisionQuery\r\n} from '../queries&Mutations&Functions/Queries';\r\n\r\nclass CreateTown extends Component {\r\n\tstate = {\r\n\t\ttownName: '',\r\n\t\ttownCode: '',\r\n\t\tdivisionID: '12',\r\n\t\tsubDivisionID: '12',\r\n\t\tregionID: '12'\r\n\t};\r\n\r\n\thandleChange = (e) => {\r\n\t\tconst { name, value, type } = e.target;\r\n\t\tconst setValue = type === 'number' ? parseInt(value) : value;\r\n\t\tthis.setState({ [name]: setValue });\r\n\t};\r\n\tresetForm() {\r\n\t\tthis.setState({ townName: '', townCode: '' });\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { regionID, divisionID, subDivisionID, townCode, townName } = this.state;\r\n\t\treturn (\r\n\t\t\t<Query query={getAllRegionsQuery}>\r\n\t\t\t\t{({ data, loading, error }) => {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tloading && <p>Loading...</p>;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\terror && <Error error={error} />;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst { regions } = data;\r\n\t\t\t\t\tconst refinedRegion = regions && regions.map(({ __typename, ...others }) => others);\r\n\r\n\t\t\t\t\t//prepare data for the region select options\r\n\t\t\t\t\tconst regionsOptions =\r\n\t\t\t\t\t\trefinedRegion &&\r\n\t\t\t\t\t\trefinedRegion.map((item) => (\r\n\t\t\t\t\t\t\t<option value={item.id} key={item.id}>\r\n\t\t\t\t\t\t\t\t{item.regName}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t));\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Query\r\n\t\t\t\t\t\t\tquery={getDivisionsOfARegionQuery}\r\n\t\t\t\t\t\t\tvariables={refinedRegion && getSelectedObject(refinedRegion, regionID)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{({ data, loading, error }) => {\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tloading && <p>Loading...</p>;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\terror && <Error error={error} />;\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tconst { region } = data;\r\n\t\t\t\t\t\t\t\tconst allDivs = { ...region };\r\n\t\t\t\t\t\t\t\tconst { division } = allDivs;\r\n\t\t\t\t\t\t\t\tconsole.log(allDivs);\r\n\t\t\t\t\t\t\t\tconsole.log(division);\r\n\t\t\t\t\t\t\t\tconst refinedDivision = division && division.map(({ __typename, ...others }) => others);\r\n\r\n\t\t\t\t\t\t\t\tconst divisionsOptions =\r\n\t\t\t\t\t\t\t\t\trefinedDivision &&\r\n\t\t\t\t\t\t\t\t\trefinedDivision.map((item) => (\r\n\t\t\t\t\t\t\t\t\t\t<option value={item.id} key={item.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t{item.divName}\r\n\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t));\r\n\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<Query\r\n\t\t\t\t\t\t\t\t\t\tquery={getSubDivisionsOfADivisionQuery}\r\n\t\t\t\t\t\t\t\t\t\tvariables={refinedDivision && getSelectedObject(refinedDivision, divisionID)}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{({ data, loading, error }) => {\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tloading && <p>Loading...</p>;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\terror && <Error error={error} />;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tconst { division: departement } = data;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconst allSubDivs = { ...departement };\r\n\t\t\t\t\t\t\t\t\t\t\tconst { subDivision } = allSubDivs;\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(subDivision);\r\n\t\t\t\t\t\t\t\t\t\t\tconst refinedSubDiv =\r\n\t\t\t\t\t\t\t\t\t\t\t\tsubDivision &&\r\n\t\t\t\t\t\t\t\t\t\t\t\tsubDivision.map(({ __typename, subDivName, ...others }) => others);\r\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(refinedSubDiv)\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tconst subDivisionsOptions =\r\n\t\t\t\t\t\t\t\t\t\t\t\tsubDivision &&\r\n\t\t\t\t\t\t\t\t\t\t\t\tsubDivision.map((item) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<option value={item.id} key={item.id}>{item.subDivName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t));\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Mutation\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tmutation={createTownMutation}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariables={{\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t...this.state,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubDiv: refinedSubDiv && getSelectedObject(refinedSubDiv, subDivisionID)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t{(createTown, { loading, error }) => (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<StyledPage>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmethod=\"POST\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonSubmit={async (e) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst res = await createTown();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(res);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.resetForm();\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>Créer Nouvelle Ville</h4>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Error error={error} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<fieldset disabled={loading} aria-busy={loading}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"regionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"regionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={regionID}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option>choisssez une région</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{regionsOptions}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"divisionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"divisionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={divisionID}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option> choisissez un département</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{divisionsOptions}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"subDivisionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"subDivisionID\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={subDivisionID}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option> choisissez un arrondissement</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{subDivisionsOptions}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"townName\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"townName\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Nom de la ville\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={townName}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid=\"townCode\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname=\"townCode\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"Code de la ville\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={townCode}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"submitButton\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tValid{loading ? 'ation en cours' : 'er'}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</fieldset>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</StyledPage>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t</Mutation>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t</Query>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t</Query>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</Query>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CreateTown;\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"apollo-link\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AA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","sourceRoot":""}