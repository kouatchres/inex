{"version":3,"file":"static\\development\\pages\\modify\\modifySubject.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/modify/modifySubject.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/region/DeleteRegion.jsx","webpack:///./src/components/styles/Form.js","webpack:///./src/components/styles/StyledPage.jsx","webpack:///./src/components/subject/SelectSubjectToModify.jsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"graphql-tag\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SelectSubjectToModify from \"../../src/components/subject/SelectSubjectToModify\";\r\n\r\nconst DivStyled = styled.div`\r\n  display: block;\r\n  margin: 0 auto;\r\n  justify-items: center;\r\n  align-content: center;\r\n`;\r\nconst modifySession = props => {\r\n  return (\r\n    <DivStyled>\r\n      <SelectSubjectToModify />\r\n    </DivStyled>\r\n  );\r\n};\r\nexport default modifySession;\r\n","import styled from \"styled-components\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Error Msg!</strong>\n          {error.message.replace(\"GraphQL error: \", \"\")}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace(\"GraphQL error: \", \"\")}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {}\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object\n};\n\nexport default DisplayError;\n","import gql from 'graphql-tag';\r\n\r\nconst getACenterAdminQuery = gql`\r\n  query getACenterAdminQuery($authCode: String!) {\r\n    centerAdminSignIn(authCode: $authCode) {\r\n      id\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleEducationTypeQuery = gql`\r\n  query singleEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectTypeQuery = gql`\r\n  query singleSubjectTypeQuery($id: ID!) {\r\n    subjectType(id: $id) {\r\n      subjectTypeName\r\n      subjectTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterAdminsQuery = gql`\r\n  query getAllCenterAdminsQuery {\r\n    centerAdmins {\r\n      id\r\n      authName\r\n      authCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes(orderBy: educationTypeName_ASC) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getCenterResultsQuery = gql`\r\n  query getCenterResultsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    getResultsPerCenter(exam: $exam, center: $center, session: $session) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n      scores {\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          subjectName\r\n          series {\r\n            id\r\n            seriesName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateResultsQuery = gql`\r\n  query getCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      createdAt\r\n      candRegistrationNumber\r\n      \r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        placeOfBirth\r\n        image\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      centerExamSessionSeries {\r\n      centerExamSession{\r\n        id \r\n      examSession {\r\n       id\r\n        exam{\r\n          id \r\n          examName\r\n        }\r\n        session{\r\n          id\r\n          sessionName\r\n        }\r\n      }\r\n      center {\r\n        id\r\n        centerName\r\n      }}\r\n      series {\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n      }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries  {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterResultsQuery = gql`\r\n  query getAllCenterResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     registration{\r\n       id\r\n       candidate{\r\n         cand1stName\r\n         id\r\n       }\r\n      scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n     }\r\n   }\r\n  }\r\n`;\r\n\r\nconst getEachCandidateResultsQuery = gql`\r\n  query getEachCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        email\r\n        dateOfBirth\r\n        gender {\r\n          genderName\r\n        }\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      series {\r\n        id\r\n        seriesName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDQuery = gql`\r\n  query getCandidateRegistrationIDQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n  ) {\r\n    candidateRegistrationID(centerExamSession: $centerExamSession, candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDsQuery = gql`\r\n  query getCandidateRegistrationIDsQuery($candidate: RegistrationWhereInput!  ) {\r\n    candidateRegistrationIDs(candidate: $candidate) {\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidateRegistrationIDsQuery = gql`\r\n  query getAllCandidateRegistrationIDsQuery($id: ID!  ) {\r\n    candidate( id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      gender{\r\nid\r\ngenderName\r\n      }\r\n      registration{\r\n        id\r\n     \r\n        centerExamSessionSeries{\r\n          id\r\n         series{\r\n           id\r\n           seriesName\r\n         }\r\n         centerExamSession{\r\n          center{\r\n            id\r\n            centerName\r\n          }\r\n          examSession{\r\n            id\r\n            exam{\r\n              id\r\n              examName\r\n            }\r\n            session{\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n       \r\n        }\r\n        scores {\r\n        id\r\n        subjectAve\r\n        coeff\r\n        subjectSeries {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n        }\r\n      id\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateIDQuery = gql`\r\n  query getCandidateIDQuery(\r\n    $candCode: String!\r\n  ) {\r\n    candidateCode(candCode: $candCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterIDFromCenterCodeQuery = gql`\r\n  query getCenterIDFromCenterCodeQuery($centerCode: String!) {\r\n    centerByCode(centerCode: $centerCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterRegistrationIDsQuery = gql`\r\n  query getCenterRegistrationIDsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    centerRegistrationIDs(exam: $exam, center: $center, session: $session) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSeriesForResultsQuery = gql`\r\n  query centerExamSessionSeriesForResultsQuery($centerExamSession: String !) {\r\n    centerExamSessionSeriesForResults(centerExamSession: $centerExamSession) {\r\n      id\r\n      series{\r\n        id\r\n        seriesName\r\n      }\r\n      \r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionForResultsQuery = gql`\r\n  query centerExamSessionForResultsQuery($id: ID !) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      center{\r\n                 id\r\n                 centerName\r\n                 centerCode\r\n               }\r\n               examSession{\r\n               exam{\r\n                 id\r\n                 examName\r\n               }\r\n               session{\r\n                 id\r\n                 sessionName\r\n               }}\r\n           centerExamSessionSeries{\r\n             id\r\n            series{\r\n              id\r\n              seriesName\r\n              seriesCode\r\n            }\r\n             registration{\r\n               id\r\n               candExamSecretCode\r\n               candidate{\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n            dateOfBirth\r\n            placeOfBirth\r\n            email\r\n            phoneNumb\r\n            gender{\r\n              id\r\n              genderName\r\n            }\r\n\r\n               }\r\n               scores{\r\n                 id\r\n                 subjectAve\r\n\r\n               }\r\n             }\r\n           }\r\n       \r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateByCandCodeQuery = gql`\r\n  query getCandidateByCandCodeQuery($candCode: String!) {\r\n    getCandidateByCode(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      candCode\r\n      dateOfBirth\r\n      placeOfBirth\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGendersQuery = gql`\r\n  query getAllGendersQuery {\r\n    genders(orderBy: genderName_ASC) {\r\n      id\r\n      genderName\r\n      genderCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfAnEducationTypeQuery = gql`\r\n  query getAllSeriesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      series(orderBy: seriesName_ASC) {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSeriesOfACenterExamSessionQuery = gql`\r\n  query getAllSeriesOfACenterExamSessionQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      centerExamSessionSeries{\r\n      series {\r\n        id\r\n        seriesName\r\n        seriesCode\r\n      }\r\n    }}\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst getAllSeriesQuery = gql`\r\n  query getAllSeriesQuery {\r\n    serieses(orderBy: seriesName_ASC) {\r\n      id\r\n      seriesName\r\n      seriesCode\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n  query getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      subject(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfASeriesQuery = gql`\r\n  query getAllSubjectsOfASeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      id\r\n      seriesName\r\n      subjectSeries {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubDivisionsQuery = gql`\r\n  query getAllSubDivisionsQuery {\r\n    subDivision(orderBy: subDivName_ASC) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centersPerTownQuery = gql`\r\n  query centersPerTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerNumber\r\n        centerSecretCode\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectTypesQuery = gql`\r\n  query getAllSubjectTypesQuery {\r\n    subjectTypes(orderBy: subjectTypeName_DESC) {\r\n      id\r\n      subjectTypeName\r\n      subjectTypeCode\r\n    }\r\n  }\r\n`;\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterQuery = gql`\r\n  query getSingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getASingleCenterQuery = gql`\r\n  query getASingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber:  $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionQuery = gql`\r\n  query getSingleCenterExamSessionQuery(\r\n    $center: CenterWhereUniqueInput!\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n  ) {\r\n    centerExamSessions(examSession: $examSession, center: $center) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidateCountQuery = gql`\r\n  query getRegisteredCandidateCountQuery($centerExamSession: centerExamSessionWhereInput!)\r\n {\r\n    countRegisteredCandidates(centerExamSession: $centerExamSession) {\r\n     id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterExamSessionSeriesQuery = gql`\r\n  query getCenterExamSessionSeriesQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $series: SeriesWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionSerieses(series: $series, centerExamSession: $centerExamSession) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExamSessionQuery = gql`\r\n  query getExamSessionQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    examSessions(session: $session, exam: $exam) {\r\n      id\r\n\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      dadName\r\n      momName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      dadName\r\n      momName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      gender {\r\n        id\r\n        genderName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getScoreID = gql`\r\n  query getScoreID($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n  query getRegistrations($candExamSecretCode: String!) {\r\n    registration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      scores {\r\n        id\r\n        subject(orderBy: subjectName_ASC) {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n  query getSingleRegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleGenderQuery = gql`\r\n  query singleGenderQuery($id: ID!) {\r\n    gender(id: $id) {\r\n      genderName\r\n      genderCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSeriesQuery = gql`\r\n  query singleSeriesQuery($id: ID!) {\r\n    series(id: $id) {\r\n      seriesName\r\n      seriesCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCenterAdminQuery = gql`\r\n  query singleCenterAdminQuery($id: ID!) {\r\n    centerAdmin(id: $id) {\r\n      centerAdminName\r\n      centerAdminCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst dataForAverage = gql`\r\n  query dataForAverage($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      subjectAve\r\n      coeff\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleDivisionQuery = gql`\r\n  query singleDivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleRankQuery = gql`\r\n  query singleRankQuery($id: ID!) {\r\n    rank(id: $id) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectQuery = gql`\r\n  query singleSubjectQuery($id: ID!) {\r\n    subject(id: $id) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSessionQuery = gql`\r\n  query singleSessionQuery($id: ID!) {\r\n    session(id: $id) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectsOfASeriesQuery,\r\n  getAllSubjectTypesQuery,\r\n  getAllGendersQuery,\r\n  getAllEducTypeQuery,\r\n  getAllRegionsQuery,\r\n  getAllSeriesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSubjectsQuery,\r\n  getAllRanksQuery,\r\n  getAllEducTypesOfAnExam,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getSingleRegionQuery,\r\n  getACenterAdminQuery,\r\n  getAllCenterAdminsQuery,\r\n  getAllSeriesQuery,\r\n  getAllSubDivisionsQuery,\r\n  getAllSubjectsOfAnEducTypeQuery,\r\n  getScoreID,\r\n  singleSeriesQuery,\r\n  getRegistrations,\r\n  singleSubjectQuery,\r\n  singleCandidateQuery1,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleCenterAdminQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  schoolDataQuery,\r\n  getAllCenterResultsQuery,\r\n  singleSessionQuery,\r\n  singleDivisionQuery,\r\n  singleSubDivisionQuery,\r\n  singleSubjectTypeQuery,\r\n  singleEducationTypeQuery,\r\n  singleRankQuery,\r\n  centerExamSessionSeriesForResultsQuery,\r\n  getAllCandidateRegistrationIDsQuery,\r\n  getCenterExamSessionSeriesQuery,\r\n  singleGenderQuery,\r\n  getExamSessionQuery,\r\n  getAllSeriesOfACenterExamSessionQuery,\r\n  getCenterResultsQuery,\r\n  getCandidateRegistrationIDQuery,\r\n  getCandidateRegistrationIDsQuery,\r\n  centerExamSessionForResultsQuery,\r\n  getCandidateIDQuery,\r\n  getASingleCenterQuery,\r\n  getRegisteredCandidateCountQuery,\r\n  centersPerTownQuery,\r\n  getSingleCenterQuery,\r\n  getCandidateResultsQuery,\r\n  getCenterRegistrationIDsQuery,\r\n  getCandidateByCandCodeQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getEachCandidateResultsQuery,\r\n  getCenterIDFromCenterCodeQuery,\r\n  dataForAverage,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport styled from \"styled-components\";\r\nimport { getAllRegionsQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst DelBtn = styled.button`\r\n  font-weight: bold;\r\n  border-radius:8px;\r\n  font-size:1.5rem;\r\n  height:30px;\r\n  border:none;\r\n  padding-top:5px;\r\n  padding-bottom:5px;\r\n  align-items:center;\r\n  background-color: white;\r\n  color: black;\r\n  width:10vw;\r\n  border: 2px solid #4CAF50; /* Green */\r\n  :hover{\r\n    cursor:pointer;\r\n    background-color: #4CAF50;\r\n  color: white;\r\n}\r\n  }\r\n`;\r\n\r\nconst deleteRegionMutation = gql`\r\n  mutation deleteRegionMutation($id: ID!) {\r\n    deleteRegion(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nclass DeleteRegion extends Component {\r\n  updateCache = (cache, payload) => {\r\n    // manually update the cache so that the data are all the same\r\n    // 1. read the cache for the data we want\r\n    const data = cache.readQuery({ query: getAllRegionsQuery });\r\n    // the deletedselect all the other regions except the deleted one from the cache\r\n    data.regions = data.regions.filter(region => region.id !== payload.data.deleteRegion.id);\r\n    //  3. write the new data back to the cache\r\n    console.log(\"getting payload\");\r\n    console.log(payload);\r\n    cache.writeQuery({ query: getAllRegionsQuery, data });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Mutation mutation={deleteRegionMutation} variables={{ id: this.props.id }} update={this.updateCache}>\r\n          {(deleteRegion, { error }) => (\r\n            <DelBtn\r\n              onClick={() => {\r\n                if (confirm(\"Do you want to delete this candidate ?\")) {\r\n                  deleteRegion();\r\n                }\r\n              }}\r\n            >\r\n              {this.props.children}\r\n            </DelBtn>\r\n          )}\r\n        </Mutation>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeleteRegion;\r\n","import styled, { keyframes } from 'styled-components';\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.5); */\n  background: ${(props) => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.2rem;\n  line-height: 1.2;\n  font-weight: 300;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 1.5rem;\n    border-style: none;\n    border-bottom: 1px solid ${(props) => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${(props) => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${(props) => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    height: 2.5rem;\n    width:auto;\n    font-size: 1.5rem;\n    font-weight: 500;\n    border-radius:.6rem;\n    margin-top: 1rem;\n    margin-bottom: 1rem;\n    padding: 1rem, 1rem 1rem 1re1;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .6px solid ${(props) => props.theme.googleBlue};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${(props) => props.theme.bs2};\n\n    &[disabled] {\n      opacity: 0.4;\n    }\n    &::before {\n      height: 7px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","import styled from \"styled-components\";\n\nconst StyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 60vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst MiniStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 40vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst MinimStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 30vw;\n  border-radius: 3rem;\n  border-color: ${props => props.theme.googleBlue};\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 3rem;\n    font-weight: normal;\n  }\n  form {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst BigStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 80vw;\n\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 2rem;\n    font-weight: bold;\n  }\n  .Form {\n    justify-items: center;\n    align-items: center;\n  }\n  fieldset {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nconst BiggestStyledPage = styled.div`\n  display: block;\n  margin: 0 auto;\n  max-width: 100vw;\n\n  h4 {\n    margin: 0 auto;\n    text-align: center;\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n  .Form {\n    justify-items: center;\n    align-items: center;\n  }\n  fieldset {\n    justify-items: center;\n    align-items: center;\n  }\n`;\n\nexport { MinimStyledPage, MiniStyledPage, StyledPage, BigStyledPage, BiggestStyledPage };\n","import React, { Component } from 'react';\r\nimport { Query } from 'react-apollo';\r\nimport Form from '../styles/Form';\r\nimport { StyledPage } from '../styles/StyledPage';\r\nimport Link from 'next/link';\r\nimport Error from '../ErrorMessage';\r\nimport styled from 'styled-components';\r\nimport DeleteRegion from '../region/DeleteRegion';\r\nimport { getAllSubjectsQuery } from '../queries&Mutations&Functions/Queries';\r\n\r\nconst DeleteBlock = styled.div`align-content: left;`;\r\nconst UpdateBlock = styled.button`\r\n\tfont-weight: bold;\r\n\tborder-radius: 8px;\r\n\tfont-size: 1.5rem;\r\n\theight: 30px;\r\n\tborder: none;\r\n\tpadding: 5px;\r\n\talign-items: center;\r\n\tbackground-color: white;\r\n\tcolor: black;\r\n\tborder: 2px solid #4caf50; /* Green */\r\n\t:hover {\r\n\t\tcursor: pointer;\r\n\t\tbackground-color: #4c50;\r\n\t\tcolor: #4caf50;\r\n\t}\r\n\ta {\r\n\t\tbackground-color: ${(props) => props.theme.googleBlue};\r\n\t\tcolor: white;\r\n\t}\r\n`;\r\n\r\nconst SelectBlock = styled.div`display: block;`;\r\nconst StyledDivision = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 7fr auto auto;\r\n\tgrid-gap: 20px;\r\n\ttext-align: center;\r\n\tmargin: 0 auto;\r\n`;\r\n\r\nclass SelectSubjectToModify extends Component {\r\n\tstate = {\r\n\t\tid: ''\r\n\t};\r\n\r\n\thandleChange = (e) => {\r\n\t\tconst { name, value, type } = e.target;\r\n\t\tconst val = type === 'number' ? parseInt(value) : value;\r\n\t\tthis.setState({ [name]: val });\r\n\t};\r\n\r\n\trender = () => {\r\n\t\tconst { id } = this.state;\r\n\t\treturn (\r\n\t\t\t<Query query={getAllSubjectsQuery}>\r\n\t\t\t\t{({ data, loading, error }) => {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tloading && <p>Loading...</p>;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\terror && <Error error={error} />;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst getSubject = data.subjects.map((item) => (\r\n\t\t\t\t\t\t<option value={item.id} key={item.id}>\r\n\t\t\t\t\t\t\t{item.subjectName} - {item.subjectCode}\r\n\t\t\t\t\t\t</option>\r\n\t\t\t\t\t));\r\n\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<StyledPage>\r\n\t\t\t\t\t\t\t<Form\r\n\t\t\t\t\t\t\t\tonSubmit={async (e) => {\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\tconst res = await updateSubject();\r\n\t\t\t\t\t\t\t\t\tconsole.log(res);\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<h4>Modification d'une matiere</h4>\r\n\t\t\t\t\t\t\t\t<Error error={error} />\r\n\t\t\t\t\t\t\t\t<fieldset disabled={loading} aria-busy={loading}>\r\n\t\t\t\t\t\t\t\t\t<StyledDivision>\r\n\t\t\t\t\t\t\t\t\t\t<SelectBlock>\r\n\t\t\t\t\t\t\t\t\t\t\t<select\r\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"id\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"id\"\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.state.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<option>Choisissez la matiere a modifier </option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{getSubject}\r\n\t\t\t\t\t\t\t\t\t\t\t</select>\r\n\t\t\t\t\t\t\t\t\t\t</SelectBlock>\r\n\r\n\t\t\t\t\t\t\t\t\t\t<UpdateBlock>\r\n\t\t\t\t\t\t\t\t\t\t\t<Link href={{ pathname: '../updates/updateSubject', query: { id } }}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<a>Modifier</a>\r\n\t\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t</UpdateBlock>\r\n\t\t\t\t\t\t\t\t\t\t<DeleteBlock>\r\n\t\t\t\t\t\t\t\t\t\t\t<DeleteRegion id={this.state.id}>Delete</DeleteRegion>\r\n\t\t\t\t\t\t\t\t\t\t</DeleteBlock>\r\n\t\t\t\t\t\t\t\t\t</StyledDivision>\r\n\t\t\t\t\t\t\t\t</fieldset>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t</StyledPage>\r\n\t\t\t\t\t);\r\n\t\t\t\t}}\r\n\t\t\t</Query>\r\n\t\t);\r\n\t};\r\n}\r\n\r\nexport default SelectSubjectToModify;\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}