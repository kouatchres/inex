{"version":3,"file":"static\\development\\pages\\newRegister.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/newRegister.js","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/Registrations.jsx","webpack:///./src/components/styles/Form.js","webpack:///./src/data.jsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"graphql-tag\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import React from \"react\";\r\nimport Registrations from \"../src/components/Registrations\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledRegion = styled.div`\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 80rem;\r\n  width: 80vw;\r\n`;\r\n\r\nconst register = () => {\r\n  return (\r\n    <StyledRegion>\r\n      <Registrations />\r\n    </StyledRegion>\r\n  );\r\n};\r\nexport default register;\r\n","import styled from 'styled-components';\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst ErrorStyles = styled.div`\n  padding: 2rem;\n  background: white;\n  margin: 2rem 0;\n  border-radius: 12px;\n  border: 1px solid rgba(0, 0, 0, 0.05);\n  border-left: 5px solid red;\n  p {\n    margin: 0;\n    font-weight: 50;\n  }\n  strong {\n    margin-right: 1rem;\n  }\n`;\n\nconst DisplayError = ({ error }) => {\n  if (!error || !error.message) return null;\n  if (error.networkError && error.networkError.result && error.networkError.result.errors.length) {\n    return error.networkError.result.errors.map((error, i) => (\n      <ErrorStyles key={i}>\n        <p data-test=\"graphql-error\">\n          <strong>Shoot!</strong>\n          {error.message.replace('GraphQL error: ', '')}\n        </p>\n      </ErrorStyles>\n    ));\n  }\n  return (\n    <ErrorStyles>\n      <p data-test=\"graphql-error\">\n        <strong>Shoot!</strong>\n        {error.message.replace('GraphQL error: ', '')}\n      </p>\n    </ErrorStyles>\n  );\n};\n\nDisplayError.defaultProps = {\n  error: {},\n};\n\nDisplayError.propTypes = {\n  error: PropTypes.object,\n};\n\nexport default DisplayError;\n","import React, {Component} from \"react\";\r\nimport {Mutation, Query} from \"react-apollo\";\r\nimport Form from \"./styles/Form\";\r\nimport gql from \"graphql-tag\";\r\nimport Error from \"./ErrorMessage\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    storedTown,\r\n    storedCenter ,\r\n     storeRegion,\r\n      storedDivision,\r\n       storedSubDivision,\r\n        storedExam, \r\n        storedSession,\r\n          storedCandidate, \r\n          storedSeries,\r\n          storedEducType,\r\n          bestTowns\r\n        } from \"../data\";\r\n\r\nconst StyledDivision = styled.div `\r\n  display: grid;\r\n  grid-template-columns:repeat(2, 1fr);\r\n  grid-gap:2rem;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 82rem;\r\n\r\n`;\r\n\r\nconst CenterSelect = styled.div `\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 40rem;\r\n`;\r\n\r\nconst OtherSelect = styled.div `\r\n  display: block;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n  min-width: 40rem;\r\n`;\r\n\r\nconst GET_ALL_REGIONS_QUERY = gql `\r\n  query GET_ALL_REGIONS_QUERY {\r\n    regions(orderBy: regName_DESC) {\r\n    regName\r\n    regCode\r\n    id\r\n  }\r\n  }\r\n`;\r\n\r\nconst GET_ALL_SERIES_QUERY = gql `\r\n  query GET_ALL_SERIES_QUERY {\r\n    serieses(orderBy: seriesName_ASC) {\r\n      seriesName\r\n      seriesCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ALL_EDUCATION_TYPES_QUERY = gql `\r\n  query GET_ALL_EDUCATION_TYPES_QUERY {\r\n    educationTypes {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\n\r\nconst GET_ALL_SERIES_OF_EDUCATION_TYPE_QUERY =gql`\r\nquery GET_ALL_SERIES_OF_EDUCATION_TYPE_QUERY($id: ID!){\r\n  educationType(id:$id){\r\n    id\r\n    educationTypeName\r\n     series(orderBy: seriesName_ASC){\r\n       seriesName\r\n       seriesCode\r\n     }\r\n  }\r\n}\r\n\r\n\r\n`;\r\n\r\n\r\nconst GET_ALL_EXAMS_QUERY = gql `\r\n  query GET_ALL_EXAMS_QUERY {\r\n    exams(orderBy: examName_ASC ) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ALL_SESSIONS_QUERY = gql `\r\n  query GET_ALL_SESSIONS_QUERY {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      createdAt\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GET_ALL_DIVISIONS_QUERY = gql `\r\n  query GET_ALL_DIVISIONS_QUERY {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GET_DIVISIONS_OF_A_REGION_QUERY = gql `\r\n  query GET_DIVISIONS_OF_A_REGION_QUERY($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SUBDIVISIONS_OF_A_DIVSION_QUERY = gql `\r\n  query GET_SUBDIVISIONS_OF_A_DIVSION_QUERY($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TOWNS_OF_A_SUBDIVISIONS_QUERY = gql `\r\n  query GET_TOWNS_OF_A_SUBDIVISIONS_QUERY($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_CENTERS_OF_A_TOWN_QUERY = gql `\r\n  query GET_CENTERS_OF_A_TOWN_QUERY($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_REGISTRATION_MUTATION = gql `\r\n  mutation CREATE_REGISTRATION_MUTATION(\r\n      $exam: ExamWhereUniqueInput!,\r\n      $series: SeriesWhereUniqueInput!, \r\n      $candidate: CandidateWhereUniqueInput!, \r\n      $session: SessionWhereUniqueInput!, \r\n      $center: CenterWhereUniqueInput!,\r\n      ) {\r\n    createRegistrations( \r\n        exam:$exam,\r\n        series: $series,\r\n        series: $series,\r\n         candidate: $candidate,\r\n          center: $center\r\n          ) {\r\n      id\r\n      series {\r\n        seriesName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass Registrations extends Component {\r\n    state = {\r\n        townName: \"\",\r\n        townCode: \"\",\r\n        townID: \"12\",\r\n        divisionID: \"12\",\r\n        subDivisionID: \"12\",\r\n        regionID: \"12\",\r\n        centerID: \"12\",\r\n        examID: \"12\",\r\n        sessionID: \"12\",\r\n        seriesID: \"12\",\r\n        educTypeID: \"12\",\r\n        candidateID: \"12\",\r\n        region: storeRegion,\r\n        division: storedDivision,\r\n        subDiv: storedSubDivision,\r\n        town: storedTown,\r\n        center: storedCenter,\r\n        exam: storedExam,\r\n        session: storedSession,\r\n        series: storedSeries,\r\n        educationType: storedEducType,\r\n        candidate: storedCandidate,\r\n        candidateRegistrationID:\"125\"\r\n    };\r\n\r\n    handleChange = e => {\r\n        const {name, value, type} = e.target;\r\n        const val = type === \"number\"? parseInt(value): value;\r\n        this.setState({[name]: val});\r\n    };\r\n\r\n    getselectedRegion = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempRegions = [...dataSource];\r\n            // get the selected region object\r\n            const selectedRegion = tempRegions.find(item => item.id === this.state.regionID);\r\n            console.log(\"getting selected region\");\r\n            console.log(selectedRegion);\r\n            return selectedRegion;\r\n        }\r\n    };\r\n\r\n    getselectedDivision = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempDivisions = [...dataSource];\r\n            // get the selected division object\r\n            const selectedDivision = tempDivisions.find(item => item.id === this.state.divisionID);\r\n            console.log(selectedDivision);\r\n            return selectedDivision;\r\n        }\r\n    };\r\n\r\n    getselectedSubDivision = (dataSource) => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempSubDivisions = [...dataSource];\r\n            // get the selected division object\r\n            const selectedSubDivision = tempSubDivisions.find(item => item.id === this.state.subDivisionID);\r\n\r\n            console.log(selectedSubDivision);\r\n            return selectedSubDivision;\r\n        }\r\n    };\r\n\r\n    getselectedTown = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempTown = [...dataSource];\r\n            // get the selected division object\r\n            const selectedTown = tempTown.find(item => item.id === this.state.townID);\r\n\r\n            console.log(selectedTown);\r\n            return selectedTown;\r\n        }\r\n    };\r\n\r\n    getselectedCenter = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempCenter = [...dataSource];\r\n            // get the selected division object\r\n            const selectedCenter = tempCenter.find(item => item.id === this.state.centerID);\r\n\r\n            console.log(selectedCenter);\r\n            return selectedCenter;\r\n        }\r\n    };\r\n    getselectedExam = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempExam = [...dataSource];\r\n            // get the selected division object\r\n            const selectedExam = tempExam.find(item => item.id === this.state.examID);\r\n\r\n            console.log(selectedExam);\r\n            return selectedExam;\r\n        }\r\n    };\r\n    getselectedSession = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempSession = [...dataSource];\r\n            // get the selected division object\r\n            const selectedSession = tempSession.find(item => item.id === this.state.sessionID);\r\n\r\n            console.log(selectedSession);\r\n            return selectedSession;\r\n        }\r\n    };\r\n    getselectedSeries = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempSeries = [...dataSource];\r\n            // get the selected division object\r\n            const selectedSeries = tempSeries.find(item => item.id === this.state.seriesID);\r\n\r\n            console.log(selectedSeries);\r\n            return selectedSeries;\r\n        }\r\n    };\r\n    getselectedEducType = dataSource => {\r\n        // 1 copy the data source\r\n        if (dataSource.length > 0) {\r\n            const tempEducType = [...dataSource];\r\n            // get the selected division object\r\n            const selectedEducType = tempEducType.find(item => item.id === this.state.educTypeID);\r\n\r\n            console.log(selectedEducType);\r\n            return selectedEducType;\r\n        }\r\n    };\r\n\r\n    \r\n    render() {\r\n        return (\r\n            <Query query={GET_ALL_REGIONS_QUERY}>\r\n                {({data, loading, error}) => {\r\n                    {\r\n                        loading && <p>Loading...</p>;\r\n                    }\r\n                    {\r\n                        error && <Error error={error}/>;\r\n                    }\r\n                    const {regions} = data;\r\n                    const anyRegion = regions[0];\r\n     //prepare data for the region select options\r\n     const regionsOptions = regions.map(item => (\r\n                        <option value={item.id} key={item.id}>\r\n                            {item.regName}\r\n                        </option>\r\n                    ));\r\n\r\n\r\n                    return (\r\n                        <Query\r\n                            query={GET_DIVISIONS_OF_A_REGION_QUERY}\r\n                            variables={this.getselectedRegion(regions) || anyRegion}>\r\n                            {({data, loading, error}) => {\r\n                                {\r\n                                    loading && <p>Loading...</p>;\r\n                                }\r\n                                {\r\n                                    error && <Error error={error}/>;\r\n                                }\r\n\r\n                                const {region: province} = data;\r\n                                const {division} = province;\r\n                                const anyDivision = division[0];\r\n\r\n                                const divisionsOptions = division.map(item => (\r\n                                    <option value={item.id} key={item.id}>\r\n                                        {item.divName}\r\n                                    </option>\r\n                                ));\r\n\r\n                         \r\n                                return (\r\n                                    <Query\r\n                                        query={GET_SUBDIVISIONS_OF_A_DIVSION_QUERY}\r\n                                        variables={division && (this.getselectedDivision(division) || anyDivision)}>\r\n                                        {({data, loading, error}) => {\r\n                                            {\r\n                                                loading && <p>Loading...</p>;\r\n                                            }\r\n                                            {\r\n                                                error && <Error error={error}/>;\r\n                                            }\r\n                                            const {division:departement} = data;\r\n                                            const {subDivision} = departement;\r\n                                            const subDivisionsOptions =subDivision.map(item => (\r\n                                                    <option value={item.id} key={item.id}>\r\n                                                        {item.subDivName}\r\n                                                    </option>\r\n                                                )); \r\n\r\n\r\n\r\n                                            return (\r\n                                                <Query\r\n                                                    query={GET_TOWNS_OF_A_SUBDIVISIONS_QUERY}\r\n                                                    variables={this.getselectedSubDivision(subDivision)}>\r\n                                                    {({data, loading, error}) => {\r\n                                                        {\r\n                                                            loading && <p>Loding...</p>;\r\n                                                        }\r\n                                                        {\r\n                                                            error && <Error error={error}/>;\r\n                                                        }\r\n\r\n                                                        console.log(\"these are the towns of the selected Sub division\");\r\n                                                      \r\n                                                        const {subDivision} = data; \r\n                                                       console.log(data)\r\n                                                       const newTowns ={...subDivision}\r\n                                                        const {town} = newTowns\r\n                                                       console.log(newTowns)\r\n                                                       console.log(town)\r\n                                                       \r\n                                     return (\r\n                                                <Query\r\n                                                    query={GET_CENTERS_OF_A_TOWN_QUERY}\r\n                                                    variables={ town &&  this.getselectedTown(town) }\r\n                                                     >\r\n                                                    {({data, loading, error}) => {\r\n                                                        {\r\n                                                            loading && <p>Loding...</p>;\r\n                                                        }\r\n                                                        {\r\n                                                            error && <Error error={error}/>;\r\n                                                        }\r\n                                        const { town: ville} =data\r\n                                        const theTowns= {...ville}\r\n                                       const { center}= theTowns\r\n                                        console.log(center)\r\n                                                        return (\r\n\r\n                                                            <Query query={GET_ALL_SESSIONS_QUERY}>\r\n                                                                {({data, loading, error}) => {\r\n                                                                  {\r\n                                                                    loading && <p>loading...</p>;\r\n                                                                }\r\n                                                                {\r\n                                                                    error && <Error error={error}/>\r\n                                                                }\r\n\r\n                                                                const {sessions} = data;\r\n                                                                return (\r\n                                                            <Query query={GET_ALL_EDUCATION_TYPES_QUERY}>\r\n                                                                {({data, loading, error}) => {\r\n                                                                  {\r\n                                                                    loading && <p>loading...</p>;\r\n                                                                }\r\n                                                                {\r\n                                                                    error && <Error error={error}/>\r\n                                                                }\r\n\r\n                                                                const {educationTypes} = data;\r\n\r\n                                                                return (\r\n                                                                    <Query query={GET_ALL_SERIES_OF_EDUCATION_TYPE_QUERY}\r\n                                                                    variables={educationTypes && this.getselectedEducType(educationTypes)}\r\n                                                                    >\r\n                                                                        {({data, loading, error}) => {\r\n                                                                        {\r\n                                                                            loading && <p>loading...</p>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            error && <Error error={error}/>\r\n                                                                        }\r\n                                                                  const {educationType} = data\r\n                                                            const seriesEducType = {...educationType}\r\n                                                                        const {series}= seriesEducType\r\n                                                                        return (\r\n\r\n                                                                            <Query query={GET_ALL_EXAMS_QUERY}>\r\n                                                                                {({data, loading, error}) => {\r\n                                                                                 {   loading && <p>loading...</p>\r\n                                                                                }\r\n                                                                                {\r\n                                                                                    error && <Error error={error}/>\r\n                                                                                }\r\n                                                                              \r\n\r\n                                                                                const {exams} = data;\r\n             \r\n                   return (\r\n\r\n                                                                                    <Mutation\r\n                                                                                        mutation={CREATE_REGISTRATION_MUTATION}\r\n                                                                                        variables={{\r\n                                                                                        ...this.state\r\n\r\n                                                                                    }}>\r\n                                                                                        {(createRegistrations, {loading, error}) => (\r\n                                                                                                <Form\r\n                                                                                                    onSubmit={async e => {\r\n                                                                                                    e.preventDefault();\r\n                                                                                                    const res = await createRegistrations();\r\n                                                                                                    console.log(res);\r\n                                                                                                }}>\r\n                                                                                                    <h4>S'inscrire a un examen</h4>\r\n                                                                                                    <Error error={error}/>\r\n                                                                                                    <fieldset disabled={loading} aria-busy={loading}>\r\n                                                                                            <StyledDivision>\r\n                                                                                                    <CenterSelect>\r\n                                                                                                  <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"regionID\"\r\n                                                                                                            name=\"regionID\"\r\n                                                                                                            placeholder=\"select a region\"\r\n                                                                                                            value={this.state.regionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez une region</option>\r\n                                                                                                            {regionsOptions }\r\n                                                                                                        </select>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"divisionID\"\r\n                                                                                                            name=\"divisionID\"\r\n                                                                                                            value={this.state.divisionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez un departement</option>\r\n                                                                                                            {divisionsOptions }\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"subDivisionID\"\r\n                                                                                                            name=\"subDivisionID\"\r\n                                                                                                            value={this.state.subDivisionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>choisissez un Arrondissement</option>\r\n                                                                                                            {subDivisionsOptions}\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"townID\"\r\n                                                                                                            name=\"townID\"\r\n                                                                                                            value={this.state.townID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>choisissez une Ville</option>\r\n                                                                             { town && (town.map(item => (<option value={item.id} key={item.id}>\r\n                                                                                {item.townName}</option>))) }\r\n\r\n\r\n                                                                                                        </select>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"centerD\"\r\n                                                                                                            name=\"centerID\"\r\n                                                                                                            value={this.state.centerID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            \r\n                                                                                                              <option>Choisissez un Centre d'Examen</option>\r\n                                                                                                              {center && center.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>{item.centerName}</option>))  }\r\n                                                                                                        </select>\r\n    \r\n                                                                                                        </CenterSelect>\r\n                                                                                                        <OtherSelect>\r\n\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"examID\"\r\n                                                                                                            name=\"examID\"\r\n                                                                                                            value={this.state.examID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n \r\n                                                                                                            <option>Choisissez un Examen</option>\r\n                                                                                                              {exams && exams.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>{item.examName}</option>))  }\r\n                                                                                                        </select>\r\n\r\n                                                                                                      \r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"sessionID\"\r\n                                                                                                            name=\"sessionID\"\r\n                                                                                                            value={this.state.sessionID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez la Session</option>\r\n                                                                                                              {sessions && sessions.map(item => (\r\n                                                                                                              <option key={item.id} value={item.id}>{item.sessionName}</option>))  }\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"educTypeID\"\r\n                                                                                                            name=\"educTypeID\"\r\n                                                                                                            value={this.state.educTypeID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                                      <option>Choisissez un Type d'enseignement</option>\r\n                                                                                                            {educationTypes && educationTypes.map(item=> (<option key={item.id} value={item.id}  >{item.educationTypeName}  </option>))}\r\n                                                                                                        </select>\r\n                                                                                                        <select\r\n                                                                                                            type=\"select\"\r\n                                                                                                            id=\"seriesID\"\r\n                                                                                                            name=\"seriesID\"\r\n                                                                                                            value={this.state.seriesID}\r\n                                                                                                            onChange={this.handleChange}\r\n                                                                                                            required>\r\n                                                                                                            <option>Choisissez une Serie</option>\r\n                                                                                                            {series && series.map(item=> (<option key={item.id} value={item.id}  > {item.seriesName}  </option>))}\r\n                                                                                                        </select>\r\n                                                                                                       \r\n                                                                                                        </OtherSelect>\r\n                                                                                                       \r\n                                                                                                        <div className=\"submitButton\">\r\n                                                                                                            <button type=\"submit\">Submit{loading? \"ting\" : \"\"}</button>\r\n                                                                                                        </div>\r\n                                                                                            </StyledDivision>\r\n                                                                                                    </fieldset>\r\n                                                                                                </Form>\r\n                                                                                        )}\r\n                                                                                    </Mutation>\r\n                                                                                );\r\n                                                                                }}\r\n                                                                            </Query>\r\n                                                                        );\r\n                                                                        }}\r\n                                                                    </Query>\r\n                                                                );\r\n                                                                }}\r\n                                                            </Query>\r\n                                                                );\r\n                                                                }}\r\n                                                            </Query>\r\n                                                        );\r\n                                                    }}\r\n                                                </Query>\r\n                                            );\r\n                                        }}\r\n                                    </Query>\r\n                                );\r\n                            }}\r\n                        </Query>\r\n                    );\r\n                }}\r\n            </Query>\r\n                    );\r\n                }}\r\n            </Query>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Registrations;\r\n","import styled, { keyframes } from \"styled-components\";\n\nconst loading = keyframes`\n  from {\n    background-position: 0 0;\n    /* rotate: 0; */\n  }\n\n  to {\n    background-position: 100% 100%;\n    /* rotate: 360deg; */\n  }\n`;\n\nconst Form = styled.form`\n  /* box-shadow: 0 0 5px 3px rgba(0, 0, 0, 0.05); */\n  background: ${props => props.theme.pureWhite};\n  /* background: rgba(0, 0, 0, 0.02); */\n  border: 5px solid white;\n  padding: 20px;\n  font-size: 1.7rem;\n  line-height: 1.4;\n  font-weight: 400;\n  label {\n    margin-bottom: 2rem;\n    /* display: block;\n     width:35vw; \n     box-sizing:border-box; */\n  }\n  input,\n  textarea,\n  select {\n    width: 100%;\n    padding: 1rem;\n    font-size: 2rem;\n    border-style: none;\n    border-bottom: 1px solid ${props => props.theme.black};\n    &:focus {\n      outline: 0;\n      border-color: ${props => props.theme.red};\n    }\n  }\n  button,\n  input[type='submit'] {\n    width: auto;\n    background: ${props => props.theme.googleBlue};\n    color: white;\n    border: 0;\n    font-size: 2rem;\n    font-weight: 300;\n    border-radius:7px;\n    margin-top: 1rem;\n    padding: .8rem .8rem;\n  }\n  fieldset {\n    max-width: 80vw;\n    /* min-width: 300px; */\n    margin: 20px \n    height: 60vh;\n    border: .8px solid ${props => props.theme.lightGrey};\n    padding: 15px;\n    display: flex;\n    flex-direction: row;\n    /* grid-template-columns: repeat(auto-fit, -ms-content-zoom-limit-max(200px,1fr)); */\n    border-radius:.5rem;\n    justify-items: center;\n    box-shadow: ${props => props.theme.bs};\n\n    &[disabled] {\n      opacity: 0.3;\n    }\n    &::before {\n      height: 10px;\n      content: '';\n      display: block;\n      background-image: linear-gradient(to right, #359 0%, #e2b04a 20%, #359 100%);\n      /* background-image: linear-gradient(to right, #ff3019 0%, #e2b04a 50%, #ff3019 100%); */\n    }\n    &[aria-busy='true']::before {\n      background-size: 50% auto;\n      animation: ${loading} 0.5s linear infinite;\n    }\n  }\n`;\n\nexport default Form;\n","export const storeRegion = {\r\n  id: \"ck3albumntavq09228sbbzlh8\",\r\n  regName: \"Lithuania\",\r\n  regCode: \"Minsk\"\r\n};\r\nexport const storedGender = {\r\n  id: \"cjzkbe47nadpi0b53a6wjogji\",\r\n  genderName: \"Male\",\r\n  genderCode: \"M\"\r\n};\r\nexport const storedDivision = {\r\n  id: \"ck3albumntavq09228sbbzlh8\",\r\n  divName: \"Lithuania\",\r\n  divCode: \"Minsk\"\r\n};\r\nexport const storedTown = {\r\n  id: \"ck3albumntavq09228sbbzlh8\",\r\n  townName: \"Moscow\",\r\n  townCode: \"Mosc\"\r\n};\r\n\r\nexport const storedSubDivision = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  subDivCode: \"LLG\",\r\n  subDivName: \"Lilongwe\"\r\n};\r\n\r\nexport const storedEducType = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  educTypeCode: \"BCG\",\r\n  educTypeName: \"Generale\"\r\n};\r\n\r\nexport const storedCandidate = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  candidateCode: \"BCG\",\r\n  candidateName: \"Generale\"\r\n};\r\n\r\nexport const storedSeries = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  seriesCode: \"BCG\",\r\n  seriesName: \"Generale\"\r\n};\r\n\r\nexport const storedSession = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  sessionCode: \"BCG\",\r\n  sessionName: \"Generale\"\r\n};\r\n\r\nexport const storedExam = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  examCode: \"BCG\",\r\n  examName: \"Generale\"\r\n};\r\n\r\nexport const storedCenter = {\r\n  id: \"ck3m9r2e51ar009642q8k5nhs\",\r\n  centerCode: \"BCG\",\r\n  centerName: \"Generale\"\r\n};\r\n\r\nexport const bestTowns = [\r\n  { id: \"ck3uryvzdn6x00922vhgbf532\", townName: \"Botexim\", townCode: \"BTM\" },\r\n  { id: \"ck3ury04en6ql09223dgegz0o\", townName: \"Hummingbird\", townCode: \"HUB\" },\r\n  { id: \"ck3urygiy9o140964a70t3auk\", townName: \"Shakinbrest\", townCode: \"SHB\" }\r\n];\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AAAA;AAAA;AAAA;AAUA;AAAA;AAA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","sourceRoot":""}